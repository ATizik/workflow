{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"workflow A unidirectional data flow library for Kotlin and Swift, emphasizing: Strong support for state-machine driven UI and navigation. Composition and scaling. Effortless separation of business and UI concerns. This project is currently experimental and the API subject to breaking changes without notice. Follow Square s engineering blog, The Corner , to see when this project becomes stable. While the API is not yet stable, this code is in heavy production use in Android and iOS apps with millions of users. Using Workflows in your project Swift If you use CocoaPods to manage your dependencies, simply add Workflow and WorkflowUI to your Podfile: 1 2 pod Workflow pod WorkflowUI Kotlin Quick Start To get started with a fresh, barebones, Workflow-based Android app, we ve created a template repository \u2013 just click Use this template to create a new repository with a simple but runnable app: github.com/square/workflow-android-template Maven Artifacts Artifacts are hosted on Maven Central. If you re using Gradle, ensure mavenCentral() appears in your repositories block, and then add dependencies on the following artifacts: Maven Coordinates Depend on this if\u2026 com.squareup.workflow:workflow-core-jvm:x.y.z You are writing a library module/project that uses Workflows, but you don't need to interact with the runtime from the outside. com.squareup.workflow:workflow-rx2:x.y.z You need to interact with RxJava2 from your Workflows. com.squareup.workflow:workflow-testing-jvm:x.y.z You are writing tests. This should only be included as a test dependency. com.squareup.workflow:workflow-ui-android:x.y.z You're writing an Android app that uses Workflows. Lower-level Artifacts Most code shouldn t need to depend on these directly. They should generally only be used to build higher-level integrations with UI frameworks. Maven Coordinates Depend on this if\u2026 com.squareup.workflow:workflow-runtime-jvm:x.y.z You need to interact directly with the runtime, i.e. streams of renderings and outputs. com.squareup.workflow:workflow-ui-core-jvm:x.y.z You are writing workflow-ui-android for another UI framework. Defines the core types used by that artifact. Resources Square Workflow \u2013 Droidcon NYC 2019 ( slides ) SF Android GDG @ Square 2019 - Hello Workflow (live coding) Android Dialogs 5-part Coding Series 1 , 2 , 3 , 4 , 5 Reactive Workflows a Year Later \u2013 Droidcon NYC 2018 The Reactive Workflow Pattern \u2013 Fragmented Podcast The Reactive Workflow Pattern Update \u2013 Droidcon SF 2017 The Rx Workflow Pattern \u2013 Droidcon NYC 2017 ( slides ) Support Contact Workflow maintainers hang out in the #squarelibraries channel on the Kotlin Slack and the #square-libraries-wtf channel on the Android Study Group Slack. Releasing and Deploying See RELEASING.md . License Copyright 2019 Square Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#workflow","text":"A unidirectional data flow library for Kotlin and Swift, emphasizing: Strong support for state-machine driven UI and navigation. Composition and scaling. Effortless separation of business and UI concerns. This project is currently experimental and the API subject to breaking changes without notice. Follow Square s engineering blog, The Corner , to see when this project becomes stable. While the API is not yet stable, this code is in heavy production use in Android and iOS apps with millions of users.","title":"workflow"},{"location":"#using-workflows-in-your-project","text":"","title":"Using Workflows in your project"},{"location":"#swift","text":"If you use CocoaPods to manage your dependencies, simply add Workflow and WorkflowUI to your Podfile: 1 2 pod Workflow pod WorkflowUI","title":"Swift"},{"location":"#kotlin","text":"","title":"Kotlin"},{"location":"#quick-start","text":"To get started with a fresh, barebones, Workflow-based Android app, we ve created a template repository \u2013 just click Use this template to create a new repository with a simple but runnable app: github.com/square/workflow-android-template","title":"Quick Start"},{"location":"#maven-artifacts","text":"Artifacts are hosted on Maven Central. If you re using Gradle, ensure mavenCentral() appears in your repositories block, and then add dependencies on the following artifacts: Maven Coordinates Depend on this if\u2026 com.squareup.workflow:workflow-core-jvm:x.y.z You are writing a library module/project that uses Workflows, but you don't need to interact with the runtime from the outside. com.squareup.workflow:workflow-rx2:x.y.z You need to interact with RxJava2 from your Workflows. com.squareup.workflow:workflow-testing-jvm:x.y.z You are writing tests. This should only be included as a test dependency. com.squareup.workflow:workflow-ui-android:x.y.z You're writing an Android app that uses Workflows.","title":"Maven Artifacts"},{"location":"#lower-level-artifacts","text":"Most code shouldn t need to depend on these directly. They should generally only be used to build higher-level integrations with UI frameworks. Maven Coordinates Depend on this if\u2026 com.squareup.workflow:workflow-runtime-jvm:x.y.z You need to interact directly with the runtime, i.e. streams of renderings and outputs. com.squareup.workflow:workflow-ui-core-jvm:x.y.z You are writing workflow-ui-android for another UI framework. Defines the core types used by that artifact.","title":"Lower-level Artifacts"},{"location":"#resources","text":"Square Workflow \u2013 Droidcon NYC 2019 ( slides ) SF Android GDG @ Square 2019 - Hello Workflow (live coding) Android Dialogs 5-part Coding Series 1 , 2 , 3 , 4 , 5 Reactive Workflows a Year Later \u2013 Droidcon NYC 2018 The Reactive Workflow Pattern \u2013 Fragmented Podcast The Reactive Workflow Pattern Update \u2013 Droidcon SF 2017 The Rx Workflow Pattern \u2013 Droidcon NYC 2017 ( slides )","title":"Resources"},{"location":"#support-contact","text":"Workflow maintainers hang out in the #squarelibraries channel on the Kotlin Slack and the #square-libraries-wtf channel on the Android Study Group Slack.","title":"Support &amp; Contact"},{"location":"#releasing-and-deploying","text":"See RELEASING.md .","title":"Releasing and Deploying"},{"location":"#license","text":"Copyright 2019 Square Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"CHANGELOG/","text":"","title":"Change Log \u23cf"},{"location":"CODE_OF_CONDUCT/","text":"Open Source Code of Conduct At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure ourcommunity continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure ourcommunity continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"CODE_OF_CONDUCT/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"CODE_OF_CONDUCT/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"CODE_OF_CONDUCT/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"CODE_OF_CONDUCT/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"CONTRIBUTING/","text":"Contributing If you would like to contribute code to Workflow you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . If you re using IntelliJ IDEA, we use Square s code style definitions . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"If you would like to contribute code to Workflow you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . If you re using IntelliJ IDEA, we use Square s code style definitions . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"RELEASING/","text":"Releasing workflow Production Releases Before you begin: Please make sure you are set up with pod trunk and your CocoaPods account is a contributor to both the Workflow and WorkflowUI pods. If you need to be added as a contributor, please open a ticket requesting access , and assign it to @apgar or @timdonnelly. Merge an update of the change log with the changes since the last release. Make sure you re on the master branch (or fix branch, e.g. v0.1-fixes ). Confirm that the kotlin build is green before committing any changes 1 ( cd kotlin ./gradlew build connectedCheck ) In kotlin/gradle.properties , remove the -SNAPSHOT prefix from the VERSION_NAME property. E.g. VERSION_NAME=0.1.0 Create a commit and tag the commit with the version number: 1 2 git commit -am Releasing v0.1.0. git tag v0.1.0 Upload the kotlin artifacts: 1 ( cd kotlin ./gradlew clean build ./gradlew uploadArchives --no-parallel --no-daemon ) Disabling parallelism and daemon sharing is required by the vanniktech maven publish plugin. Without those, the artifacts will be split across multiple (invalid) staging repositories. Publish to CocoaPods: 1 2 bundle exec pod trunk push Workflow.podspec bundle exec pod trunk push WorkflowUI.podspec Bump the version Kotlin: Update the VERSION_NAME property in kotlin/gradle.properties to the new snapshot version, e.g. VERSION_NAME=0.2.0-SNAPSHOT . Swift: Update s.version in *.podspec to the new version, e.g. 0.2.0 . Commit the new snapshot version: 1 git commit -am Finish releasing v0.1.0. Push your commits and tag: 1 2 3 git push origin master # or git push origin fix-branch git push origin v0.1.0 Create the release on GitHub: Go to the Releases page for the GitHub project. Click Draft a new release . Enter the tag name you just pushed. Title the release with the same name as the tag. Copy paste the changelog entry for this release into the description. If this is a pre-release version, check the pre-release box. Hit Publish release . If this was a fix release, merge changes to the master branch: 1 2 3 4 5 git checkout master git reset --hard origin/master git merge --no-ff v0.1-fixes # Resolve conflicts. Accept master s versions of gradle.properties and podspecs. git push origin master Publish the website. See below. Deploying the documentation website Official Workflow documentation lives at https://squareup.github.io/workflow . The website content consists of three parts: Markdown documentation: Lives in the docs/ folder, and consists of a set of hand-written Markdown files that document high-level concepts. The static site generator mkdocs (with Material theming) is used to convert the Markdown to static, styled HTML. Kotlin API reference: Kdoc embedded in Kotlin source files is converted to GitHub-flavored Markdown by Dokka and then included in the statically-generated website. Swift API reference: Markup comments from Swift files are converted Markdown by Sourcedocs and then included in the statically-generated website. Setting up the site generators If you ve already done this, you can skip to Deploying the website to production below. Kotlin: Dokka Dokka runs as a Gradle plugin, so you need to be able to build the Kotlin source with Gradle, but that s it. To generate the docs manually, run: 1 2 cd kotlin ./gradlew dokka Swift: Sourcedocs Sourcedocs generates a Markdown site from Swift files. You need Ruby, rubygems, bundler (2.x), Xcode 10.2+, CocoaPods, and of course Sourcedocs itself, to run it. Assuming you ve already got Xcode, Ruby, and rubygems set up, install the rest of the dependencies: 1 2 gem install bundler cocoapods brew install sourcedocs If that succeeded, you need to generate an Xcode project before running Sourcedocs: 1 2 3 4 cd swift/Samples/SampleApp/ bundle exec pod install # If this is your first time running CocoaPods, that will fail and you ll need to run this instead: #bundle exec pod install --repo-update You can manually generate the docs to verify everything is working correctly by running: 1 2 3 4 #cd swift/Samples/SampleApp/ sourcedocs generate -- -scheme Workflow -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowUI -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowTesting -workspace SampleApp.xcworkspace mkdocs Mkdocs is written in Python, so you ll need Python and pip in order to run it. Assuming those are set up, run: 1 pip install mkdocs mkdocs-material Generate the site manually with: 1 mkdocs build While you re working on the documentation files, you can run the site locally with: 1 mkdocs serve Deploying the website to production Before deploying the website for real, you need to export our Google Analytics key in an environment variable so that it will get added to the HTML. Get the key from one of the project maintainers, then add the following to your .bashrc and re-source it: 1 export WORKFLOW_GOOGLE_ANALYTICS_KEY = UA-__________-1 Now you re ready to publish the site! Just choose a tag or SHA to deploy from, and run: 1 2 3 ./deploy_website.sh TAG_OR_SHA # For example: #./deploy_website.sh v0.18.0 This will clone the repo to a temporary directory, checkout the right SHA, build Kotlin and Swift API docs, generate HTML, and push the newly-generated content to the gh-pages branch on GitHub. Validating Markdown Since all of our high-level documentation is written in Markdown, we run a linter in CI to ensure we use consistent formatting. Lint errors will fail your PR builds, so to run locally, install markdownlint : 1 gem install mdl Run the linter using the lint_docs.sh : 1 ./lint_docs.sh Rules can be configured by editing .markdownlint.rb . Kotlin Notes Development To build and install the current version to your local Maven repository ( ~/.m2 ), run: 1 ./gradlew clean installArchives Deploying Configuration In order to deploy artifacts to a Maven repository, you ll need to set 4 properties in your private Gradle properties file ( ~/.gradle/gradle.properties ): 1 2 3 4 RELEASE_REPOSITORY_URL= url of release repository SNAPSHOT_REPOSITORY_URL= url of snapshot repository SONATYPE_NEXUS_USERNAME= username SONATYPE_NEXUS_PASSWORD= password Snapshot Releases Double-check that gradle.properties correctly contains the -SNAPSHOT suffix, then upload snapshot artifacts to Sonatype just like you would for a production release: 1 ./gradlew clean build ./gradlew uploadArchives --no-parallel --no-daemon You can verify the artifacts are available by visiting https://oss.sonatype.org/content/repositories/snapshots/com/squareup/workflow/ .","title":"Releasing workflow"},{"location":"RELEASING/#releasing-workflow","text":"","title":"Releasing workflow"},{"location":"RELEASING/#production-releases","text":"Before you begin: Please make sure you are set up with pod trunk and your CocoaPods account is a contributor to both the Workflow and WorkflowUI pods. If you need to be added as a contributor, please open a ticket requesting access , and assign it to @apgar or @timdonnelly. Merge an update of the change log with the changes since the last release. Make sure you re on the master branch (or fix branch, e.g. v0.1-fixes ). Confirm that the kotlin build is green before committing any changes 1 ( cd kotlin ./gradlew build connectedCheck ) In kotlin/gradle.properties , remove the -SNAPSHOT prefix from the VERSION_NAME property. E.g. VERSION_NAME=0.1.0 Create a commit and tag the commit with the version number: 1 2 git commit -am Releasing v0.1.0. git tag v0.1.0 Upload the kotlin artifacts: 1 ( cd kotlin ./gradlew clean build ./gradlew uploadArchives --no-parallel --no-daemon ) Disabling parallelism and daemon sharing is required by the vanniktech maven publish plugin. Without those, the artifacts will be split across multiple (invalid) staging repositories. Publish to CocoaPods: 1 2 bundle exec pod trunk push Workflow.podspec bundle exec pod trunk push WorkflowUI.podspec Bump the version Kotlin: Update the VERSION_NAME property in kotlin/gradle.properties to the new snapshot version, e.g. VERSION_NAME=0.2.0-SNAPSHOT . Swift: Update s.version in *.podspec to the new version, e.g. 0.2.0 . Commit the new snapshot version: 1 git commit -am Finish releasing v0.1.0. Push your commits and tag: 1 2 3 git push origin master # or git push origin fix-branch git push origin v0.1.0 Create the release on GitHub: Go to the Releases page for the GitHub project. Click Draft a new release . Enter the tag name you just pushed. Title the release with the same name as the tag. Copy paste the changelog entry for this release into the description. If this is a pre-release version, check the pre-release box. Hit Publish release . If this was a fix release, merge changes to the master branch: 1 2 3 4 5 git checkout master git reset --hard origin/master git merge --no-ff v0.1-fixes # Resolve conflicts. Accept master s versions of gradle.properties and podspecs. git push origin master Publish the website. See below.","title":"Production Releases"},{"location":"RELEASING/#deploying-the-documentation-website","text":"Official Workflow documentation lives at https://squareup.github.io/workflow . The website content consists of three parts: Markdown documentation: Lives in the docs/ folder, and consists of a set of hand-written Markdown files that document high-level concepts. The static site generator mkdocs (with Material theming) is used to convert the Markdown to static, styled HTML. Kotlin API reference: Kdoc embedded in Kotlin source files is converted to GitHub-flavored Markdown by Dokka and then included in the statically-generated website. Swift API reference: Markup comments from Swift files are converted Markdown by Sourcedocs and then included in the statically-generated website.","title":"Deploying the documentation website"},{"location":"RELEASING/#setting-up-the-site-generators","text":"If you ve already done this, you can skip to Deploying the website to production below.","title":"Setting up the site generators"},{"location":"RELEASING/#kotlin-dokka","text":"Dokka runs as a Gradle plugin, so you need to be able to build the Kotlin source with Gradle, but that s it. To generate the docs manually, run: 1 2 cd kotlin ./gradlew dokka","title":"Kotlin: Dokka"},{"location":"RELEASING/#swift-sourcedocs","text":"Sourcedocs generates a Markdown site from Swift files. You need Ruby, rubygems, bundler (2.x), Xcode 10.2+, CocoaPods, and of course Sourcedocs itself, to run it. Assuming you ve already got Xcode, Ruby, and rubygems set up, install the rest of the dependencies: 1 2 gem install bundler cocoapods brew install sourcedocs If that succeeded, you need to generate an Xcode project before running Sourcedocs: 1 2 3 4 cd swift/Samples/SampleApp/ bundle exec pod install # If this is your first time running CocoaPods, that will fail and you ll need to run this instead: #bundle exec pod install --repo-update You can manually generate the docs to verify everything is working correctly by running: 1 2 3 4 #cd swift/Samples/SampleApp/ sourcedocs generate -- -scheme Workflow -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowUI -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowTesting -workspace SampleApp.xcworkspace","title":"Swift: Sourcedocs"},{"location":"RELEASING/#mkdocs","text":"Mkdocs is written in Python, so you ll need Python and pip in order to run it. Assuming those are set up, run: 1 pip install mkdocs mkdocs-material Generate the site manually with: 1 mkdocs build While you re working on the documentation files, you can run the site locally with: 1 mkdocs serve","title":"mkdocs"},{"location":"RELEASING/#deploying-the-website-to-production","text":"Before deploying the website for real, you need to export our Google Analytics key in an environment variable so that it will get added to the HTML. Get the key from one of the project maintainers, then add the following to your .bashrc and re-source it: 1 export WORKFLOW_GOOGLE_ANALYTICS_KEY = UA-__________-1 Now you re ready to publish the site! Just choose a tag or SHA to deploy from, and run: 1 2 3 ./deploy_website.sh TAG_OR_SHA # For example: #./deploy_website.sh v0.18.0 This will clone the repo to a temporary directory, checkout the right SHA, build Kotlin and Swift API docs, generate HTML, and push the newly-generated content to the gh-pages branch on GitHub.","title":"Deploying the website to production"},{"location":"RELEASING/#validating-markdown","text":"Since all of our high-level documentation is written in Markdown, we run a linter in CI to ensure we use consistent formatting. Lint errors will fail your PR builds, so to run locally, install markdownlint : 1 gem install mdl Run the linter using the lint_docs.sh : 1 ./lint_docs.sh Rules can be configured by editing .markdownlint.rb .","title":"Validating Markdown"},{"location":"RELEASING/#kotlin-notes","text":"","title":"Kotlin Notes"},{"location":"RELEASING/#development","text":"To build and install the current version to your local Maven repository ( ~/.m2 ), run: 1 ./gradlew clean installArchives","title":"Development"},{"location":"RELEASING/#deploying","text":"","title":"Deploying"},{"location":"RELEASING/#configuration","text":"In order to deploy artifacts to a Maven repository, you ll need to set 4 properties in your private Gradle properties file ( ~/.gradle/gradle.properties ): 1 2 3 4 RELEASE_REPOSITORY_URL= url of release repository SNAPSHOT_REPOSITORY_URL= url of snapshot repository SONATYPE_NEXUS_USERNAME= username SONATYPE_NEXUS_PASSWORD= password","title":"Configuration"},{"location":"RELEASING/#snapshot-releases","text":"Double-check that gradle.properties correctly contains the -SNAPSHOT suffix, then upload snapshot artifacts to Sonatype just like you would for a production release: 1 ./gradlew clean build ./gradlew uploadArchives --no-parallel --no-daemon You can verify the artifacts are available by visiting https://oss.sonatype.org/content/repositories/snapshots/com/squareup/workflow/ .","title":"Snapshot Releases"},{"location":"code-recipes/","text":"Code Receipes Coming soon!","title":"Code Recipes"},{"location":"code-recipes/#code-receipes","text":"Coming soon!","title":"Code Receipes"},{"location":"development-process/","text":"Development Process Coming soon!","title":"Development Process"},{"location":"development-process/#development-process","text":"Coming soon!","title":"Development Process"},{"location":"faq/","text":"Frequently Asked Questions Isn t this basically React/Elm? React and the Elm architecture were both strong influences for this library. However both those libraries are written for JavaScript. Workflows are written in and for both Kotlin and Swift, making use of features of those languages, and with usability from those languages as a major design goal. There are also a few architectural differences: React Elm Workflow Modularity Component TK Workflow is analogous to React s Component State Each Component has a state property that is read directly and updated via a setState method. State is called Model in Elm. Workflow s have an associated state type. The state can only be updated when the props change, or with a WorkflowAction . Views Component s have a render method that returns a tree of elements. Elm applications have a view function that returns a tree of elements. Since workflows are not tied to any particular UI view layer, they can have an arbitrary rendering type. The render() method returns this type. Dependencies React allows parent components to pass props down to their children. TK In Swift, Workflow s are often structs that need to be initialized with their dependencies and configuration data from their parent. In Kotlin, they have a separate type parameter ( PropsT ) that is always passed down from the parent. Workflow instances can also inject dependencies, and play nicely with dependency injection frameworks. Composability TK TK TK Event Handling TK TK TK How is this different than MvRx? Besides being very Android and Rx specific, MvRx solves view modeling problems only per screen. Workflow was mainly inspired by the need to manage and compose navigation in apps with dozens or hundreds of screens. How do I get involved and/or contribute? Workflow is open source! See our CONTRIBUTING doc to get started. Stay tuned! We re considering hosting a public Slack channel for open source contributors. This seems clever. Can I stick with a traditional development approach? Of course! Workflow was designed to make complex application architecture predictable and safe for large development teams. We re confident that it brings benefits even to smaller projects, but there is never only one right way to build software. We recommend to follow good practices and use an architecture that makes sense for your project . Why do we need another architecture? Architectural patterns with weak access controls and heavy use of shared mutable state make it incredibly difficult to fully understand the behavior of the code that we are writing. This quickly devolves into an arms race as the codebase grows: if every feature or component in the codebase might change anything at any time, bug fixes turn into a really sad game of whack-a-mole. We have seen this pattern occur repeatedly in traditional mobile applications using patterns like MVC. Workflow defines strong boundaries and contracts between separate parts of the application to ensure that our code remains predictable and maintainable as the size and complexity of the codebase grows.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#isnt-this-basically-reactelm","text":"React and the Elm architecture were both strong influences for this library. However both those libraries are written for JavaScript. Workflows are written in and for both Kotlin and Swift, making use of features of those languages, and with usability from those languages as a major design goal. There are also a few architectural differences: React Elm Workflow Modularity Component TK Workflow is analogous to React s Component State Each Component has a state property that is read directly and updated via a setState method. State is called Model in Elm. Workflow s have an associated state type. The state can only be updated when the props change, or with a WorkflowAction . Views Component s have a render method that returns a tree of elements. Elm applications have a view function that returns a tree of elements. Since workflows are not tied to any particular UI view layer, they can have an arbitrary rendering type. The render() method returns this type. Dependencies React allows parent components to pass props down to their children. TK In Swift, Workflow s are often structs that need to be initialized with their dependencies and configuration data from their parent. In Kotlin, they have a separate type parameter ( PropsT ) that is always passed down from the parent. Workflow instances can also inject dependencies, and play nicely with dependency injection frameworks. Composability TK TK TK Event Handling TK TK TK","title":"Isn't this basically React/Elm?"},{"location":"faq/#how-is-this-different-than-mvrx","text":"Besides being very Android and Rx specific, MvRx solves view modeling problems only per screen. Workflow was mainly inspired by the need to manage and compose navigation in apps with dozens or hundreds of screens.","title":"How is this different than MvRx?"},{"location":"faq/#how-do-i-get-involved-andor-contribute","text":"Workflow is open source! See our CONTRIBUTING doc to get started. Stay tuned! We re considering hosting a public Slack channel for open source contributors.","title":"How do I get involved and/or contribute?"},{"location":"faq/#this-seems-clever-can-i-stick-with-a-traditional-development-approach","text":"Of course! Workflow was designed to make complex application architecture predictable and safe for large development teams. We re confident that it brings benefits even to smaller projects, but there is never only one right way to build software. We recommend to follow good practices and use an architecture that makes sense for your project .","title":"This seems clever. Can I stick with a traditional development approach?"},{"location":"faq/#why-do-we-need-another-architecture","text":"Architectural patterns with weak access controls and heavy use of shared mutable state make it incredibly difficult to fully understand the behavior of the code that we are writing. This quickly devolves into an arms race as the codebase grows: if every feature or component in the codebase might change anything at any time, bug fixes turn into a really sad game of whack-a-mole. We have seen this pattern occur repeatedly in traditional mobile applications using patterns like MVC. Workflow defines strong boundaries and contracts between separate parts of the application to ensure that our code remains predictable and maintainable as the size and complexity of the codebase grows.","title":"Why do we need another architecture?"},{"location":"kotlin/api/trace-encoder/","text":"trace-encoder Packages Name Summary com.squareup.tracing Index All Types","title":"Home"},{"location":"kotlin/api/trace-encoder/#packages","text":"Name Summary com.squareup.tracing","title":"Packages"},{"location":"kotlin/api/trace-encoder/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/trace-encoder/alltypes/","text":"All Types Name Summary com.squareup.tracing.TraceEncoder Encodes and writes trace events to an Okio BufferedSink . com.squareup.tracing.TraceEvent Represents a single event in a trace. com.squareup.tracing.TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name.","title":"Home"},{"location":"kotlin/api/trace-encoder/alltypes/#all-types","text":"Name Summary com.squareup.tracing.TraceEncoder Encodes and writes trace events to an Okio BufferedSink . com.squareup.tracing.TraceEvent Represents a single event in a trace. com.squareup.tracing.TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name.","title":"All Types"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/","text":"trace-encoder / com.squareup.tracing Package com.squareup.tracing Types Name Summary TraceEncoder class TraceEncoder : Closeable Encodes and writes trace events to an Okio BufferedSink . TraceEvent sealed class TraceEvent Represents a single event in a trace. TraceLogger interface TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name.","title":"trace-encoder"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/#package-comsquareuptracing","text":"","title":"Package com.squareup.tracing"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/#types","text":"Name Summary TraceEncoder class TraceEncoder : Closeable Encodes and writes trace events to an Okio BufferedSink . TraceEvent sealed class TraceEvent Represents a single event in a trace. TraceLogger interface TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name.","title":"Types"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/","text":"trace-encoder / com.squareup.tracing / TraceEncoder TraceEncoder class TraceEncoder : Closeable Encodes and writes trace events to an Okio BufferedSink . Parameters scope - The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start - The ClockMark to consider the beginning timestamp of the trace. All trace events timestamps are relative to this mark. MonoClock . markNow by default. ioDispatcher - The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider - Returns the BufferedSink to use to write trace events to. Called on a background thread. Constructors Name Summary init TraceEncoder(scope: CoroutineScope, start: ClockMark = MonoClock.markNow(), ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () - BufferedSink) Encodes and writes trace events to an Okio BufferedSink . Functions Name Summary close fun close(): Unit createLogger fun createLogger(processName: String = \"\", threadName: String = \"\"): TraceLogger Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID.","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/#traceencoder","text":"class TraceEncoder : Closeable Encodes and writes trace events to an Okio BufferedSink .","title":"TraceEncoder"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/#parameters","text":"scope - The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start - The ClockMark to consider the beginning timestamp of the trace. All trace events timestamps are relative to this mark. MonoClock . markNow by default. ioDispatcher - The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider - Returns the BufferedSink to use to write trace events to. Called on a background thread.","title":"Parameters"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/#constructors","text":"Name Summary init TraceEncoder(scope: CoroutineScope, start: ClockMark = MonoClock.markNow(), ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () - BufferedSink) Encodes and writes trace events to an Okio BufferedSink .","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/#functions","text":"Name Summary close fun close(): Unit createLogger fun createLogger(processName: String = \"\", threadName: String = \"\"): TraceLogger Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID.","title":"Functions"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEncoder / init init TraceEncoder(scope: CoroutineScope, start: ClockMark = MonoClock.markNow(), ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () - BufferedSink) Encodes and writes trace events to an Okio BufferedSink . Parameters scope - The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start - The ClockMark to consider the beginning timestamp of the trace. All trace events timestamps are relative to this mark. MonoClock . markNow by default. ioDispatcher - The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider - Returns the BufferedSink to use to write trace events to. Called on a background thread.","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/-init-/#init","text":"TraceEncoder(scope: CoroutineScope, start: ClockMark = MonoClock.markNow(), ioDispatcher: CoroutineDispatcher = IO, sinkProvider: () - BufferedSink) Encodes and writes trace events to an Okio BufferedSink .","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/-init-/#parameters","text":"scope - The CoroutineScope that defines the lifetime for the encoder. When the scope is cancelled or fails, the sink returned from sinkProvider will be closed. start - The ClockMark to consider the beginning timestamp of the trace. All trace events timestamps are relative to this mark. MonoClock . markNow by default. ioDispatcher - The CoroutineDispatcher to use to execute all IO operations. IO by default. sinkProvider - Returns the BufferedSink to use to write trace events to. Called on a background thread.","title":"Parameters"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/close/","text":"trace-encoder / com.squareup.tracing / TraceEncoder / close close fun close(): Unit","title":"Close"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/close/#close","text":"fun close(): Unit","title":"close"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/create-logger/","text":"trace-encoder / com.squareup.tracing / TraceEncoder / createLogger createLogger fun createLogger(processName: String = \"\", threadName: String = \"\"): TraceLogger Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID. Note this does not do anything with actual threads, it just affects the thread ID used in trace events.","title":"Create logger"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-encoder/create-logger/#createlogger","text":"fun createLogger(processName: String = \"\", threadName: String = \"\"): TraceLogger Allocates a new thread ID named threadName and returns a TraceLogger that will log all events under that thread ID. Note this does not do anything with actual threads, it just affects the thread ID used in trace events.","title":"createLogger"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/","text":"trace-encoder / com.squareup.tracing / TraceEvent TraceEvent sealed class TraceEvent Represents a single event in a trace. Types Name Summary AsyncDurationBegin data class AsyncDurationBegin : TraceEvent AsyncDurationEnd data class AsyncDurationEnd : TraceEvent Counter data class Counter : TraceEvent DurationBegin data class DurationBegin : TraceEvent DurationEnd data class DurationEnd : TraceEvent Instant data class Instant : TraceEvent ObjectCreated data class ObjectCreated : TraceEvent ObjectDestroyed data class ObjectDestroyed : TraceEvent ObjectSnapshot data class ObjectSnapshot : TraceEvent Properties Name Summary category open val category: String ? Inheritors Name Summary AsyncDurationBegin data class AsyncDurationBegin : TraceEvent AsyncDurationEnd data class AsyncDurationEnd : TraceEvent Counter data class Counter : TraceEvent DurationBegin data class DurationBegin : TraceEvent DurationEnd data class DurationEnd : TraceEvent Instant data class Instant : TraceEvent ObjectCreated data class ObjectCreated : TraceEvent ObjectDestroyed data class ObjectDestroyed : TraceEvent ObjectSnapshot data class ObjectSnapshot : TraceEvent","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/#traceevent","text":"sealed class TraceEvent Represents a single event in a trace.","title":"TraceEvent"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/#types","text":"Name Summary AsyncDurationBegin data class AsyncDurationBegin : TraceEvent AsyncDurationEnd data class AsyncDurationEnd : TraceEvent Counter data class Counter : TraceEvent DurationBegin data class DurationBegin : TraceEvent DurationEnd data class DurationEnd : TraceEvent Instant data class Instant : TraceEvent ObjectCreated data class ObjectCreated : TraceEvent ObjectDestroyed data class ObjectDestroyed : TraceEvent ObjectSnapshot data class ObjectSnapshot : TraceEvent","title":"Types"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/#properties","text":"Name Summary category open val category: String ?","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/#inheritors","text":"Name Summary AsyncDurationBegin data class AsyncDurationBegin : TraceEvent AsyncDurationEnd data class AsyncDurationEnd : TraceEvent Counter data class Counter : TraceEvent DurationBegin data class DurationBegin : TraceEvent DurationEnd data class DurationEnd : TraceEvent Instant data class Instant : TraceEvent ObjectCreated data class ObjectCreated : TraceEvent ObjectDestroyed data class ObjectDestroyed : TraceEvent ObjectSnapshot data class ObjectSnapshot : TraceEvent","title":"Inheritors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/category/","text":"trace-encoder / com.squareup.tracing / TraceEvent / category category open val category: String ?","title":"Category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/category/#category","text":"open val category: String ?","title":"category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationBegin AsyncDurationBegin data class AsyncDurationBegin : TraceEvent Constructors Name Summary init AsyncDurationBegin(id: Any , name: String , args: Map String , Any ? = emptyMap(), category: String ? = null) Properties Name Summary args val args: Map String , Any ? category val category: String ? id val id: Any name val name: String","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/#asyncdurationbegin","text":"data class AsyncDurationBegin : TraceEvent","title":"AsyncDurationBegin"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/#constructors","text":"Name Summary init AsyncDurationBegin(id: Any , name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/#properties","text":"Name Summary args val args: Map String , Any ? category val category: String ? id val id: Any name val name: String","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationBegin / init init AsyncDurationBegin(id: Any , name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/-init-/#init","text":"AsyncDurationBegin(id: Any , name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/args/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationBegin / args args val args: Map String , Any ?","title":"Args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/args/#args","text":"val args: Map String , Any ?","title":"args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/category/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationBegin / category category val category: String ? Overrides TraceEvent.category","title":"Category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/category/#category","text":"val category: String ? Overrides TraceEvent.category","title":"category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/id/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationBegin / id id val id: Any","title":"Id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/id/#id","text":"val id: Any","title":"id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/name/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationBegin / name name val name: String","title":"Name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-begin/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationEnd AsyncDurationEnd data class AsyncDurationEnd : TraceEvent Constructors Name Summary init AsyncDurationEnd(id: Any , name: String , args: Map String , Any ? = emptyMap(), category: String ? = null) Properties Name Summary args val args: Map String , Any ? category val category: String ? id val id: Any name val name: String","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/#asyncdurationend","text":"data class AsyncDurationEnd : TraceEvent","title":"AsyncDurationEnd"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/#constructors","text":"Name Summary init AsyncDurationEnd(id: Any , name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/#properties","text":"Name Summary args val args: Map String , Any ? category val category: String ? id val id: Any name val name: String","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationEnd / init init AsyncDurationEnd(id: Any , name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/-init-/#init","text":"AsyncDurationEnd(id: Any , name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/args/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationEnd / args args val args: Map String , Any ?","title":"Args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/args/#args","text":"val args: Map String , Any ?","title":"args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/category/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationEnd / category category val category: String ? Overrides TraceEvent.category","title":"Category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/category/#category","text":"val category: String ? Overrides TraceEvent.category","title":"category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/id/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationEnd / id id val id: Any","title":"Id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/id/#id","text":"val id: Any","title":"id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/name/","text":"trace-encoder / com.squareup.tracing / TraceEvent / AsyncDurationEnd / name name val name: String","title":"Name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-async-duration-end/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Counter Counter data class Counter : TraceEvent Constructors Name Summary init Counter(name: String , series: Map String , Number , id: Long ? = null) Properties Name Summary id val id: Long ? name val name: String series val series: Map String , Number Inherited Properties Name Summary category open val category: String ?","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/#counter","text":"data class Counter : TraceEvent","title":"Counter"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/#constructors","text":"Name Summary init Counter(name: String , series: Map String , Number , id: Long ? = null)","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/#properties","text":"Name Summary id val id: Long ? name val name: String series val series: Map String , Number","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/#inherited-properties","text":"Name Summary category open val category: String ?","title":"Inherited Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Counter / init init Counter(name: String , series: Map String , Number , id: Long ? = null)","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/-init-/#init","text":"Counter(name: String , series: Map String , Number , id: Long ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/id/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Counter / id id val id: Long ?","title":"Id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/id/#id","text":"val id: Long ?","title":"id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/name/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Counter / name name val name: String","title":"Name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/series/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Counter / series series val series: Map String , Number","title":"Series"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-counter/series/#series","text":"val series: Map String , Number","title":"series"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationBegin DurationBegin data class DurationBegin : TraceEvent Constructors Name Summary init DurationBegin(name: String , args: Map String , Any ? = emptyMap(), category: String ? = null) Properties Name Summary args val args: Map String , Any ? category val category: String ? name val name: String","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/#durationbegin","text":"data class DurationBegin : TraceEvent","title":"DurationBegin"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/#constructors","text":"Name Summary init DurationBegin(name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/#properties","text":"Name Summary args val args: Map String , Any ? category val category: String ? name val name: String","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationBegin / init init DurationBegin(name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/-init-/#init","text":"DurationBegin(name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/args/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationBegin / args args val args: Map String , Any ?","title":"Args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/args/#args","text":"val args: Map String , Any ?","title":"args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/category/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationBegin / category category val category: String ? Overrides TraceEvent.category","title":"Category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/category/#category","text":"val category: String ? Overrides TraceEvent.category","title":"category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/name/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationBegin / name name val name: String","title":"Name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-begin/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationEnd DurationEnd data class DurationEnd : TraceEvent Constructors Name Summary init DurationEnd(name: String , args: Map String , Any ? = emptyMap(), category: String ? = null) Properties Name Summary args val args: Map String , Any ? category val category: String ? name val name: String","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/#durationend","text":"data class DurationEnd : TraceEvent","title":"DurationEnd"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/#constructors","text":"Name Summary init DurationEnd(name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/#properties","text":"Name Summary args val args: Map String , Any ? category val category: String ? name val name: String","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationEnd / init init DurationEnd(name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/-init-/#init","text":"DurationEnd(name: String , args: Map String , Any ? = emptyMap(), category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/args/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationEnd / args args val args: Map String , Any ?","title":"Args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/args/#args","text":"val args: Map String , Any ?","title":"args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/category/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationEnd / category category val category: String ? Overrides TraceEvent.category","title":"Category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/category/#category","text":"val category: String ? Overrides TraceEvent.category","title":"category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/name/","text":"trace-encoder / com.squareup.tracing / TraceEvent / DurationEnd / name name val name: String","title":"Name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-duration-end/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant Instant data class Instant : TraceEvent Types Name Summary InstantScope enum class InstantScope Constructors Name Summary init Instant(name: String , args: Map String , Any ? = emptyMap(), scope: TraceEvent.Instant.InstantScope = THREAD, category: String ? = null) Properties Name Summary args val args: Map String , Any ? category val category: String ? name val name: String scope val scope: TraceEvent.Instant.InstantScope","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/#instant","text":"data class Instant : TraceEvent","title":"Instant"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/#types","text":"Name Summary InstantScope enum class InstantScope","title":"Types"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/#constructors","text":"Name Summary init Instant(name: String , args: Map String , Any ? = emptyMap(), scope: TraceEvent.Instant.InstantScope = THREAD, category: String ? = null)","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/#properties","text":"Name Summary args val args: Map String , Any ? category val category: String ? name val name: String scope val scope: TraceEvent.Instant.InstantScope","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant / init init Instant(name: String , args: Map String , Any ? = emptyMap(), scope: TraceEvent.Instant.InstantScope = THREAD, category: String ? = null)","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-init-/#init","text":"Instant(name: String , args: Map String , Any ? = emptyMap(), scope: TraceEvent.Instant.InstantScope = THREAD, category: String ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/args/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant / args args val args: Map String , Any ?","title":"Args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/args/#args","text":"val args: Map String , Any ?","title":"args"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/category/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant / category category val category: String ? Overrides TraceEvent.category","title":"Category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/category/#category","text":"val category: String ? Overrides TraceEvent.category","title":"category"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/name/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant / name name val name: String","title":"Name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/scope/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant / scope scope val scope: TraceEvent.Instant.InstantScope","title":"Scope"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/scope/#scope","text":"val scope: TraceEvent.Instant.InstantScope","title":"scope"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-instant-scope/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant / InstantScope InstantScope enum class InstantScope Enum Values Name Summary THREAD PROCESS GLOBAL","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-instant-scope/#instantscope","text":"enum class InstantScope","title":"InstantScope"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-instant-scope/#enum-values","text":"Name Summary THREAD PROCESS GLOBAL","title":"Enum Values"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant / InstantScope / GLOBAL GLOBAL GLOBAL","title":" g l o b a l"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-instant-scope/-g-l-o-b-a-l/#global","text":"GLOBAL","title":"GLOBAL"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant / InstantScope / PROCESS PROCESS PROCESS","title":" p r o c e s s"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-instant-scope/-p-r-o-c-e-s-s/#process","text":"PROCESS","title":"PROCESS"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/","text":"trace-encoder / com.squareup.tracing / TraceEvent / Instant / InstantScope / THREAD THREAD THREAD","title":" t h r e a d"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-instant/-instant-scope/-t-h-r-e-a-d/#thread","text":"THREAD","title":"THREAD"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectCreated ObjectCreated data class ObjectCreated : TraceEvent Constructors Name Summary init ObjectCreated(id: Long , objectType: String ) Properties Name Summary id val id: Long objectType val objectType: String Inherited Properties Name Summary category open val category: String ?","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/#objectcreated","text":"data class ObjectCreated : TraceEvent","title":"ObjectCreated"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/#constructors","text":"Name Summary init ObjectCreated(id: Long , objectType: String )","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/#properties","text":"Name Summary id val id: Long objectType val objectType: String","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/#inherited-properties","text":"Name Summary category open val category: String ?","title":"Inherited Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectCreated / init init ObjectCreated(id: Long , objectType: String )","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/-init-/#init","text":"ObjectCreated(id: Long , objectType: String )","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/id/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectCreated / id id val id: Long","title":"Id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/id/#id","text":"val id: Long","title":"id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/object-type/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectCreated / objectType objectType val objectType: String","title":"Object type"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-created/object-type/#objecttype","text":"val objectType: String","title":"objectType"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectDestroyed ObjectDestroyed data class ObjectDestroyed : TraceEvent Constructors Name Summary init ObjectDestroyed(id: Long , objectType: String ) Properties Name Summary id val id: Long objectType val objectType: String Inherited Properties Name Summary category open val category: String ?","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/#objectdestroyed","text":"data class ObjectDestroyed : TraceEvent","title":"ObjectDestroyed"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/#constructors","text":"Name Summary init ObjectDestroyed(id: Long , objectType: String )","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/#properties","text":"Name Summary id val id: Long objectType val objectType: String","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/#inherited-properties","text":"Name Summary category open val category: String ?","title":"Inherited Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectDestroyed / init init ObjectDestroyed(id: Long , objectType: String )","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/-init-/#init","text":"ObjectDestroyed(id: Long , objectType: String )","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/id/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectDestroyed / id id val id: Long","title":"Id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/id/#id","text":"val id: Long","title":"id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/object-type/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectDestroyed / objectType objectType val objectType: String","title":"Object type"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-destroyed/object-type/#objecttype","text":"val objectType: String","title":"objectType"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectSnapshot ObjectSnapshot data class ObjectSnapshot : TraceEvent Constructors Name Summary init ObjectSnapshot(id: Long , objectType: String , snapshot: Any ) Properties Name Summary id val id: Long objectType val objectType: String snapshot val snapshot: Any Inherited Properties Name Summary category open val category: String ?","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/#objectsnapshot","text":"data class ObjectSnapshot : TraceEvent","title":"ObjectSnapshot"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/#constructors","text":"Name Summary init ObjectSnapshot(id: Long , objectType: String , snapshot: Any )","title":"Constructors"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/#properties","text":"Name Summary id val id: Long objectType val objectType: String snapshot val snapshot: Any","title":"Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/#inherited-properties","text":"Name Summary category open val category: String ?","title":"Inherited Properties"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/-init-/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectSnapshot / init init ObjectSnapshot(id: Long , objectType: String , snapshot: Any )","title":" init "},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/-init-/#init","text":"ObjectSnapshot(id: Long , objectType: String , snapshot: Any )","title":"&lt;init&gt;"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/id/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectSnapshot / id id val id: Long","title":"Id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/id/#id","text":"val id: Long","title":"id"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/object-type/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectSnapshot / objectType objectType val objectType: String","title":"Object type"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/object-type/#objecttype","text":"val objectType: String","title":"objectType"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/snapshot/","text":"trace-encoder / com.squareup.tracing / TraceEvent / ObjectSnapshot / snapshot snapshot val snapshot: Any","title":"Snapshot"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-event/-object-snapshot/snapshot/#snapshot","text":"val snapshot: Any","title":"snapshot"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-logger/","text":"trace-encoder / com.squareup.tracing / TraceLogger TraceLogger interface TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name. Create with TraceEncoder.createLogger . Functions Name Summary log abstract fun log(eventBatch: List TraceEvent ): Unit Tags all events with the current timestamp and then enqueues them to be written to the trace file. abstract fun log(event: TraceEvent ): Unit Tags event with the current timestamp and then enqueues it to be written to the trace file.","title":"Home"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-logger/#tracelogger","text":"interface TraceLogger Logs TraceEvent s to a TraceEncoder under a given process and thread name. Create with TraceEncoder.createLogger .","title":"TraceLogger"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-logger/#functions","text":"Name Summary log abstract fun log(eventBatch: List TraceEvent ): Unit Tags all events with the current timestamp and then enqueues them to be written to the trace file. abstract fun log(event: TraceEvent ): Unit Tags event with the current timestamp and then enqueues it to be written to the trace file.","title":"Functions"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-logger/log/","text":"trace-encoder / com.squareup.tracing / TraceLogger / log log abstract fun log(eventBatch: List TraceEvent ): Unit Tags all events with the current timestamp and then enqueues them to be written to the trace file. abstract fun log(event: TraceEvent ): Unit Tags event with the current timestamp and then enqueues it to be written to the trace file.","title":"Log"},{"location":"kotlin/api/trace-encoder/com.squareup.tracing/-trace-logger/log/#log","text":"abstract fun log(eventBatch: List TraceEvent ): Unit Tags all events with the current timestamp and then enqueues them to be written to the trace file. abstract fun log(event: TraceEvent ): Unit Tags event with the current timestamp and then enqueues it to be written to the trace file.","title":"log"},{"location":"kotlin/api/workflow-core/","text":"workflow-core Packages Name Summary com.squareup.workflow Index All Types","title":"Home"},{"location":"kotlin/api/workflow-core/#packages","text":"Name Summary com.squareup.workflow","title":"Packages"},{"location":"kotlin/api/workflow-core/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-core/alltypes/","text":"All Types Name Summary kotlinx.coroutines.channels.BroadcastChannel (extensions in package com.squareup.workflow) okio.BufferedSink (extensions in package com.squareup.workflow) okio.BufferedSource (extensions in package com.squareup.workflow) okio.ByteString (extensions in package com.squareup.workflow) kotlinx.coroutines.Deferred (extensions in package com.squareup.workflow) kotlinx.coroutines.flow.Flow (extensions in package com.squareup.workflow) com.squareup.workflow.LifecycleWorker Worker that performs some action when the worker is started and/or stopped. kotlinx.coroutines.channels.ReceiveChannel (extensions in package com.squareup.workflow) com.squareup.workflow.RenderContext Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. com.squareup.workflow.Sink An object that receives values (commonly events or WorkflowAction ). Use RenderContext.makeActionSink to create instances. com.squareup.workflow.Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. com.squareup.workflow.StatefulWorkflow A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. com.squareup.workflow.StatelessWorkflow Minimal implementation of Workflow that maintains no state of its own. com.squareup.workflow.VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you. com.squareup.workflow.Worker Represents a unit of asynchronous work that can have zero, one, or multiple outputs. com.squareup.workflow.Workflow A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. com.squareup.workflow.WorkflowAction A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output.","title":"Home"},{"location":"kotlin/api/workflow-core/alltypes/#all-types","text":"Name Summary kotlinx.coroutines.channels.BroadcastChannel (extensions in package com.squareup.workflow) okio.BufferedSink (extensions in package com.squareup.workflow) okio.BufferedSource (extensions in package com.squareup.workflow) okio.ByteString (extensions in package com.squareup.workflow) kotlinx.coroutines.Deferred (extensions in package com.squareup.workflow) kotlinx.coroutines.flow.Flow (extensions in package com.squareup.workflow) com.squareup.workflow.LifecycleWorker Worker that performs some action when the worker is started and/or stopped. kotlinx.coroutines.channels.ReceiveChannel (extensions in package com.squareup.workflow) com.squareup.workflow.RenderContext Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. com.squareup.workflow.Sink An object that receives values (commonly events or WorkflowAction ). Use RenderContext.makeActionSink to create instances. com.squareup.workflow.Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. com.squareup.workflow.StatefulWorkflow A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. com.squareup.workflow.StatelessWorkflow Minimal implementation of Workflow that maintains no state of its own. com.squareup.workflow.VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you. com.squareup.workflow.Worker Represents a unit of asynchronous work that can have zero, one, or multiple outputs. com.squareup.workflow.Workflow A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. com.squareup.workflow.WorkflowAction A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output.","title":"All Types"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/","text":"workflow-core / com.squareup.workflow Package com.squareup.workflow Types Name Summary LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or stopped. RenderContext interface RenderContext StateT, in OutputT : Any Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. Sink interface Sink T An object that receives values (commonly events or WorkflowAction ). Use RenderContext.makeActionSink to create instances. Snapshot class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. StatefulWorkflow abstract class StatefulWorkflow in PropsT, StateT, out OutputT : Any , out RenderingT : Workflow PropsT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow abstract class StatelessWorkflow PropsT, OutputT : Any , RenderingT : Workflow PropsT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own. Worker interface Worker out OutputT Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workflow interface Workflow in PropsT, out OutputT : Any , out RenderingT A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. WorkflowAction interface WorkflowAction StateT, out OutputT : Any A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output. Annotations Name Summary VeryExperimentalWorkflow annotation class VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you. Extensions for External Classes Name Summary kotlinx.coroutines.channels.BroadcastChannel kotlinx.coroutines.channels.ReceiveChannel kotlinx.coroutines.Deferred kotlinx.coroutines.flow.Flow okio.BufferedSink okio.BufferedSource okio.ByteString Functions Name Summary applyTo fun StateT, OutputT : Any WorkflowAction StateT , OutputT .applyTo(state: StateT ): Pair StateT , OutputT ? contraMap fun T1, T2 Sink T1 .contraMap(transform: ( T2 ) - T1 ): Sink T2 Generates a new sink of type T2 . invoke operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument. makeEventSink fun EventT, StateT, OutputT : Any RenderContext StateT , OutputT .makeEventSink(block: WorkflowAction.Mutator StateT .( EventT ) - OutputT ?): Sink EventT Alternative to RenderContext.makeActionSink that allows externally defined event types to be mapped to anonymous WorkflowAction s. mapRendering fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun PropsT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow PropsT , Nothing , ChildRenderingT , input: PropsT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output. runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s. transform fun T, R Worker T .transform(transform: (Flow T ) - Flow R ): Worker R Returns a Worker that transforms this Worker s Flow by calling transform . workflowAction fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: String = \"\", block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: () - String , block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . Companion Object Functions Name Summary rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing. stateful fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( PropsT , Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot , onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( PropsT ) - StateT , render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given function. stateless fun PropsT, OutputT : Any , RenderingT Workflow.Companion.stateless(render: RenderContext Nothing , OutputT .(props: PropsT ) - RenderingT ): Workflow PropsT , OutputT , RenderingT Returns a stateless Workflow via the given render function.","title":"workflow-core"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#package-comsquareupworkflow","text":"","title":"Package com.squareup.workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#types","text":"Name Summary LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or stopped. RenderContext interface RenderContext StateT, in OutputT : Any Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. Sink interface Sink T An object that receives values (commonly events or WorkflowAction ). Use RenderContext.makeActionSink to create instances. Snapshot class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. StatefulWorkflow abstract class StatefulWorkflow in PropsT, StateT, out OutputT : Any , out RenderingT : Workflow PropsT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow abstract class StatelessWorkflow PropsT, OutputT : Any , RenderingT : Workflow PropsT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own. Worker interface Worker out OutputT Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workflow interface Workflow in PropsT, out OutputT : Any , out RenderingT A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. WorkflowAction interface WorkflowAction StateT, out OutputT : Any A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output.","title":"Types"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#annotations","text":"Name Summary VeryExperimentalWorkflow annotation class VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"Annotations"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#extensions-for-external-classes","text":"Name Summary kotlinx.coroutines.channels.BroadcastChannel kotlinx.coroutines.channels.ReceiveChannel kotlinx.coroutines.Deferred kotlinx.coroutines.flow.Flow okio.BufferedSink okio.BufferedSource okio.ByteString","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#functions","text":"Name Summary applyTo fun StateT, OutputT : Any WorkflowAction StateT , OutputT .applyTo(state: StateT ): Pair StateT , OutputT ? contraMap fun T1, T2 Sink T1 .contraMap(transform: ( T2 ) - T1 ): Sink T2 Generates a new sink of type T2 . invoke operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument. makeEventSink fun EventT, StateT, OutputT : Any RenderContext StateT , OutputT .makeEventSink(block: WorkflowAction.Mutator StateT .( EventT ) - OutputT ?): Sink EventT Alternative to RenderContext.makeActionSink that allows externally defined event types to be mapped to anonymous WorkflowAction s. mapRendering fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun PropsT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow PropsT , Nothing , ChildRenderingT , input: PropsT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output. runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s. transform fun T, R Worker T .transform(transform: (Flow T ) - Flow R ): Worker R Returns a Worker that transforms this Worker s Flow by calling transform . workflowAction fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: String = \"\", block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: () - String , block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#companion-object-functions","text":"Name Summary rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing. stateful fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( PropsT , Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot , onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( PropsT ) - StateT , render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given function. stateless fun PropsT, OutputT : Any , RenderingT Workflow.Companion.stateless(render: RenderContext Nothing , OutputT .(props: PropsT ) - RenderingT ): Workflow PropsT , OutputT , RenderingT Returns a stateless Workflow via the given render function.","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/apply-to/","text":"workflow-core / com.squareup.workflow / applyTo applyTo fun StateT, OutputT : Any WorkflowAction StateT , OutputT .applyTo(state: StateT ): Pair StateT , OutputT ?","title":"Apply to"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/apply-to/#applyto","text":"fun StateT, OutputT : Any WorkflowAction StateT , OutputT .applyTo(state: StateT ): Pair StateT , OutputT ?","title":"applyTo"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/contra-map/","text":"workflow-core / com.squareup.workflow / contraMap contraMap fun T1, T2 Sink T1 .contraMap(transform: ( T2 ) - T1 ): Sink T2 Generates a new sink of type T2 . Given a transform closure, the following code is functionally equivalent: 1 2 3 sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type T into Type U via (T)- U . - contraMap turns Type T into Type U via (U)- T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API.","title":"Contra map"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/contra-map/#contramap","text":"fun T1, T2 Sink T1 .contraMap(transform: ( T2 ) - T1 ): Sink T2 Generates a new sink of type T2 . Given a transform closure, the following code is functionally equivalent: 1 2 3 sink.send(transform(value)) sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type T into Type U via (T)- U . - contraMap turns Type T into Type U via (U)- T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API.","title":"contraMap"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/invoke/","text":"workflow-core / com.squareup.workflow / invoke invoke operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"Invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/invoke/#invoke","text":"operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/make-event-sink/","text":"workflow-core / com.squareup.workflow / makeEventSink makeEventSink fun EventT, StateT, OutputT : Any RenderContext StateT , OutputT .makeEventSink(block: WorkflowAction.Mutator StateT .( EventT ) - OutputT ?): Sink EventT Alternative to RenderContext.makeActionSink that allows externally defined event types to be mapped to anonymous WorkflowAction s.","title":"Make event sink"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/make-event-sink/#makeeventsink","text":"fun EventT, StateT, OutputT : Any RenderContext StateT , OutputT .makeEventSink(block: WorkflowAction.Mutator StateT .( EventT ) - OutputT ?): Sink EventT Alternative to RenderContext.makeActionSink that allows externally defined event types to be mapped to anonymous WorkflowAction s.","title":"makeEventSink"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/map-rendering/","text":"workflow-core / com.squareup.workflow / mapRendering mapRendering fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Map rendering"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/map-rendering/#maprendering","text":"fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"mapRendering"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/render-child/","text":"workflow-core / com.squareup.workflow / renderChild renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun PropsT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow PropsT , Nothing , ChildRenderingT , input: PropsT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output.","title":"Render child"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/render-child/#renderchild","text":"fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun PropsT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow PropsT , Nothing , ChildRenderingT , input: PropsT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output.","title":"renderChild"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/rendering/","text":"workflow-core / com.squareup.workflow / rendering rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing.","title":"Rendering"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/rendering/#rendering","text":"fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing.","title":"rendering"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/running-worker/","text":"workflow-core / com.squareup.workflow / runningWorker runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s. A simple way to create workers that don t output anything is using Worker.createSideEffect . Parameters key - An optional string key that is used to distinguish between identical Worker s.","title":"Running worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/running-worker/#runningworker","text":"fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s. A simple way to create workers that don t output anything is using Worker.createSideEffect .","title":"runningWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/running-worker/#parameters","text":"key - An optional string key that is used to distinguish between identical Worker s.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/stateful/","text":"workflow-core / com.squareup.workflow / stateful stateful inline fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( PropsT , Snapshot ?) - StateT , crossinline render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , crossinline snapshot: ( StateT ) - Snapshot , crossinline onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. inline fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( Snapshot ?) - StateT , crossinline render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , crossinline snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given functions. inline fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( PropsT ) - StateT , crossinline render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , crossinline onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. This overload does not support snapshotting, but there are other overloads that do. inline fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , crossinline render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given function. This overload does not support snapshots, but there are others that do.","title":"Stateful"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/stateful/#stateful","text":"inline fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( PropsT , Snapshot ?) - StateT , crossinline render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , crossinline snapshot: ( StateT ) - Snapshot , crossinline onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. inline fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( Snapshot ?) - StateT , crossinline render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , crossinline snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given functions. inline fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( PropsT ) - StateT , crossinline render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , crossinline onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. This overload does not support snapshotting, but there are other overloads that do. inline fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , crossinline render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given function. This overload does not support snapshots, but there are others that do.","title":"stateful"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/stateless/","text":"workflow-core / com.squareup.workflow / stateless stateless inline fun PropsT, OutputT : Any , RenderingT Workflow.Companion.stateless(crossinline render: RenderContext Nothing , OutputT .(props: PropsT ) - RenderingT ): Workflow PropsT , OutputT , RenderingT Returns a stateless Workflow via the given render function. Note that while the returned workflow doesn t have any internal state of its own, it may use props received from its parent, and it may render child workflows that do have their own internal state.","title":"Stateless"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/stateless/#stateless","text":"inline fun PropsT, OutputT : Any , RenderingT Workflow.Companion.stateless(crossinline render: RenderContext Nothing , OutputT .(props: PropsT ) - RenderingT ): Workflow PropsT , OutputT , RenderingT Returns a stateless Workflow via the given render function. Note that while the returned workflow doesn t have any internal state of its own, it may use props received from its parent, and it may render child workflows that do have their own internal state.","title":"stateless"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/transform/","text":"workflow-core / com.squareup.workflow / transform transform fun T, R Worker T .transform(transform: (Flow T ) - Flow R ): Worker R Returns a Worker that transforms this Worker s Flow by calling transform . The returned worker is considered equivalent with any other worker returned by this function with the same receiver. Examples Same source and key are equivalent 1 2 3 4 5 6 7 8 9 val secondsWorker = millisWorker.transform { it.map { millis - millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = millisWorker.transform { it.map { millis - millis.toSeconds() } } assert(secondsWorker.doesSameWorkAs(otherSecondsWorker)) Different sources are not equivalent 1 2 3 4 5 6 7 val secondsWorker = millisWorker.transform { it.map { millis - millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = secondsWorker.transform { it } assert(!secondsWorker.doesSameWorkAs(otherSecondsWorker))","title":"Transform"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/transform/#transform","text":"fun T, R Worker T .transform(transform: (Flow T ) - Flow R ): Worker R Returns a Worker that transforms this Worker s Flow by calling transform . The returned worker is considered equivalent with any other worker returned by this function with the same receiver.","title":"transform"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/transform/#examples","text":"","title":"Examples"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/transform/#same-source-and-key-are-equivalent","text":"1 2 3 4 5 6 7 8 9 val secondsWorker = millisWorker.transform { it.map { millis - millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = millisWorker.transform { it.map { millis - millis.toSeconds() } } assert(secondsWorker.doesSameWorkAs(otherSecondsWorker))","title":"Same source and key are equivalent"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/transform/#different-sources-are-not-equivalent","text":"1 2 3 4 5 6 7 val secondsWorker = millisWorker.transform { it.map { millis - millis / 1000 }.distinctUntilChanged() } val otherSecondsWorker = secondsWorker.transform { it } assert(!secondsWorker.doesSameWorkAs(otherSecondsWorker))","title":"Different sources are not equivalent"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/workflow-action/","text":"workflow-core / com.squareup.workflow / workflowAction workflowAction fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: String = \"\", block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . The returned object will include the string returned from name in its toString . Parameters name - A string describing the update for debugging. block - Function that defines the workflow update. fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: () - String , block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . The returned object will include the string returned from name in its toString . Parameters name - Function that returns a string describing the update for debugging. block - Function that defines the workflow update.","title":"Workflow action"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/workflow-action/#workflowaction","text":"fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: String = \"\", block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . The returned object will include the string returned from name in its toString .","title":"workflowAction"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/workflow-action/#parameters","text":"name - A string describing the update for debugging. block - Function that defines the workflow update. fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: () - String , block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied . The returned object will include the string returned from name in its toString .","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/workflow-action/#parameters_1","text":"name - Function that returns a string describing the update for debugging. block - Function that defines the workflow update.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/","text":"workflow-core / com.squareup.workflow / LifecycleWorker LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down. Constructors Name Summary init LifecycleWorker() Worker that performs some action when the worker is started and/or stopped. Functions Name Summary doesSameWorkAs open fun doesSameWorkAs(otherWorker: Worker * ): Boolean Equates LifecycleWorker s that have the same concrete class. onStarted open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. onStopped open fun onStopped(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. run fun run(): Flow Nothing Returns a Flow to execute the work represented by this worker. Extension Functions Name Summary transform fun T, R Worker T .transform(transform: (Flow T ) - Flow R ): Worker R Returns a Worker that transforms this Worker s Flow by calling transform .","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/#lifecycleworker","text":"abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down.","title":"LifecycleWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/#constructors","text":"Name Summary init LifecycleWorker() Worker that performs some action when the worker is started and/or stopped.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/#functions","text":"Name Summary doesSameWorkAs open fun doesSameWorkAs(otherWorker: Worker * ): Boolean Equates LifecycleWorker s that have the same concrete class. onStarted open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. onStopped open fun onStopped(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. run fun run(): Flow Nothing Returns a Flow to execute the work represented by this worker.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/#extension-functions","text":"Name Summary transform fun T, R Worker T .transform(transform: (Flow T ) - Flow R ): Worker R Returns a Worker that transforms this Worker s Flow by calling transform .","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/-init-/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / init init LifecycleWorker() Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down.","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/-init-/#init","text":"LifecycleWorker() Worker that performs some action when the worker is started and/or stopped. A Worker is stopped when its parent Workflow finishes a render pass without running the worker, or when the parent workflow is itself torn down.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/does-same-work-as/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / doesSameWorkAs doesSameWorkAs open fun doesSameWorkAs(otherWorker: Worker * ): Boolean Overrides Worker.doesSameWorkAs Equates LifecycleWorker s that have the same concrete class.","title":"Does same work as"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/does-same-work-as/#doessameworkas","text":"open fun doesSameWorkAs(otherWorker: Worker * ): Boolean Overrides Worker.doesSameWorkAs Equates LifecycleWorker s that have the same concrete class.","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/on-started/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / onStarted onStarted open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStopped , and it will always be called first. Invoked on the dispatcher running the workflow.","title":"On started"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/on-started/#onstarted","text":"open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStopped , and it will always be called first. Invoked on the dispatcher running the workflow.","title":"onStarted"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/on-stopped/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / onStopped onStopped open fun onStopped(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStarted , and it will always be called second. Invoked on the dispatcher running the workflow.","title":"On stopped"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/on-stopped/#onstopped","text":"open fun onStopped(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels (stops) this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStarted , and it will always be called second. Invoked on the dispatcher running the workflow.","title":"onStopped"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/run/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / run run fun run(): Flow Nothing Overrides Worker.run Returns a Flow to execute the work represented by this worker. The Flow is collected in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the coroutine in which this Flow is being collected will be cancelled.","title":"Run"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/run/#run","text":"fun run(): Flow Nothing Overrides Worker.run Returns a Flow to execute the work represented by this worker. The Flow is collected in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the coroutine in which this Flow is being collected will be cancelled.","title":"run"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/","text":"workflow-core / com.squareup.workflow / RenderContext RenderContext interface RenderContext StateT, in OutputT : Any Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. Handling Events See makeActionSink . Performing Asynchronous Work See runningWorker . Composing Children See renderChild . Functions Name Summary makeActionSink abstract fun A : WorkflowAction StateT , OutputT makeActionSink(): Sink A Creates a sink that will accept a single WorkflowAction of the given type. Invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null. renderChild abstract fun ChildPropsT, ChildOutputT : Any , ChildRenderingT renderChild(child: Workflow ChildPropsT , ChildOutputT , ChildRenderingT , props: ChildPropsT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method. runningWorker abstract fun T runningWorker(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). Extension Functions Name Summary makeEventSink fun EventT, StateT, OutputT : Any RenderContext StateT , OutputT .makeEventSink(block: WorkflowAction.Mutator StateT .( EventT ) - OutputT ?): Sink EventT Alternative to RenderContext.makeActionSink that allows externally defined event types to be mapped to anonymous WorkflowAction s. renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun PropsT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow PropsT , Nothing , ChildRenderingT , input: PropsT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output. runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#rendercontext","text":"interface RenderContext StateT, in OutputT : Any Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function.","title":"RenderContext"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#handling-events","text":"See makeActionSink .","title":"Handling Events"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#performing-asynchronous-work","text":"See runningWorker .","title":"Performing Asynchronous Work"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#composing-children","text":"See renderChild .","title":"Composing Children"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#functions","text":"Name Summary makeActionSink abstract fun A : WorkflowAction StateT , OutputT makeActionSink(): Sink A Creates a sink that will accept a single WorkflowAction of the given type. Invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null. renderChild abstract fun ChildPropsT, ChildOutputT : Any , ChildRenderingT renderChild(child: Workflow ChildPropsT , ChildOutputT , ChildRenderingT , props: ChildPropsT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method. runningWorker abstract fun T runningWorker(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered).","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#extension-functions","text":"Name Summary makeEventSink fun EventT, StateT, OutputT : Any RenderContext StateT , OutputT .makeEventSink(block: WorkflowAction.Mutator StateT .( EventT ) - OutputT ?): Sink EventT Alternative to RenderContext.makeActionSink that allows externally defined event types to be mapped to anonymous WorkflowAction s. renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun PropsT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow PropsT , Nothing , ChildRenderingT , input: PropsT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output. runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s.","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/make-action-sink/","text":"workflow-core / com.squareup.workflow / RenderContext / makeActionSink makeActionSink abstract fun A : WorkflowAction StateT , OutputT makeActionSink(): Sink A Creates a sink that will accept a single WorkflowAction of the given type. Invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null. Note that only a single action can be processed by the sink (or sinks) created during a render call. Redundant calls to Sink.send will result in exceptions being thrown.","title":"Make action sink"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/make-action-sink/#makeactionsink","text":"abstract fun A : WorkflowAction StateT , OutputT makeActionSink(): Sink A Creates a sink that will accept a single WorkflowAction of the given type. Invokes that action by calling WorkflowAction.apply to update the current state, and optionally emits the returned output value if it is non-null. Note that only a single action can be processed by the sink (or sinks) created during a render call. Redundant calls to Sink.send will result in exceptions being thrown.","title":"makeActionSink"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/render-child/","text":"workflow-core / com.squareup.workflow / RenderContext / renderChild renderChild abstract fun ChildPropsT, ChildOutputT : Any , ChildRenderingT renderChild(child: Workflow ChildPropsT , ChildOutputT , ChildRenderingT , props: ChildPropsT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method. Never call StatefulWorkflow.render or StatelessWorkflow.render directly, always do itthrough this context method. If the child wasn t already running, it will be started either from initialState or its snapshot. If the child was already running, The workflow s onInputChanged method is invoked with the previous input and this one. The child s render method is invoked with input and the child s state. After this method returns, if something happens that trigger s one of child s handlers, and that handler emits an output, the function passed as handler will be invoked with that output. Parameters key - An optional string key that is used to distinguish between workflows of the same type.","title":"Render child"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/render-child/#renderchild","text":"abstract fun ChildPropsT, ChildOutputT : Any , ChildRenderingT renderChild(child: Workflow ChildPropsT , ChildOutputT , ChildRenderingT , props: ChildPropsT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method. Never call StatefulWorkflow.render or StatelessWorkflow.render directly, always do itthrough this context method. If the child wasn t already running, it will be started either from initialState or its snapshot. If the child was already running, The workflow s onInputChanged method is invoked with the previous input and this one. The child s render method is invoked with input and the child s state. After this method returns, if something happens that trigger s one of child s handlers, and that handler emits an output, the function passed as handler will be invoked with that output.","title":"renderChild"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/render-child/#parameters","text":"key - An optional string key that is used to distinguish between workflows of the same type.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/running-worker/","text":"workflow-core / com.squareup.workflow / RenderContext / runningWorker runningWorker abstract fun T runningWorker(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). Parameters key - An optional string key that is used to distinguish between identical Worker s.","title":"Running worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/running-worker/#runningworker","text":"abstract fun T runningWorker(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered).","title":"runningWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/running-worker/#parameters","text":"key - An optional string key that is used to distinguish between identical Worker s.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-sink/","text":"workflow-core / com.squareup.workflow / Sink Sink interface Sink T An object that receives values (commonly events or WorkflowAction ). Use RenderContext.makeActionSink to create instances. Functions Name Summary send abstract fun send(value: T ): Unit Extension Functions Name Summary contraMap fun T1, T2 Sink T1 .contraMap(transform: ( T2 ) - T1 ): Sink T2 Generates a new sink of type T2 .","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-sink/#sink","text":"interface Sink T An object that receives values (commonly events or WorkflowAction ). Use RenderContext.makeActionSink to create instances.","title":"Sink"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-sink/#functions","text":"Name Summary send abstract fun send(value: T ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-sink/#extension-functions","text":"Name Summary contraMap fun T1, T2 Sink T1 .contraMap(transform: ( T2 ) - T1 ): Sink T2 Generates a new sink of type T2 .","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-sink/send/","text":"workflow-core / com.squareup.workflow / Sink / send send abstract fun send(value: T ): Unit","title":"Send"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-sink/send/#send","text":"abstract fun send(value: T ): Unit","title":"send"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/","text":"workflow-core / com.squareup.workflow / Snapshot Snapshot class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. Properties Name Summary bytes val bytes: ByteString Functions Name Summary equals fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . hashCode fun hashCode(): Int Calculates hashcode using bytes . toString fun toString(): String Returns a String describing the bytes of this Snapshot . Companion Object Properties Name Summary EMPTY val EMPTY: Snapshot Companion Object Functions Name Summary of fun of(string: String ): Snapshot fun of(byteString: ByteString): Snapshot fun of(lazy: () - ByteString): Snapshot fun of(integer: Int ): Snapshot write fun write(lazy: (BufferedSink) - Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#snapshot","text":"class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work.","title":"Snapshot"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#properties","text":"Name Summary bytes val bytes: ByteString","title":"Properties"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . hashCode fun hashCode(): Int Calculates hashcode using bytes . toString fun toString(): String Returns a String describing the bytes of this Snapshot .","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#companion-object-properties","text":"Name Summary EMPTY val EMPTY: Snapshot","title":"Companion Object Properties"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#companion-object-functions","text":"Name Summary of fun of(string: String ): Snapshot fun of(byteString: ByteString): Snapshot fun of(lazy: () - ByteString): Snapshot fun of(integer: Int ): Snapshot write fun write(lazy: (BufferedSink) - Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/-e-m-p-t-y/","text":"workflow-core / com.squareup.workflow / Snapshot / EMPTY EMPTY val EMPTY: Snapshot","title":" e m p t y"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/-e-m-p-t-y/#empty","text":"val EMPTY: Snapshot","title":"EMPTY"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/bytes/","text":"workflow-core / com.squareup.workflow / Snapshot / bytes bytes val bytes: ByteString","title":"Bytes"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/bytes/#bytes","text":"val bytes: ByteString","title":"bytes"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/equals/","text":"workflow-core / com.squareup.workflow / Snapshot / equals equals fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . This method forces serialization, calling it may be expensive.","title":"Equals"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/equals/#equals","text":"fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . This method forces serialization, calling it may be expensive.","title":"equals"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/hash-code/","text":"workflow-core / com.squareup.workflow / Snapshot / hashCode hashCode fun hashCode(): Int Calculates hashcode using bytes . This method forces serialization, calling it may be expensive.","title":"Hash code"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/hash-code/#hashcode","text":"fun hashCode(): Int Calculates hashcode using bytes . This method forces serialization, calling it may be expensive.","title":"hashCode"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/of/","text":"workflow-core / com.squareup.workflow / Snapshot / of of @JvmStatic fun of(string: String ): Snapshot @JvmStatic fun of(byteString: ByteString): Snapshot @JvmStatic fun of(lazy: () - ByteString): Snapshot @JvmStatic fun of(integer: Int ): Snapshot","title":"Of"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/of/#of","text":"@JvmStatic fun of(string: String ): Snapshot @JvmStatic fun of(byteString: ByteString): Snapshot @JvmStatic fun of(lazy: () - ByteString): Snapshot @JvmStatic fun of(integer: Int ): Snapshot","title":"of"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/to-string/","text":"workflow-core / com.squareup.workflow / Snapshot / toString toString fun toString(): String Returns a String describing the bytes of this Snapshot . This method forces serialization, calling it may be expensive.","title":"To string"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/to-string/#tostring","text":"fun toString(): String Returns a String describing the bytes of this Snapshot . This method forces serialization, calling it may be expensive.","title":"toString"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/write/","text":"workflow-core / com.squareup.workflow / Snapshot / write write @JvmStatic fun write(lazy: (BufferedSink) - Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"Write"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/write/#write","text":"@JvmStatic fun write(lazy: (BufferedSink) - Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"write"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow StatefulWorkflow abstract class StatefulWorkflow in PropsT, StateT, out OutputT : Any , out RenderingT : Workflow PropsT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree. Parameters PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow Constructors Name Summary init StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. Functions Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Satisfies the Workflow interface by returning this . initialState abstract fun initialState(props: PropsT , snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state. onPropsChanged open fun onPropsChanged(old: PropsT , new: PropsT , state: StateT ): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. render abstract fun render(props: PropsT , state: StateT , context: RenderContext StateT , OutputT ): RenderingT Called at least once\u2020 any time one of the following things happens: snapshotState abstract fun snapshotState(state: StateT ): Snapshot Called whenever the state changes to generate a new Snapshot of the state. Extension Functions Name Summary mapRendering fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , workflowAction fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: String = \"\", block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: () - String , block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#statefulworkflow","text":"abstract class StatefulWorkflow in PropsT, StateT, out OutputT : Any , out RenderingT : Workflow PropsT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree.","title":"StatefulWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#constructors","text":"Name Summary init StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#functions","text":"Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Satisfies the Workflow interface by returning this . initialState abstract fun initialState(props: PropsT , snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state. onPropsChanged open fun onPropsChanged(old: PropsT , new: PropsT , state: StateT ): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. render abstract fun render(props: PropsT , state: StateT , context: RenderContext StateT , OutputT ): RenderingT Called at least once\u2020 any time one of the following things happens: snapshotState abstract fun snapshotState(state: StateT ): Snapshot Called whenever the state changes to generate a new Snapshot of the state.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#extension-functions","text":"Name Summary mapRendering fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , workflowAction fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: String = \"\", block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT fun PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .workflowAction(name: () - String , block: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Convenience to create a WorkflowAction with parameter types matching those of the receiving StatefulWorkflow . The action will invoke the given lambda when it is applied .","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/-init-/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / init init StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree. Parameters PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/-init-/#init","text":"StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some props and return a rendering that serves as a public representation of its current state, and which can be used to update that state. A rendering typically serves as a view model, though this is not assumed, and is not the only use case. To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Props propagate down the tree, outputs and renderings propagate up the tree.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/-init-/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via props in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/as-stateful-workflow/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / asStatefulWorkflow asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Overrides Workflow.asStatefulWorkflow Satisfies the Workflow interface by returning this .","title":"As stateful workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/as-stateful-workflow/#asstatefulworkflow","text":"fun asStatefulWorkflow(): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Overrides Workflow.asStatefulWorkflow Satisfies the Workflow interface by returning this .","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/initial-state/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / initialState initialState abstract fun initialState(props: PropsT , snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state. Parameters snapshot - If the workflow is being created fresh, OR the workflow is being restored from an empty Snapshot , snapshot will be null. A snapshot is considered empty if Snapshot.bytes returns an empty ByteString , probably because snapshotState returned Snapshot.EMPTY . If the workflow is being restored from a Snapshot , snapshot will be the last value returned from snapshotState , and implementations that return something other than Snapshot.EMPTY should create their initial state by parsing their snapshot.","title":"Initial state"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/initial-state/#initialstate","text":"abstract fun initialState(props: PropsT , snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state.","title":"initialState"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/initial-state/#parameters","text":"snapshot - If the workflow is being created fresh, OR the workflow is being restored from an empty Snapshot , snapshot will be null. A snapshot is considered empty if Snapshot.bytes returns an empty ByteString , probably because snapshotState returned Snapshot.EMPTY . If the workflow is being restored from a Snapshot , snapshot will be the last value returned from snapshotState , and implementations that return something other than Snapshot.EMPTY should create their initial state by parsing their snapshot.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/on-props-changed/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / onPropsChanged onPropsChanged open fun onPropsChanged(old: PropsT , new: PropsT , state: StateT ): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. Default implementation does nothing.","title":"On props changed"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/on-props-changed/#onpropschanged","text":"open fun onPropsChanged(old: PropsT , new: PropsT , state: StateT ): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in props, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. Default implementation does nothing.","title":"onPropsChanged"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/render/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / render render abstract fun render(props: PropsT , state: StateT , context: RenderContext StateT , OutputT ): RenderingT Called at least once\u2020 any time one of the following things happens: This workflow s props changes (via the parent passing a different one in). This workflow s state changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To nest the rendering of a child workflow in your own, pass the child and any required props to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context . \u2020 This method is guaranteed to be called *at least once for every state, but may be calledmultiple times. Allowing this method to be invoked multiple times makes the internals simpler.*","title":"Render"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/render/#render","text":"abstract fun render(props: PropsT , state: StateT , context: RenderContext StateT , OutputT ): RenderingT Called at least once\u2020 any time one of the following things happens: This workflow s props changes (via the parent passing a different one in). This workflow s state changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To nest the rendering of a child workflow in your own, pass the child and any required props to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context . \u2020 This method is guaranteed to be called *at least once for every state, but may be calledmultiple times. Allowing this method to be invoked multiple times makes the internals simpler.*","title":"render"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/snapshot-state/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / snapshotState snapshotState abstract fun snapshotState(state: StateT ): Snapshot Called whenever the state changes to generate a new Snapshot of the state. Snapshots must be lazy. Serialization must not be done at the time this method is called, since the state will be snapshotted frequently but the serialized form may only be needed very rarely. If the workflow does not have any state, or should always be started from scratch, return Snapshot.EMPTY from this method. See Also initialState","title":"Snapshot state"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/snapshot-state/#snapshotstate","text":"abstract fun snapshotState(state: StateT ): Snapshot Called whenever the state changes to generate a new Snapshot of the state. Snapshots must be lazy. Serialization must not be done at the time this method is called, since the state will be snapshotted frequently but the serialized form may only be needed very rarely. If the workflow does not have any state, or should always be started from scratch, return Snapshot.EMPTY from this method. See Also initialState","title":"snapshotState"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/","text":"workflow-core / com.squareup.workflow / StatelessWorkflow StatelessWorkflow abstract class StatelessWorkflow PropsT, OutputT : Any , RenderingT : Workflow PropsT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own. Parameters PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow Constructors Name Summary init StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own. Functions Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow PropsT , *, OutputT , RenderingT Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. render abstract fun render(props: PropsT , context: RenderContext Nothing , OutputT ): RenderingT Called at least once any time one of the following things happens: Extension Functions Name Summary mapRendering fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#statelessworkflow","text":"abstract class StatelessWorkflow PropsT, OutputT : Any , RenderingT : Workflow PropsT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own.","title":"StatelessWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#constructors","text":"Name Summary init StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#functions","text":"Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow PropsT , *, OutputT , RenderingT Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. render abstract fun render(props: PropsT , context: RenderContext Nothing , OutputT ): RenderingT Called at least once any time one of the following things happens:","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#extension-functions","text":"Name Summary mapRendering fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/-init-/","text":"workflow-core / com.squareup.workflow / StatelessWorkflow / init init StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own. Parameters PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/-init-/#init","text":"StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/-init-/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/as-stateful-workflow/","text":"workflow-core / com.squareup.workflow / StatelessWorkflow / asStatefulWorkflow asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow PropsT , *, OutputT , RenderingT Overrides Workflow.asStatefulWorkflow Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. This method is called a few times per instance, but we don t need to allocate a new StatefulWorkflow every time, so we store it in a private property.","title":"As stateful workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/as-stateful-workflow/#asstatefulworkflow","text":"fun asStatefulWorkflow(): StatefulWorkflow PropsT , *, OutputT , RenderingT Overrides Workflow.asStatefulWorkflow Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. This method is called a few times per instance, but we don t need to allocate a new StatefulWorkflow every time, so we store it in a private property.","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/render/","text":"workflow-core / com.squareup.workflow / StatelessWorkflow / render render abstract fun render(props: PropsT , context: RenderContext Nothing , OutputT ): RenderingT Called at least once any time one of the following things happens: This workflow s props change (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To get the rendering from a child workflow, pass the child and any required props to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context .","title":"Render"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/render/#render","text":"abstract fun render(props: PropsT , context: RenderContext Nothing , OutputT ): RenderingT Called at least once any time one of the following things happens: This workflow s props change (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To get the rendering from a child workflow, pass the child and any required props to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context .","title":"render"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/","text":"workflow-core / com.squareup.workflow / VeryExperimentalWorkflow VeryExperimentalWorkflow annotation class VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you. Constructors Name Summary init VeryExperimentalWorkflow() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/#veryexperimentalworkflow","text":"annotation class VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"VeryExperimentalWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/#constructors","text":"Name Summary init VeryExperimentalWorkflow() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/-init-/","text":"workflow-core / com.squareup.workflow / VeryExperimentalWorkflow / init init VeryExperimentalWorkflow() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/-init-/#init","text":"VeryExperimentalWorkflow() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/","text":"workflow-core / com.squareup.workflow / Worker Worker interface Worker out OutputT Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Worker s are effectively Flow s that can be compared to determine equivalence. A Workflow uses Worker s to perform asynchronous work during the render pass by calling RenderContext.onWorkerOutput or RenderContext.runningWorker . When equivalent Worker s are passed in subsequent render passes, doesSameWorkAs is used to calculate which Worker s are new and should be started, and which ones are continuations from the last render pass and should be allowed to continue working. Worker s that are not included in a render pass are cancelled. Example: Network request Let s say you have a network service with an API that returns a number, and you want to call that service from a Workflow . 1 2 3 interface TimeService { suspend fun getTime(timezone: String): Long } The first step is to define a Worker that can call this service, and maybe an extension function on your service class: 1 2 3 4 5 6 7 8 9 10 11 12 fun TimeService.getTimeWorker(timezone: String): Worker Long = TimeWorker(timezone, this) private class TimeWorker( val timezone: String, val service: TimeService ): Worker Long { override fun run(): Flow Long = flow { val time = service.getTime(timezone) emit(time) } } You also need to define how to determine if a previous Worker is already doing the same work. This will ensure that if the same request is made by the same Workflow in adjacent render passes, we ll keep the request alive from the first pass. 1 2 3 override fun doesSameWorkAs(otherWorker: Worker * ): Boolean = otherWorker is TimeWorker timezone == otherWorker.timezone Now you can request the time from your Workflow : 1 2 3 4 class MyWorkflow(private val timeWorker: TimeWorker) { override fun render(\u2026): Foo { context.onWorkerOutput(timeWorker) { time - emitOutput( The time is $time ) } } Alternatively, if the response is a unique type, unlikely to be shared by any other workers, you don t even need to create your own Worker class, you can use a builder, and the worker will automatically be distinguished by that response type: 1 2 3 4 5 6 interface TimeService { fun getTime(timezone: String): Deferred TimeResponse } fun TimeService.getTimeWorker(timezone: String): Worker TimeResponse = Worker.from { getTime(timezone).await()) } See Also create from fromNullable Deferred.asWorker BroadcastChannel.asWorker Functions Name Summary doesSameWorkAs abstract fun doesSameWorkAs(otherWorker: Worker * ): Boolean Override this method to define equivalence between Worker s. run abstract fun run(): Flow OutputT Returns a Flow to execute the work represented by this worker. Companion Object Functions Name Summary create fun OutputT create(block: suspend FlowCollector OutputT .() - Unit ): Worker OutputT Shorthand for flow { block() }.asWorker(key) . createSideEffect fun createSideEffect(block: suspend () - Unit ): Worker Nothing Creates a Worker that just performs some side effects and doesn t emit anything. Run the worker from your render method using RenderContext.runningWorker . finished fun finished(): Worker Nothing Returns a Worker that finishes immediately without emitting anything. from fun OutputT from(block: suspend () - OutputT ): Worker OutputT Creates a Worker from a function that returns a single value. fromNullable fun OutputT : Any fromNullable(block: suspend () - OutputT ?): Worker OutputT Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. timer fun timer(delayMs: Long , key: String = \"\"): Worker Unit Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Extension Functions Name Summary transform fun T, R Worker T .transform(transform: (Flow T ) - Flow R ): Worker R Returns a Worker that transforms this Worker s Flow by calling transform . Inheritors Name Summary LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or stopped.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#worker","text":"interface Worker out OutputT Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Worker s are effectively Flow s that can be compared to determine equivalence. A Workflow uses Worker s to perform asynchronous work during the render pass by calling RenderContext.onWorkerOutput or RenderContext.runningWorker . When equivalent Worker s are passed in subsequent render passes, doesSameWorkAs is used to calculate which Worker s are new and should be started, and which ones are continuations from the last render pass and should be allowed to continue working. Worker s that are not included in a render pass are cancelled.","title":"Worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#example-network-request","text":"Let s say you have a network service with an API that returns a number, and you want to call that service from a Workflow . 1 2 3 interface TimeService { suspend fun getTime(timezone: String): Long } The first step is to define a Worker that can call this service, and maybe an extension function on your service class: 1 2 3 4 5 6 7 8 9 10 11 12 fun TimeService.getTimeWorker(timezone: String): Worker Long = TimeWorker(timezone, this) private class TimeWorker( val timezone: String, val service: TimeService ): Worker Long { override fun run(): Flow Long = flow { val time = service.getTime(timezone) emit(time) } } You also need to define how to determine if a previous Worker is already doing the same work. This will ensure that if the same request is made by the same Workflow in adjacent render passes, we ll keep the request alive from the first pass. 1 2 3 override fun doesSameWorkAs(otherWorker: Worker * ): Boolean = otherWorker is TimeWorker timezone == otherWorker.timezone Now you can request the time from your Workflow : 1 2 3 4 class MyWorkflow(private val timeWorker: TimeWorker) { override fun render(\u2026): Foo { context.onWorkerOutput(timeWorker) { time - emitOutput( The time is $time ) } } Alternatively, if the response is a unique type, unlikely to be shared by any other workers, you don t even need to create your own Worker class, you can use a builder, and the worker will automatically be distinguished by that response type: 1 2 3 4 5 6 interface TimeService { fun getTime(timezone: String): Deferred TimeResponse } fun TimeService.getTimeWorker(timezone: String): Worker TimeResponse = Worker.from { getTime(timezone).await()) } See Also create from fromNullable Deferred.asWorker BroadcastChannel.asWorker","title":"Example: Network request"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#functions","text":"Name Summary doesSameWorkAs abstract fun doesSameWorkAs(otherWorker: Worker * ): Boolean Override this method to define equivalence between Worker s. run abstract fun run(): Flow OutputT Returns a Flow to execute the work represented by this worker.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#companion-object-functions","text":"Name Summary create fun OutputT create(block: suspend FlowCollector OutputT .() - Unit ): Worker OutputT Shorthand for flow { block() }.asWorker(key) . createSideEffect fun createSideEffect(block: suspend () - Unit ): Worker Nothing Creates a Worker that just performs some side effects and doesn t emit anything. Run the worker from your render method using RenderContext.runningWorker . finished fun finished(): Worker Nothing Returns a Worker that finishes immediately without emitting anything. from fun OutputT from(block: suspend () - OutputT ): Worker OutputT Creates a Worker from a function that returns a single value. fromNullable fun OutputT : Any fromNullable(block: suspend () - OutputT ?): Worker OutputT Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. timer fun timer(delayMs: Long , key: String = \"\"): Worker Unit Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero.","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#extension-functions","text":"Name Summary transform fun T, R Worker T .transform(transform: (Flow T ) - Flow R ): Worker R Returns a Worker that transforms this Worker s Flow by calling transform .","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#inheritors","text":"Name Summary LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or stopped.","title":"Inheritors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/create-side-effect/","text":"workflow-core / com.squareup.workflow / Worker / createSideEffect createSideEffect fun createSideEffect(block: suspend () - Unit ): Worker Nothing Creates a Worker that just performs some side effects and doesn t emit anything. Run the worker from your render method using RenderContext.runningWorker . The returned Worker will equate to any other workers created with this function that have the same key. The key is required for this builder because there is no type information available to distinguish workers. E.g.: 1 2 3 fun logOnEntered(message: String) = Worker.createSideEffect() { println( Entered state: $message ) }","title":"Create side effect"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/create-side-effect/#createsideeffect","text":"fun createSideEffect(block: suspend () - Unit ): Worker Nothing Creates a Worker that just performs some side effects and doesn t emit anything. Run the worker from your render method using RenderContext.runningWorker . The returned Worker will equate to any other workers created with this function that have the same key. The key is required for this builder because there is no type information available to distinguish workers. E.g.: 1 2 3 fun logOnEntered(message: String) = Worker.createSideEffect() { println( Entered state: $message ) }","title":"createSideEffect"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/create/","text":"workflow-core / com.squareup.workflow / Worker / create create inline fun reified OutputT create(noinline block: suspend FlowCollector OutputT .() - Unit ): Worker OutputT Shorthand for flow { block() }.asWorker(key) . Note: If your worker just needs to perform side effects and doesn t need to emit anything, use createSideEffect instead (since Nothing can t be used as a reified type parameter).","title":"Create"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/create/#create","text":"inline fun reified OutputT create(noinline block: suspend FlowCollector OutputT .() - Unit ): Worker OutputT Shorthand for flow { block() }.asWorker(key) . Note: If your worker just needs to perform side effects and doesn t need to emit anything, use createSideEffect instead (since Nothing can t be used as a reified type parameter).","title":"create"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/does-same-work-as/","text":"workflow-core / com.squareup.workflow / Worker / doesSameWorkAs doesSameWorkAs abstract fun doesSameWorkAs(otherWorker: Worker * ): Boolean Override this method to define equivalence between Worker s. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data. Most implementations of this method will check for concrete type equality, and then match on constructor parameters. E.g: 1 2 3 4 5 6 class SearchWorker(private val query: String): Worker SearchResult { // run omitted for example. override fun doesSameWorkAs(otherWorker: Worker * ): Boolean = otherWorker is SearchWorker otherWorker.query == query }","title":"Does same work as"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/does-same-work-as/#doessameworkas","text":"abstract fun doesSameWorkAs(otherWorker: Worker * ): Boolean Override this method to define equivalence between Worker s. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data. Most implementations of this method will check for concrete type equality, and then match on constructor parameters. E.g: 1 2 3 4 5 6 class SearchWorker(private val query: String): Worker SearchResult { // run omitted for example. override fun doesSameWorkAs(otherWorker: Worker * ): Boolean = otherWorker is SearchWorker otherWorker.query == query }","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/finished/","text":"workflow-core / com.squareup.workflow / Worker / finished finished fun finished(): Worker Nothing Returns a Worker that finishes immediately without emitting anything.","title":"Finished"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/finished/#finished","text":"fun finished(): Worker Nothing Returns a Worker that finishes immediately without emitting anything.","title":"finished"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/from-nullable/","text":"workflow-core / com.squareup.workflow / Worker / fromNullable fromNullable inline fun reified OutputT : Any fromNullable(noinline block: suspend () - OutputT ?): Worker OutputT Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"From nullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/from-nullable/#fromnullable","text":"inline fun reified OutputT : Any fromNullable(noinline block: suspend () - OutputT ?): Worker OutputT Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"fromNullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/from/","text":"workflow-core / com.squareup.workflow / Worker / from from inline fun reified OutputT from(noinline block: suspend () - OutputT ): Worker OutputT Creates a Worker from a function that returns a single value. Shorthand for flow { emit(block()) }.asWorker(key) . The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"From"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/from/#from","text":"inline fun reified OutputT from(noinline block: suspend () - OutputT ): Worker OutputT Creates a Worker from a function that returns a single value. Shorthand for flow { emit(block()) }.asWorker(key) . The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"from"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/run/","text":"workflow-core / com.squareup.workflow / Worker / run run abstract fun run(): Flow OutputT Returns a Flow to execute the work represented by this worker. The Flow is collected in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the coroutine in which this Flow is being collected will be cancelled.","title":"Run"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/run/#run","text":"abstract fun run(): Flow OutputT Returns a Flow to execute the work represented by this worker. The Flow is collected in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the coroutine in which this Flow is being collected will be cancelled.","title":"run"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/timer/","text":"workflow-core / com.squareup.workflow / Worker / timer timer fun timer(delayMs: Long , key: String = \"\"): Worker Unit Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Workers returned by this function will be compared by key .","title":"Timer"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/timer/#timer","text":"fun timer(delayMs: Long , key: String = \"\"): Worker Unit Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Workers returned by this function will be compared by key .","title":"timer"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/","text":"workflow-core / com.squareup.workflow / Workflow Workflow interface Workflow in PropsT, out OutputT : Any , out RenderingT A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. The basic purpose of a Workflow is to take some input (in the form of PropsT ) and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Props propagates down the tree, outputs and renderings propagate up the tree. Implementing Workflow The Workflow interface is useful as a facade for your API. You can publish an interface that extends Workflow , and keep the implementation (e.g. is your workflow state*ful* or state*less* a private implementation detail. Stateful Workflows If your workflow needs to keep track of internal state, implement the StatefulWorkflow interface. That interface has an additional type parameter, StateT , and allows you to specify how to create the initial state and how to snapshot /restore your state. Stateless Workflows If your workflow simply needs to delegate to other workflows, maybe transforming propss, outputs, or renderings, extend StatelessWorkflow , or just pass a lambda to the stateless function below. Interacting with Events and Other Workflows All workflows are passed a RenderContext in their render methods. This context allows the workflow to interact with the outside world by doing things like listening for events, subscribing to streams of data, rendering child workflows, and performing cleanup when the workflow is about to be torn down by its parent. See the documentation on RenderContext for more information about what it can do. Parameters PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow StatelessWorkflow Functions Name Summary asStatefulWorkflow abstract fun asStatefulWorkflow(): StatefulWorkflow PropsT , *, OutputT , RenderingT Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work. Extension Functions Name Summary mapRendering fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , Companion Object Extension Functions Name Summary rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing. stateful fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( PropsT , Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot , onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( PropsT ) - StateT , render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given function. stateless fun PropsT, OutputT : Any , RenderingT Workflow.Companion.stateless(render: RenderContext Nothing , OutputT .(props: PropsT ) - RenderingT ): Workflow PropsT , OutputT , RenderingT Returns a stateless Workflow via the given render function. Inheritors Name Summary StatefulWorkflow abstract class StatefulWorkflow in PropsT, StateT, out OutputT : Any , out RenderingT : Workflow PropsT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow abstract class StatelessWorkflow PropsT, OutputT : Any , RenderingT : Workflow PropsT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#workflow","text":"interface Workflow in PropsT, out OutputT : Any , out RenderingT A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. The basic purpose of a Workflow is to take some input (in the form of PropsT ) and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Props propagates down the tree, outputs and renderings propagate up the tree.","title":"Workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#implementing-workflow","text":"The Workflow interface is useful as a facade for your API. You can publish an interface that extends Workflow , and keep the implementation (e.g. is your workflow state*ful* or state*less* a private implementation detail.","title":"Implementing Workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#stateful-workflows","text":"If your workflow needs to keep track of internal state, implement the StatefulWorkflow interface. That interface has an additional type parameter, StateT , and allows you to specify how to create the initial state and how to snapshot /restore your state.","title":"Stateful Workflows"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#stateless-workflows","text":"If your workflow simply needs to delegate to other workflows, maybe transforming propss, outputs, or renderings, extend StatelessWorkflow , or just pass a lambda to the stateless function below.","title":"Stateless Workflows"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#interacting-with-events-and-other-workflows","text":"All workflows are passed a RenderContext in their render methods. This context allows the workflow to interact with the outside world by doing things like listening for events, subscribing to streams of data, rendering child workflows, and performing cleanup when the workflow is about to be torn down by its parent. See the documentation on RenderContext for more information about what it can do.","title":"Interacting with Events and Other Workflows"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#parameters","text":"PropsT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any props data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s props, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow StatelessWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#functions","text":"Name Summary asStatefulWorkflow abstract fun asStatefulWorkflow(): StatefulWorkflow PropsT , *, OutputT , RenderingT Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#extension-functions","text":"Name Summary mapRendering fun PropsT, OutputT : Any , FromRenderingT, ToRenderingT Workflow PropsT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow PropsT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#companion-object-extension-functions","text":"Name Summary rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing. stateful fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( PropsT , Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot , onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT fun PropsT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( PropsT ) - StateT , render: RenderContext StateT , OutputT .(props: PropsT , state: StateT ) - RenderingT , onPropsChanged: (old: PropsT , new: PropsT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow PropsT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no props, implemented via the given function. stateless fun PropsT, OutputT : Any , RenderingT Workflow.Companion.stateless(render: RenderContext Nothing , OutputT .(props: PropsT ) - RenderingT ): Workflow PropsT , OutputT , RenderingT Returns a stateless Workflow via the given render function.","title":"Companion Object Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#inheritors","text":"Name Summary StatefulWorkflow abstract class StatefulWorkflow in PropsT, StateT, out OutputT : Any , out RenderingT : Workflow PropsT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow abstract class StatelessWorkflow PropsT, OutputT : Any , RenderingT : Workflow PropsT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own.","title":"Inheritors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/as-stateful-workflow/","text":"workflow-core / com.squareup.workflow / Workflow / asStatefulWorkflow asStatefulWorkflow abstract fun asStatefulWorkflow(): StatefulWorkflow PropsT , *, OutputT , RenderingT Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"As stateful workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/as-stateful-workflow/#asstatefulworkflow","text":"abstract fun asStatefulWorkflow(): StatefulWorkflow PropsT , *, OutputT , RenderingT Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/","text":"workflow-core / com.squareup.workflow / WorkflowAction WorkflowAction interface WorkflowAction StateT, out OutputT : Any A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output. Types Name Summary Mutator class Mutator S Functions Name Summary apply abstract fun WorkflowAction.Mutator StateT .apply(): OutputT ? Called with the current state of a workflow, allowing the state to be updated. Companion Object Functions Name Summary invoke operator fun StateT, OutputT : Any invoke(name: String = \"\", apply: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT operator fun StateT, OutputT : Any invoke(name: () - String , apply: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . noAction fun StateT, OutputT : Any noAction(): WorkflowAction StateT , OutputT Returns a WorkflowAction that does nothing: no output will be emitted, and render will be called again with the same state as last time. Extension Functions Name Summary applyTo fun StateT, OutputT : Any WorkflowAction StateT , OutputT .applyTo(state: StateT ): Pair StateT , OutputT ?","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/#workflowaction","text":"interface WorkflowAction StateT, out OutputT : Any A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output.","title":"WorkflowAction"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/#types","text":"Name Summary Mutator class Mutator S","title":"Types"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/#functions","text":"Name Summary apply abstract fun WorkflowAction.Mutator StateT .apply(): OutputT ? Called with the current state of a workflow, allowing the state to be updated.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/#companion-object-functions","text":"Name Summary invoke operator fun StateT, OutputT : Any invoke(name: String = \"\", apply: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT operator fun StateT, OutputT : Any invoke(name: () - String , apply: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . noAction fun StateT, OutputT : Any noAction(): WorkflowAction StateT , OutputT Returns a WorkflowAction that does nothing: no output will be emitted, and render will be called again with the same state as last time.","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/#extension-functions","text":"Name Summary applyTo fun StateT, OutputT : Any WorkflowAction StateT , OutputT .applyTo(state: StateT ): Pair StateT , OutputT ?","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/apply/","text":"workflow-core / com.squareup.workflow / WorkflowAction / apply apply abstract fun WorkflowAction.Mutator StateT .apply(): OutputT ? Called with the current state of a workflow, allowing the state to be updated. Return an output value for the workflow to emit, or null to emit nothing.","title":"Apply"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/apply/#apply","text":"abstract fun WorkflowAction.Mutator StateT .apply(): OutputT ? Called with the current state of a workflow, allowing the state to be updated. Return an output value for the workflow to emit, or null to emit nothing.","title":"apply"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/invoke/","text":"workflow-core / com.squareup.workflow / WorkflowAction / invoke invoke inline operator fun StateT, OutputT : Any invoke(name: String = \"\", crossinline apply: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types. Parameters name - A string describing the update for debugging. apply - Function that defines the workflow update. inline operator fun StateT, OutputT : Any invoke(crossinline name: () - String , crossinline apply: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types. Parameters name - Function that returns a string describing the update for debugging. apply - Function that defines the workflow update.","title":"Invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/invoke/#invoke","text":"inline operator fun StateT, OutputT : Any invoke(name: String = \"\", crossinline apply: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types.","title":"invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/invoke/#parameters","text":"name - A string describing the update for debugging. apply - Function that defines the workflow update. inline operator fun StateT, OutputT : Any invoke(crossinline name: () - String , crossinline apply: WorkflowAction.Mutator StateT .() - OutputT ?): WorkflowAction StateT , OutputT Creates a WorkflowAction from the apply lambda. The returned object will include the string returned from name in its toString . If defining actions within a StatefulWorkflow , use the StatefulWorkflow.workflowAction extension instead, to do this without being forced to repeat its parameter types.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/invoke/#parameters_1","text":"name - Function that returns a string describing the update for debugging. apply - Function that defines the workflow update.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/no-action/","text":"workflow-core / com.squareup.workflow / WorkflowAction / noAction noAction fun StateT, OutputT : Any noAction(): WorkflowAction StateT , OutputT Returns a WorkflowAction that does nothing: no output will be emitted, and render will be called again with the same state as last time. Use this to, for example, ignore the output of a child workflow or worker.","title":"No action"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/no-action/#noaction","text":"fun StateT, OutputT : Any noAction(): WorkflowAction StateT , OutputT Returns a WorkflowAction that does nothing: no output will be emitted, and render will be called again with the same state as last time. Use this to, for example, ignore the output of a child workflow or worker.","title":"noAction"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/-mutator/","text":"workflow-core / com.squareup.workflow / WorkflowAction / Mutator Mutator class Mutator S Constructors Name Summary init Mutator(state: S ) Properties Name Summary state var state: S","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/-mutator/#mutator","text":"class Mutator S","title":"Mutator"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/-mutator/#constructors","text":"Name Summary init Mutator(state: S )","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/-mutator/#properties","text":"Name Summary state var state: S","title":"Properties"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/-mutator/-init-/","text":"workflow-core / com.squareup.workflow / WorkflowAction / Mutator / init init Mutator(state: S )","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/-mutator/-init-/#init","text":"Mutator(state: S )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/-mutator/state/","text":"workflow-core / com.squareup.workflow / WorkflowAction / Mutator / state state var state: S","title":"State"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/-mutator/state/#state","text":"var state: S","title":"state"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.-deferred/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.Deferred Extensions for kotlinx.coroutines.Deferred Name Summary asWorker fun OutputT Deferred OutputT .asWorker(): Worker OutputT Returns a Worker that will await this Deferred and then emit it.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.-deferred/#extensions-for-kotlinxcoroutinesdeferred","text":"Name Summary asWorker fun OutputT Deferred OutputT .asWorker(): Worker OutputT Returns a Worker that will await this Deferred and then emit it.","title":"Extensions for kotlinx.coroutines.Deferred"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.-deferred/as-worker/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.Deferred / asWorker asWorker inline fun reified OutputT Deferred OutputT .asWorker(): Worker OutputT Returns a Worker that will await this Deferred and then emit it. Note that Deferred is a hot future type \u2013 calling a function that returns a Deferred multiple times will probably perform the action multiple times. You may want to use something like this instead: 1 Worker.from { doThing().await() }","title":"As worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.-deferred/as-worker/#asworker","text":"inline fun reified OutputT Deferred OutputT .asWorker(): Worker OutputT Returns a Worker that will await this Deferred and then emit it. Note that Deferred is a hot future type \u2013 calling a function that returns a Deferred multiple times will probably perform the action multiple times. You may want to use something like this instead: 1 Worker.from { doThing().await() }","title":"asWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-broadcast-channel/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.channels.BroadcastChannel Extensions for kotlinx.coroutines.channels.BroadcastChannel Name Summary asWorker fun OutputT BroadcastChannel OutputT .asWorker(): Worker OutputT Shorthand for .asFlow().asWorker(key) .","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-broadcast-channel/#extensions-for-kotlinxcoroutineschannelsbroadcastchannel","text":"Name Summary asWorker fun OutputT BroadcastChannel OutputT .asWorker(): Worker OutputT Shorthand for .asFlow().asWorker(key) .","title":"Extensions for kotlinx.coroutines.channels.BroadcastChannel"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-broadcast-channel/as-worker/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.channels.BroadcastChannel / asWorker asWorker @ExperimentalCoroutinesApi inline fun reified OutputT BroadcastChannel OutputT .asWorker(): Worker OutputT Shorthand for .asFlow().asWorker(key) .","title":"As worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-broadcast-channel/as-worker/#asworker","text":"@ExperimentalCoroutinesApi inline fun reified OutputT BroadcastChannel OutputT .asWorker(): Worker OutputT Shorthand for .asFlow().asWorker(key) .","title":"asWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.channels.ReceiveChannel Extensions for kotlinx.coroutines.channels.ReceiveChannel Name Summary asWorker fun OutputT ReceiveChannel OutputT .asWorker(closeOnCancel: Boolean = true): Worker OutputT Returns a Worker that will, when performed, emit whatever this channel receives.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/#extensions-for-kotlinxcoroutineschannelsreceivechannel","text":"Name Summary asWorker fun OutputT ReceiveChannel OutputT .asWorker(closeOnCancel: Boolean = true): Worker OutputT Returns a Worker that will, when performed, emit whatever this channel receives.","title":"Extensions for kotlinx.coroutines.channels.ReceiveChannel"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/as-worker/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.channels.ReceiveChannel / asWorker asWorker inline fun reified OutputT ReceiveChannel OutputT .asWorker(closeOnCancel: Boolean = true): Worker OutputT Returns a Worker that will, when performed, emit whatever this channel receives. Parameters closeOnCancel - If true: The channel will be cancelled when the Worker is cancelled \u2013 this is intended for use with cold channels that are were started by and are to be managed by this worker or its parent Workflow . If false: The channel will not be cancelled when the Worker is cancelled \u2013 this is intended for use with hot channels that are managed externally. True by default.","title":"As worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/as-worker/#asworker","text":"inline fun reified OutputT ReceiveChannel OutputT .asWorker(closeOnCancel: Boolean = true): Worker OutputT Returns a Worker that will, when performed, emit whatever this channel receives.","title":"asWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/as-worker/#parameters","text":"closeOnCancel - If true: The channel will be cancelled when the Worker is cancelled \u2013 this is intended for use with cold channels that are were started by and are to be managed by this worker or its parent Workflow . If false: The channel will not be cancelled when the Worker is cancelled \u2013 this is intended for use with hot channels that are managed externally. True by default.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.flow.-flow/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.flow.Flow Extensions for kotlinx.coroutines.flow.Flow Name Summary asWorker fun OutputT Flow OutputT .asWorker(): Worker OutputT Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.flow.-flow/#extensions-for-kotlinxcoroutinesflowflow","text":"Name Summary asWorker fun OutputT Flow OutputT .asWorker(): Worker OutputT Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"Extensions for kotlinx.coroutines.flow.Flow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.flow.-flow/as-worker/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.flow.Flow / asWorker asWorker inline fun reified OutputT Flow OutputT .asWorker(): Worker OutputT Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"As worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.flow.-flow/as-worker/#asworker","text":"inline fun reified OutputT Flow OutputT .asWorker(): Worker OutputT Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"asWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink Extensions for okio.BufferedSink Name Summary writeBooleanAsInt fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink writeByteStringWithLength fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink writeEnumByOrdinal fun T : Enum T BufferedSink.writeEnumByOrdinal(enumVal: T ): BufferedSink writeFloat fun BufferedSink.writeFloat(float: Float ): BufferedSink writeList fun T BufferedSink.writeList(values: List T , writer: BufferedSink.( T ) - Unit ): BufferedSink writeNullable fun T : Any BufferedSink.writeNullable(obj: T ?, writer: BufferedSink.( T ) - Unit ): BufferedSink writeOptionalEnumByOrdinal fun T : Enum T BufferedSink.writeOptionalEnumByOrdinal(enumVal: T ?): BufferedSink writeOptionalUtf8WithLength fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink writeUtf8WithLength fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/#extensions-for-okiobufferedsink","text":"Name Summary writeBooleanAsInt fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink writeByteStringWithLength fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink writeEnumByOrdinal fun T : Enum T BufferedSink.writeEnumByOrdinal(enumVal: T ): BufferedSink writeFloat fun BufferedSink.writeFloat(float: Float ): BufferedSink writeList fun T BufferedSink.writeList(values: List T , writer: BufferedSink.( T ) - Unit ): BufferedSink writeNullable fun T : Any BufferedSink.writeNullable(obj: T ?, writer: BufferedSink.( T ) - Unit ): BufferedSink writeOptionalEnumByOrdinal fun T : Enum T BufferedSink.writeOptionalEnumByOrdinal(enumVal: T ?): BufferedSink writeOptionalUtf8WithLength fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink writeUtf8WithLength fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"Extensions for okio.BufferedSink"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-boolean-as-int/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeBooleanAsInt writeBooleanAsInt fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink","title":"Write boolean as int"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-boolean-as-int/#writebooleanasint","text":"fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink","title":"writeBooleanAsInt"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-byte-string-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeByteStringWithLength writeByteStringWithLength fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink","title":"Write byte string with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-byte-string-with-length/#writebytestringwithlength","text":"fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink","title":"writeByteStringWithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-enum-by-ordinal/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeEnumByOrdinal writeEnumByOrdinal fun T : Enum T BufferedSink.writeEnumByOrdinal(enumVal: T ): BufferedSink","title":"Write enum by ordinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-enum-by-ordinal/#writeenumbyordinal","text":"fun T : Enum T BufferedSink.writeEnumByOrdinal(enumVal: T ): BufferedSink","title":"writeEnumByOrdinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-float/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeFloat writeFloat fun BufferedSink.writeFloat(float: Float ): BufferedSink","title":"Write float"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-float/#writefloat","text":"fun BufferedSink.writeFloat(float: Float ): BufferedSink","title":"writeFloat"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-list/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeList writeList inline fun T BufferedSink.writeList(values: List T , writer: BufferedSink.( T ) - Unit ): BufferedSink","title":"Write list"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-list/#writelist","text":"inline fun T BufferedSink.writeList(values: List T , writer: BufferedSink.( T ) - Unit ): BufferedSink","title":"writeList"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-nullable/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeNullable writeNullable fun T : Any BufferedSink.writeNullable(obj: T ?, writer: BufferedSink.( T ) - Unit ): BufferedSink","title":"Write nullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-nullable/#writenullable","text":"fun T : Any BufferedSink.writeNullable(obj: T ?, writer: BufferedSink.( T ) - Unit ): BufferedSink","title":"writeNullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-optional-enum-by-ordinal/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeOptionalEnumByOrdinal writeOptionalEnumByOrdinal fun T : Enum T BufferedSink.writeOptionalEnumByOrdinal(enumVal: T ?): BufferedSink","title":"Write optional enum by ordinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-optional-enum-by-ordinal/#writeoptionalenumbyordinal","text":"fun T : Enum T BufferedSink.writeOptionalEnumByOrdinal(enumVal: T ?): BufferedSink","title":"writeOptionalEnumByOrdinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-optional-utf8-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeOptionalUtf8WithLength writeOptionalUtf8WithLength fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink","title":"Write optional utf8 with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-optional-utf8-with-length/#writeoptionalutf8withlength","text":"fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink","title":"writeOptionalUtf8WithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-utf8-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeUtf8WithLength writeUtf8WithLength fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"Write utf8 with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-utf8-with-length/#writeutf8withlength","text":"fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"writeUtf8WithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource Extensions for okio.BufferedSource Name Summary readBooleanFromInt fun BufferedSource.readBooleanFromInt(): Boolean readByteStringWithLength fun BufferedSource.readByteStringWithLength(): ByteString readEnumByOrdinal fun T : Enum T BufferedSource.readEnumByOrdinal(): T readFloat fun BufferedSource.readFloat(): Float readList fun T BufferedSource.readList(reader: BufferedSource.() - T ): List T readNullable fun T : Any BufferedSource.readNullable(reader: BufferedSource.() - T ): T ? readOptionalEnumByOrdinal fun T : Enum T BufferedSource.readOptionalEnumByOrdinal(): T ? readOptionalUtf8WithLength fun BufferedSource.readOptionalUtf8WithLength(): String ? readUtf8WithLength fun BufferedSource.readUtf8WithLength(): String","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/#extensions-for-okiobufferedsource","text":"Name Summary readBooleanFromInt fun BufferedSource.readBooleanFromInt(): Boolean readByteStringWithLength fun BufferedSource.readByteStringWithLength(): ByteString readEnumByOrdinal fun T : Enum T BufferedSource.readEnumByOrdinal(): T readFloat fun BufferedSource.readFloat(): Float readList fun T BufferedSource.readList(reader: BufferedSource.() - T ): List T readNullable fun T : Any BufferedSource.readNullable(reader: BufferedSource.() - T ): T ? readOptionalEnumByOrdinal fun T : Enum T BufferedSource.readOptionalEnumByOrdinal(): T ? readOptionalUtf8WithLength fun BufferedSource.readOptionalUtf8WithLength(): String ? readUtf8WithLength fun BufferedSource.readUtf8WithLength(): String","title":"Extensions for okio.BufferedSource"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-boolean-from-int/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readBooleanFromInt readBooleanFromInt fun BufferedSource.readBooleanFromInt(): Boolean","title":"Read boolean from int"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-boolean-from-int/#readbooleanfromint","text":"fun BufferedSource.readBooleanFromInt(): Boolean","title":"readBooleanFromInt"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-byte-string-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readByteStringWithLength readByteStringWithLength fun BufferedSource.readByteStringWithLength(): ByteString","title":"Read byte string with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-byte-string-with-length/#readbytestringwithlength","text":"fun BufferedSource.readByteStringWithLength(): ByteString","title":"readByteStringWithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-enum-by-ordinal/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readEnumByOrdinal readEnumByOrdinal inline fun reified T : Enum T BufferedSource.readEnumByOrdinal(): T","title":"Read enum by ordinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-enum-by-ordinal/#readenumbyordinal","text":"inline fun reified T : Enum T BufferedSource.readEnumByOrdinal(): T","title":"readEnumByOrdinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-float/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readFloat readFloat fun BufferedSource.readFloat(): Float","title":"Read float"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-float/#readfloat","text":"fun BufferedSource.readFloat(): Float","title":"readFloat"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-list/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readList readList inline fun T BufferedSource.readList(reader: BufferedSource.() - T ): List T","title":"Read list"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-list/#readlist","text":"inline fun T BufferedSource.readList(reader: BufferedSource.() - T ): List T","title":"readList"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-nullable/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readNullable readNullable fun T : Any BufferedSource.readNullable(reader: BufferedSource.() - T ): T ?","title":"Read nullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-nullable/#readnullable","text":"fun T : Any BufferedSource.readNullable(reader: BufferedSource.() - T ): T ?","title":"readNullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-optional-enum-by-ordinal/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readOptionalEnumByOrdinal readOptionalEnumByOrdinal inline fun reified T : Enum T BufferedSource.readOptionalEnumByOrdinal(): T ?","title":"Read optional enum by ordinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-optional-enum-by-ordinal/#readoptionalenumbyordinal","text":"inline fun reified T : Enum T BufferedSource.readOptionalEnumByOrdinal(): T ?","title":"readOptionalEnumByOrdinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-optional-utf8-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readOptionalUtf8WithLength readOptionalUtf8WithLength fun BufferedSource.readOptionalUtf8WithLength(): String ?","title":"Read optional utf8 with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-optional-utf8-with-length/#readoptionalutf8withlength","text":"fun BufferedSource.readOptionalUtf8WithLength(): String ?","title":"readOptionalUtf8WithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-utf8-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readUtf8WithLength readUtf8WithLength fun BufferedSource.readUtf8WithLength(): String","title":"Read utf8 with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-utf8-with-length/#readutf8withlength","text":"fun BufferedSource.readUtf8WithLength(): String","title":"readUtf8WithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-byte-string/","text":"workflow-core / com.squareup.workflow / okio.ByteString Extensions for okio.ByteString Name Summary parse fun T ByteString.parse(block: (BufferedSource) - T ): T Runs block with a BufferedSource that will read from this ByteString .","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-byte-string/#extensions-for-okiobytestring","text":"Name Summary parse fun T ByteString.parse(block: (BufferedSource) - T ): T Runs block with a BufferedSource that will read from this ByteString .","title":"Extensions for okio.ByteString"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-byte-string/parse/","text":"workflow-core / com.squareup.workflow / okio.ByteString / parse parse inline fun T ByteString.parse(block: (BufferedSource) - T ): T Runs block with a BufferedSource that will read from this ByteString . Lets you do stuff like: 1 2 3 4 5 6 myBlob.parse { MyValueObject( name = it.readUtf8WithLength(), age = it.readInt() ) }","title":"Parse"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-byte-string/parse/#parse","text":"inline fun T ByteString.parse(block: (BufferedSource) - T ): T Runs block with a BufferedSource that will read from this ByteString . Lets you do stuff like: 1 2 3 4 5 6 myBlob.parse { MyValueObject( name = it.readUtf8WithLength(), age = it.readInt() ) }","title":"parse"},{"location":"kotlin/api/workflow-runtime/","text":"workflow-runtime Packages Name Summary com.squareup.workflow com.squareup.workflow.diagnostic com.squareup.workflow.testing Index All Types","title":"Home"},{"location":"kotlin/api/workflow-runtime/#packages","text":"Name Summary com.squareup.workflow com.squareup.workflow.diagnostic com.squareup.workflow.testing","title":"Packages"},{"location":"kotlin/api/workflow-runtime/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-runtime/alltypes/","text":"All Types Name Summary com.squareup.workflow.diagnostic.DebugSnapshotRecordingListener A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass. com.squareup.workflow.RenderingAndSnapshot Tuple of rendering and snapshot used by launchWorkflowIn . com.squareup.workflow.diagnostic.SimpleLoggingDiagnosticListener A WorkflowDiagnosticListener that just prints all events using println . com.squareup.workflow.diagnostic.WorkflowDiagnosticListener Receives diagnostic events from the workflow runtime when significant things happen, e.g. the runtime starts or stops, workflows and workers are started or stopped, and information about render passes and workflow actions. com.squareup.workflow.diagnostic.WorkflowHierarchyDebugSnapshot Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass. com.squareup.workflow.WorkflowSession A tuple of Flow s representing all the emissions from the workflow runtime. com.squareup.workflow.testing.WorkflowTestParams Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . com.squareup.workflow.diagnostic.WorkflowUpdateDebugInfo A description of a workflow update triggered by a Source (worker, event, etc).","title":"Home"},{"location":"kotlin/api/workflow-runtime/alltypes/#all-types","text":"Name Summary com.squareup.workflow.diagnostic.DebugSnapshotRecordingListener A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass. com.squareup.workflow.RenderingAndSnapshot Tuple of rendering and snapshot used by launchWorkflowIn . com.squareup.workflow.diagnostic.SimpleLoggingDiagnosticListener A WorkflowDiagnosticListener that just prints all events using println . com.squareup.workflow.diagnostic.WorkflowDiagnosticListener Receives diagnostic events from the workflow runtime when significant things happen, e.g. the runtime starts or stops, workflows and workers are started or stopped, and information about render passes and workflow actions. com.squareup.workflow.diagnostic.WorkflowHierarchyDebugSnapshot Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass. com.squareup.workflow.WorkflowSession A tuple of Flow s representing all the emissions from the workflow runtime. com.squareup.workflow.testing.WorkflowTestParams Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . com.squareup.workflow.diagnostic.WorkflowUpdateDebugInfo A description of a workflow update triggered by a Source (worker, event, etc).","title":"All Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/","text":"workflow-runtime / com.squareup.workflow Package com.squareup.workflow Types Name Summary RenderingAndSnapshot data class RenderingAndSnapshot out RenderingT Tuple of rendering and snapshot used by launchWorkflowIn . WorkflowSession class WorkflowSession out OutputT : Any , out RenderingT A tuple of Flow s representing all the emissions from the workflow runtime. Functions Name Summary launchWorkflowIn fun PropsT, OutputT : Any , RenderingT, RunnerT launchWorkflowIn(scope: CoroutineScope, workflow: Workflow PropsT , OutputT , RenderingT , props: Flow PropsT , initialSnapshot: Snapshot? = null, beforeStart: CoroutineScope.(session: WorkflowSession OutputT , RenderingT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialSnapshot and the first value emitted by props . Subsequent values emitted from props will be used to re-render the workflow.","title":"workflow-runtime"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/#package-comsquareupworkflow","text":"","title":"Package com.squareup.workflow"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/#types","text":"Name Summary RenderingAndSnapshot data class RenderingAndSnapshot out RenderingT Tuple of rendering and snapshot used by launchWorkflowIn . WorkflowSession class WorkflowSession out OutputT : Any , out RenderingT A tuple of Flow s representing all the emissions from the workflow runtime.","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/#functions","text":"Name Summary launchWorkflowIn fun PropsT, OutputT : Any , RenderingT, RunnerT launchWorkflowIn(scope: CoroutineScope, workflow: Workflow PropsT , OutputT , RenderingT , props: Flow PropsT , initialSnapshot: Snapshot? = null, beforeStart: CoroutineScope.(session: WorkflowSession OutputT , RenderingT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialSnapshot and the first value emitted by props . Subsequent values emitted from props will be used to re-render the workflow.","title":"Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/","text":"workflow-runtime / com.squareup.workflow / launchWorkflowIn launchWorkflowIn fun PropsT, OutputT : Any , RenderingT, RunnerT launchWorkflowIn(scope: CoroutineScope, workflow: Workflow PropsT , OutputT , RenderingT , props: Flow PropsT , initialSnapshot: Snapshot? = null, beforeStart: CoroutineScope.(session: WorkflowSession OutputT , RenderingT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialSnapshot and the first value emitted by props . Subsequent values emitted from props will be used to re-render the workflow. This is the primary low-level entry point into the workflow runtime. If you are writing an app, you should probably be using a higher-level entry point that will also let you define UI bindings for your renderings. Initialization Before starting the actual workflow runtime, this function will invoke beforeStart and pass it the Flow s of renderings, snapshots, and outputs, as well as a CoroutineScope that the runtime will be hosted in. The workflow runtime will not be started until after this function returns. This is to allow the output flow to start being collected before any outputs can actually be emitted. Collectors that start after beforeStart returns may not receive outputs that are emitted very quickly. The value returned by beforeStart will be returned from this function after the runtime is launched, handy for instantiating platform-specific runner objects. The CoroutineScope passed to beforeStart can be used to do more than just cancel the runtime \u2013 it can also be used to start coroutines that will run until the workflow is cancelled, typically to collect the rendering and output Flow s. Scoping The workflow runtime makes use of structured concurrency . The runtime is started in a specific CoroutineScope , which defines the context for the entire workflow tree \u2013 most importantly, the Job that governs the runtime s lifetime and exception reporting path, and the CoroutineDispatcher that decides on what threads to run workflow code. This function creates a child Job in scope and uses it as the parent for the workflow runtime, and as the job passed to the beforeStart function. This means that if beforeStart calls CoroutineScope.cancel , it will cancel the workflow runtime, but will not cancel the scope passed into this function. Parameters scope - The CoroutineScope in which to launch the workflow runtime. Any exceptions thrown in any workflows will be reported to this scope, and cancelling this scope will cancel the workflow runtime. The scope passed to beforeStart will be a child of this scope. workflow - The root workflow to start. props - Stream of input values for the root workflow. The first value emitted is passed to the root workflow s StatefulWorkflow.initialState , and subsequent emissions are passed as input updates to the root workflow. If this flow completes before emitting anything, the runtime will fail (report an exception up through scope ). If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. initialSnapshot - If not null, used to restore the workflow. beforeStart - Called exactly once with the flows for renderings/snapshots and outputs. It also gets a sub-scope of scope with a newly created child Job which defines the lifetime of the launched workflow tree. Cancelling that job ends the new workflow session. Note that if scope is already cancelled when this function is called, the receiver scope will also be cancelled, and the flows will complete immediately. Return The value returned by beforeStart .","title":"Launch workflow in"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/#launchworkflowin","text":"fun PropsT, OutputT : Any , RenderingT, RunnerT launchWorkflowIn(scope: CoroutineScope, workflow: Workflow PropsT , OutputT , RenderingT , props: Flow PropsT , initialSnapshot: Snapshot? = null, beforeStart: CoroutineScope.(session: WorkflowSession OutputT , RenderingT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialSnapshot and the first value emitted by props . Subsequent values emitted from props will be used to re-render the workflow. This is the primary low-level entry point into the workflow runtime. If you are writing an app, you should probably be using a higher-level entry point that will also let you define UI bindings for your renderings.","title":"launchWorkflowIn"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/#initialization","text":"Before starting the actual workflow runtime, this function will invoke beforeStart and pass it the Flow s of renderings, snapshots, and outputs, as well as a CoroutineScope that the runtime will be hosted in. The workflow runtime will not be started until after this function returns. This is to allow the output flow to start being collected before any outputs can actually be emitted. Collectors that start after beforeStart returns may not receive outputs that are emitted very quickly. The value returned by beforeStart will be returned from this function after the runtime is launched, handy for instantiating platform-specific runner objects. The CoroutineScope passed to beforeStart can be used to do more than just cancel the runtime \u2013 it can also be used to start coroutines that will run until the workflow is cancelled, typically to collect the rendering and output Flow s.","title":"Initialization"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/#scoping","text":"The workflow runtime makes use of structured concurrency . The runtime is started in a specific CoroutineScope , which defines the context for the entire workflow tree \u2013 most importantly, the Job that governs the runtime s lifetime and exception reporting path, and the CoroutineDispatcher that decides on what threads to run workflow code. This function creates a child Job in scope and uses it as the parent for the workflow runtime, and as the job passed to the beforeStart function. This means that if beforeStart calls CoroutineScope.cancel , it will cancel the workflow runtime, but will not cancel the scope passed into this function.","title":"Scoping"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/#parameters","text":"scope - The CoroutineScope in which to launch the workflow runtime. Any exceptions thrown in any workflows will be reported to this scope, and cancelling this scope will cancel the workflow runtime. The scope passed to beforeStart will be a child of this scope. workflow - The root workflow to start. props - Stream of input values for the root workflow. The first value emitted is passed to the root workflow s StatefulWorkflow.initialState , and subsequent emissions are passed as input updates to the root workflow. If this flow completes before emitting anything, the runtime will fail (report an exception up through scope ). If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. initialSnapshot - If not null, used to restore the workflow. beforeStart - Called exactly once with the flows for renderings/snapshots and outputs. It also gets a sub-scope of scope with a newly created child Job which defines the lifetime of the launched workflow tree. Cancelling that job ends the new workflow session. Note that if scope is already cancelled when this function is called, the receiver scope will also be cancelled, and the flows will complete immediately. Return The value returned by beforeStart .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/","text":"workflow-runtime / com.squareup.workflow / RenderingAndSnapshot RenderingAndSnapshot data class RenderingAndSnapshot out RenderingT Tuple of rendering and snapshot used by launchWorkflowIn . Constructors Name Summary init RenderingAndSnapshot(rendering: RenderingT , snapshot: Snapshot) Tuple of rendering and snapshot used by launchWorkflowIn . Properties Name Summary rendering val rendering: RenderingT snapshot val snapshot: Snapshot","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/#renderingandsnapshot","text":"data class RenderingAndSnapshot out RenderingT Tuple of rendering and snapshot used by launchWorkflowIn .","title":"RenderingAndSnapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/#constructors","text":"Name Summary init RenderingAndSnapshot(rendering: RenderingT , snapshot: Snapshot) Tuple of rendering and snapshot used by launchWorkflowIn .","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/#properties","text":"Name Summary rendering val rendering: RenderingT snapshot val snapshot: Snapshot","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/-init-/","text":"workflow-runtime / com.squareup.workflow / RenderingAndSnapshot / init init RenderingAndSnapshot(rendering: RenderingT , snapshot: Snapshot) Tuple of rendering and snapshot used by launchWorkflowIn .","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/-init-/#init","text":"RenderingAndSnapshot(rendering: RenderingT , snapshot: Snapshot) Tuple of rendering and snapshot used by launchWorkflowIn .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/rendering/","text":"workflow-runtime / com.squareup.workflow / RenderingAndSnapshot / rendering rendering val rendering: RenderingT","title":"Rendering"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/rendering/#rendering","text":"val rendering: RenderingT","title":"rendering"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/snapshot/","text":"workflow-runtime / com.squareup.workflow / RenderingAndSnapshot / snapshot snapshot val snapshot: Snapshot","title":"Snapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/snapshot/#snapshot","text":"val snapshot: Snapshot","title":"snapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/","text":"workflow-runtime / com.squareup.workflow / WorkflowSession WorkflowSession class WorkflowSession out OutputT : Any , out RenderingT A tuple of Flow s representing all the emissions from the workflow runtime. Passed to launchWorkflowIn s beforeStart function. Parameters diagnosticListener - Null by default. If set to a non-null value before beforeStart returns, that WorkflowDiagnosticListener will receive all diagnostic events from the runtime. Setting this property after beforeStart returns will have no effect. Constructors Name Summary init WorkflowSession(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT , diagnosticListener: WorkflowDiagnosticListener ? = null) A tuple of Flow s representing all the emissions from the workflow runtime. Properties Name Summary diagnosticListener var diagnosticListener: WorkflowDiagnosticListener ? Null by default. If set to a non-null value before beforeStart returns, that WorkflowDiagnosticListener will receive all diagnostic events from the runtime. Setting this property after beforeStart returns will have no effect. outputs val outputs: Flow OutputT renderingsAndSnapshots val renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/#workflowsession","text":"class WorkflowSession out OutputT : Any , out RenderingT A tuple of Flow s representing all the emissions from the workflow runtime. Passed to launchWorkflowIn s beforeStart function.","title":"WorkflowSession"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/#parameters","text":"diagnosticListener - Null by default. If set to a non-null value before beforeStart returns, that WorkflowDiagnosticListener will receive all diagnostic events from the runtime. Setting this property after beforeStart returns will have no effect.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/#constructors","text":"Name Summary init WorkflowSession(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT , diagnosticListener: WorkflowDiagnosticListener ? = null) A tuple of Flow s representing all the emissions from the workflow runtime.","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/#properties","text":"Name Summary diagnosticListener var diagnosticListener: WorkflowDiagnosticListener ? Null by default. If set to a non-null value before beforeStart returns, that WorkflowDiagnosticListener will receive all diagnostic events from the runtime. Setting this property after beforeStart returns will have no effect. outputs val outputs: Flow OutputT renderingsAndSnapshots val renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/-init-/","text":"workflow-runtime / com.squareup.workflow / WorkflowSession / init init WorkflowSession(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT , diagnosticListener: WorkflowDiagnosticListener ? = null) A tuple of Flow s representing all the emissions from the workflow runtime. Passed to launchWorkflowIn s beforeStart function. Parameters diagnosticListener - Null by default. If set to a non-null value before beforeStart returns, that WorkflowDiagnosticListener will receive all diagnostic events from the runtime. Setting this property after beforeStart returns will have no effect.","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/-init-/#init","text":"WorkflowSession(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT , diagnosticListener: WorkflowDiagnosticListener ? = null) A tuple of Flow s representing all the emissions from the workflow runtime. Passed to launchWorkflowIn s beforeStart function.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/-init-/#parameters","text":"diagnosticListener - Null by default. If set to a non-null value before beforeStart returns, that WorkflowDiagnosticListener will receive all diagnostic events from the runtime. Setting this property after beforeStart returns will have no effect.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/diagnostic-listener/","text":"workflow-runtime / com.squareup.workflow / WorkflowSession / diagnosticListener diagnosticListener var diagnosticListener: WorkflowDiagnosticListener ? Null by default. If set to a non-null value before beforeStart returns, that WorkflowDiagnosticListener will receive all diagnostic events from the runtime. Setting this property after beforeStart returns will have no effect.","title":"Diagnostic listener"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/diagnostic-listener/#diagnosticlistener","text":"var diagnosticListener: WorkflowDiagnosticListener ? Null by default. If set to a non-null value before beforeStart returns, that WorkflowDiagnosticListener will receive all diagnostic events from the runtime. Setting this property after beforeStart returns will have no effect.","title":"diagnosticListener"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/outputs/","text":"workflow-runtime / com.squareup.workflow / WorkflowSession / outputs outputs val outputs: Flow OutputT","title":"Outputs"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/outputs/#outputs","text":"val outputs: Flow OutputT","title":"outputs"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/renderings-and-snapshots/","text":"workflow-runtime / com.squareup.workflow / WorkflowSession / renderingsAndSnapshots renderingsAndSnapshots val renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT","title":"Renderings and snapshots"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-workflow-session/renderings-and-snapshots/#renderingsandsnapshots","text":"val renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT","title":"renderingsAndSnapshots"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/","text":"workflow-runtime / com.squareup.workflow.diagnostic Package com.squareup.workflow.diagnostic Types Name Summary DebugSnapshotRecordingListener class DebugSnapshotRecordingListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass. SimpleLoggingDiagnosticListener open class SimpleLoggingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that just prints all events using println . WorkflowDiagnosticListener interface WorkflowDiagnosticListener Receives diagnostic events from the workflow runtime when significant things happen, e.g. the runtime starts or stops, workflows and workers are started or stopped, and information about render passes and workflow actions. WorkflowHierarchyDebugSnapshot data class WorkflowHierarchyDebugSnapshot Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass. WorkflowUpdateDebugInfo data class WorkflowUpdateDebugInfo A description of a workflow update triggered by a Source (worker, event, etc). Functions Name Summary andThen fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next .","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/#package-comsquareupworkflowdiagnostic","text":"","title":"Package com.squareup.workflow.diagnostic"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/#types","text":"Name Summary DebugSnapshotRecordingListener class DebugSnapshotRecordingListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass. SimpleLoggingDiagnosticListener open class SimpleLoggingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that just prints all events using println . WorkflowDiagnosticListener interface WorkflowDiagnosticListener Receives diagnostic events from the workflow runtime when significant things happen, e.g. the runtime starts or stops, workflows and workers are started or stopped, and information about render passes and workflow actions. WorkflowHierarchyDebugSnapshot data class WorkflowHierarchyDebugSnapshot Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass. WorkflowUpdateDebugInfo data class WorkflowUpdateDebugInfo A description of a workflow update triggered by a Source (worker, event, etc).","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/#functions","text":"Name Summary andThen fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next .","title":"Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/and-then/","text":"workflow-runtime / com.squareup.workflow.diagnostic / andThen andThen fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next .","title":"And then"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/and-then/#andthen","text":"fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next .","title":"andThen"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener DebugSnapshotRecordingListener @VeryExperimentalWorkflow class DebugSnapshotRecordingListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass. Constructors Name Summary init DebugSnapshotRecordingListener(debugger: ( WorkflowHierarchyDebugSnapshot , WorkflowUpdateDebugInfo ?) - Unit ) A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass. Functions Name Summary onAfterRenderPass fun onAfterRenderPass(rendering: Any ?): Unit Called just after the workflow tree finishes rendering. onAfterWorkflowRendered fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Called just after an individual workflow s render method was called. onBeforeWorkflowRendered fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Called just before an individual workflow s render method is going to be called. onRuntimeStopped fun onRuntimeStopped(): Unit Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. onSinkReceived fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Called when a Sink has received an event. onWorkerOutput fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Called when a worker emits an output. onWorkerStarted fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Called when a workflow starts running a new worker. onWorkerStopped fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. onWorkflowAction fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. onWorkflowStarted fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Called when a particular workflow node is started at a particular point in the workflow tree. onWorkflowStopped fun onWorkflowStopped(workflowId: Long ): Unit Called when a particular workflow node is stopped at a particular point in the workflow tree. Inherited Functions Name Summary onAfterSnapshotPass open fun onAfterSnapshotPass(): Unit Called just after all the workflows snapshotState methods are called. onBeforeRenderPass open fun onBeforeRenderPass(props: Any ?): Unit Called just before the workflow tree is going to be rendered. onBeforeSnapshotPass open fun onBeforeSnapshotPass(): Unit Called just before all the workflows snapshotState methods are called. onPropsChanged open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Called after onPropsChanged returns. onRuntimeStarted open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Called when the runtime has started executing. Extension Functions Name Summary andThen fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next .","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/#debugsnapshotrecordinglistener","text":"@VeryExperimentalWorkflow class DebugSnapshotRecordingListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass.","title":"DebugSnapshotRecordingListener"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/#constructors","text":"Name Summary init DebugSnapshotRecordingListener(debugger: ( WorkflowHierarchyDebugSnapshot , WorkflowUpdateDebugInfo ?) - Unit ) A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass.","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/#functions","text":"Name Summary onAfterRenderPass fun onAfterRenderPass(rendering: Any ?): Unit Called just after the workflow tree finishes rendering. onAfterWorkflowRendered fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Called just after an individual workflow s render method was called. onBeforeWorkflowRendered fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Called just before an individual workflow s render method is going to be called. onRuntimeStopped fun onRuntimeStopped(): Unit Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. onSinkReceived fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Called when a Sink has received an event. onWorkerOutput fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Called when a worker emits an output. onWorkerStarted fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Called when a workflow starts running a new worker. onWorkerStopped fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. onWorkflowAction fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. onWorkflowStarted fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Called when a particular workflow node is started at a particular point in the workflow tree. onWorkflowStopped fun onWorkflowStopped(workflowId: Long ): Unit Called when a particular workflow node is stopped at a particular point in the workflow tree.","title":"Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/#inherited-functions","text":"Name Summary onAfterSnapshotPass open fun onAfterSnapshotPass(): Unit Called just after all the workflows snapshotState methods are called. onBeforeRenderPass open fun onBeforeRenderPass(props: Any ?): Unit Called just before the workflow tree is going to be rendered. onBeforeSnapshotPass open fun onBeforeSnapshotPass(): Unit Called just before all the workflows snapshotState methods are called. onPropsChanged open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Called after onPropsChanged returns. onRuntimeStarted open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Called when the runtime has started executing.","title":"Inherited Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/#extension-functions","text":"Name Summary andThen fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next .","title":"Extension Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / init init DebugSnapshotRecordingListener(debugger: ( WorkflowHierarchyDebugSnapshot , WorkflowUpdateDebugInfo ?) - Unit ) A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass.","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/-init-/#init","text":"DebugSnapshotRecordingListener(debugger: ( WorkflowHierarchyDebugSnapshot , WorkflowUpdateDebugInfo ?) - Unit ) A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-after-render-pass/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onAfterRenderPass onAfterRenderPass fun onAfterRenderPass(rendering: Any ?): Unit Overrides WorkflowDiagnosticListener.onAfterRenderPass Called just after the workflow tree finishes rendering. Corresponds to onBeforeRenderPass .","title":"On after render pass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-after-render-pass/#onafterrenderpass","text":"fun onAfterRenderPass(rendering: Any ?): Unit Overrides WorkflowDiagnosticListener.onAfterRenderPass Called just after the workflow tree finishes rendering. Corresponds to onBeforeRenderPass .","title":"onAfterRenderPass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-after-workflow-rendered/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onAfterWorkflowRendered onAfterWorkflowRendered fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Overrides WorkflowDiagnosticListener.onAfterWorkflowRendered Called just after an individual workflow s render method was called. Corresponds to onBeforeWorkflowRendered .","title":"On after workflow rendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-after-workflow-rendered/#onafterworkflowrendered","text":"fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Overrides WorkflowDiagnosticListener.onAfterWorkflowRendered Called just after an individual workflow s render method was called. Corresponds to onBeforeWorkflowRendered .","title":"onAfterWorkflowRendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-before-workflow-rendered/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onBeforeWorkflowRendered onBeforeWorkflowRendered fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Overrides WorkflowDiagnosticListener.onBeforeWorkflowRendered Called just before an individual workflow s render method is going to be called. Corresponds to onAfterWorkflowRendered .","title":"On before workflow rendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-before-workflow-rendered/#onbeforeworkflowrendered","text":"fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Overrides WorkflowDiagnosticListener.onBeforeWorkflowRendered Called just before an individual workflow s render method is going to be called. Corresponds to onAfterWorkflowRendered .","title":"onBeforeWorkflowRendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-runtime-stopped/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onRuntimeStopped onRuntimeStopped fun onRuntimeStopped(): Unit Overrides WorkflowDiagnosticListener.onRuntimeStopped Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. Corresponds to onRuntimeStarted .","title":"On runtime stopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-runtime-stopped/#onruntimestopped","text":"fun onRuntimeStopped(): Unit Overrides WorkflowDiagnosticListener.onRuntimeStopped Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. Corresponds to onRuntimeStarted .","title":"onRuntimeStopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-sink-received/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onSinkReceived onSinkReceived fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Overrides WorkflowDiagnosticListener.onSinkReceived Called when a Sink has received an event. onWorkflowAction will always be called after this. Parameters workflowId - The ID of the workflow that created the sink and will execute its corresponding WorkflowAction . action - The WorkflowAction that will be executed by workflowId .","title":"On sink received"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-sink-received/#onsinkreceived","text":"fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Overrides WorkflowDiagnosticListener.onSinkReceived Called when a Sink has received an event. onWorkflowAction will always be called after this.","title":"onSinkReceived"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-sink-received/#parameters","text":"workflowId - The ID of the workflow that created the sink and will execute its corresponding WorkflowAction . action - The WorkflowAction that will be executed by workflowId .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-worker-output/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onWorkerOutput onWorkerOutput fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Overrides WorkflowDiagnosticListener.onWorkerOutput Called when a worker emits an output. onWorkflowAction will always be called after this. Parameters workerId - The ID of the worker that emitted output . parentWorkflowId - The ID of the workflow that is running this worker and that will receive the output. output - The value that the worker output.","title":"On worker output"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-worker-output/#onworkeroutput","text":"fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Overrides WorkflowDiagnosticListener.onWorkerOutput Called when a worker emits an output. onWorkflowAction will always be called after this.","title":"onWorkerOutput"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-worker-output/#parameters","text":"workerId - The ID of the worker that emitted output . parentWorkflowId - The ID of the workflow that is running this worker and that will receive the output. output - The value that the worker output.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-worker-started/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onWorkerStarted onWorkerStarted fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Overrides WorkflowDiagnosticListener.onWorkerStarted Called when a workflow starts running a new worker. Corresponds to onWorkerStopped . Parameters workerId - An globally-unique ID that uniquely identifies the worker. parentWorkflowId - The ID of the workflow whose call to runningWorker caused this worker to start. key - The key passed to runningWorker by parentWorkflowId . description - A string description of the worker. Contains the worker s toString .","title":"On worker started"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-worker-started/#onworkerstarted","text":"fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Overrides WorkflowDiagnosticListener.onWorkerStarted Called when a workflow starts running a new worker. Corresponds to onWorkerStopped .","title":"onWorkerStarted"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-worker-started/#parameters","text":"workerId - An globally-unique ID that uniquely identifies the worker. parentWorkflowId - The ID of the workflow whose call to runningWorker caused this worker to start. key - The key passed to runningWorker by parentWorkflowId . description - A string description of the worker. Contains the worker s toString .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-worker-stopped/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onWorkerStopped onWorkerStopped fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Overrides WorkflowDiagnosticListener.onWorkerStopped Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. Corresponds to onWorkerStarted . Parameters workerId - The ID of the worker that stopped. parentWorkflowId - The ID of the workflow that was running this worker.","title":"On worker stopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-worker-stopped/#onworkerstopped","text":"fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Overrides WorkflowDiagnosticListener.onWorkerStopped Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. Corresponds to onWorkerStarted .","title":"onWorkerStopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-worker-stopped/#parameters","text":"workerId - The ID of the worker that stopped. parentWorkflowId - The ID of the workflow that was running this worker.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-workflow-action/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onWorkflowAction onWorkflowAction fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Overrides WorkflowDiagnosticListener.onWorkflowAction Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. Either onWorkerOutput or onSinkReceived will have been called before this. Parameters workflowId - The ID of the workflow that created this action . action - The WorkflowAction that was executed. oldState - The state of the workflow before executing action . newState - The state of the workflow after executing action . If the action doesn t set the state, this will be the same value as oldState . output - The output value returned from action .","title":"On workflow action"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-workflow-action/#onworkflowaction","text":"fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Overrides WorkflowDiagnosticListener.onWorkflowAction Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. Either onWorkerOutput or onSinkReceived will have been called before this.","title":"onWorkflowAction"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-workflow-action/#parameters","text":"workflowId - The ID of the workflow that created this action . action - The WorkflowAction that was executed. oldState - The state of the workflow before executing action . newState - The state of the workflow after executing action . If the action doesn t set the state, this will be the same value as oldState . output - The output value returned from action .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-workflow-started/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onWorkflowStarted onWorkflowStarted fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Overrides WorkflowDiagnosticListener.onWorkflowStarted Called when a particular workflow node is started at a particular point in the workflow tree. Corresponds to onWorkerStopped . Parameters workflowId - The ID of the workflow that just started. parentId - The ID of the workflow whose call to renderChild caused this workflow to start. workflowType - The fully-qualified name of this workflow s class. key - The key passed to renderChild by parentId when rendering this workflow. initialProps - The props passed to renderChild by parentId . initialState - The state returned from initialState . restoredFromSnapshot - True iff the snapshot parameter to initialState was non-null.","title":"On workflow started"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-workflow-started/#onworkflowstarted","text":"fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Overrides WorkflowDiagnosticListener.onWorkflowStarted Called when a particular workflow node is started at a particular point in the workflow tree. Corresponds to onWorkerStopped .","title":"onWorkflowStarted"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-workflow-started/#parameters","text":"workflowId - The ID of the workflow that just started. parentId - The ID of the workflow whose call to renderChild caused this workflow to start. workflowType - The fully-qualified name of this workflow s class. key - The key passed to renderChild by parentId when rendering this workflow. initialProps - The props passed to renderChild by parentId . initialState - The state returned from initialState . restoredFromSnapshot - True iff the snapshot parameter to initialState was non-null.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-workflow-stopped/","text":"workflow-runtime / com.squareup.workflow.diagnostic / DebugSnapshotRecordingListener / onWorkflowStopped onWorkflowStopped fun onWorkflowStopped(workflowId: Long ): Unit Overrides WorkflowDiagnosticListener.onWorkflowStopped Called when a particular workflow node is stopped at a particular point in the workflow tree. Corresponds to onWorkflowStarted . Parameters workflowId - The ID of the workflow that stopped.","title":"On workflow stopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-workflow-stopped/#onworkflowstopped","text":"fun onWorkflowStopped(workflowId: Long ): Unit Overrides WorkflowDiagnosticListener.onWorkflowStopped Called when a particular workflow node is stopped at a particular point in the workflow tree. Corresponds to onWorkflowStarted .","title":"onWorkflowStopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-debug-snapshot-recording-listener/on-workflow-stopped/#parameters","text":"workflowId - The ID of the workflow that stopped.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener SimpleLoggingDiagnosticListener open class SimpleLoggingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that just prints all events using println . Constructors Name Summary init SimpleLoggingDiagnosticListener() A WorkflowDiagnosticListener that just prints all events using println . Functions Name Summary onAfterRenderPass open fun onAfterRenderPass(rendering: Any ?): Unit Called just after the workflow tree finishes rendering. onAfterSnapshotPass open fun onAfterSnapshotPass(): Unit Called just after all the workflows snapshotState methods are called. onAfterWorkflowRendered open fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Called just after an individual workflow s render method was called. onBeforeRenderPass open fun onBeforeRenderPass(props: Any ?): Unit Called just before the workflow tree is going to be rendered. onBeforeSnapshotPass open fun onBeforeSnapshotPass(): Unit Called just before all the workflows snapshotState methods are called. onBeforeWorkflowRendered open fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Called just before an individual workflow s render method is going to be called. onPropsChanged open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Called after onPropsChanged returns. onRuntimeStarted open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Called when the runtime has started executing. onRuntimeStopped open fun onRuntimeStopped(): Unit Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. onSinkReceived open fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Called when a Sink has received an event. onWorkerOutput open fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Called when a worker emits an output. onWorkerStarted open fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Called when a workflow starts running a new worker. onWorkerStopped open fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. onWorkflowAction open fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. onWorkflowStarted open fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Called when a particular workflow node is started at a particular point in the workflow tree. onWorkflowStopped open fun onWorkflowStopped(workflowId: Long ): Unit Called when a particular workflow node is stopped at a particular point in the workflow tree. println open fun println(text: String ): Unit Called with descriptions of every event. Default implementation just calls kotlin.io.println . Extension Functions Name Summary andThen fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next .","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/#simpleloggingdiagnosticlistener","text":"open class SimpleLoggingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that just prints all events using println .","title":"SimpleLoggingDiagnosticListener"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/#constructors","text":"Name Summary init SimpleLoggingDiagnosticListener() A WorkflowDiagnosticListener that just prints all events using println .","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/#functions","text":"Name Summary onAfterRenderPass open fun onAfterRenderPass(rendering: Any ?): Unit Called just after the workflow tree finishes rendering. onAfterSnapshotPass open fun onAfterSnapshotPass(): Unit Called just after all the workflows snapshotState methods are called. onAfterWorkflowRendered open fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Called just after an individual workflow s render method was called. onBeforeRenderPass open fun onBeforeRenderPass(props: Any ?): Unit Called just before the workflow tree is going to be rendered. onBeforeSnapshotPass open fun onBeforeSnapshotPass(): Unit Called just before all the workflows snapshotState methods are called. onBeforeWorkflowRendered open fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Called just before an individual workflow s render method is going to be called. onPropsChanged open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Called after onPropsChanged returns. onRuntimeStarted open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Called when the runtime has started executing. onRuntimeStopped open fun onRuntimeStopped(): Unit Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. onSinkReceived open fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Called when a Sink has received an event. onWorkerOutput open fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Called when a worker emits an output. onWorkerStarted open fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Called when a workflow starts running a new worker. onWorkerStopped open fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. onWorkflowAction open fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. onWorkflowStarted open fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Called when a particular workflow node is started at a particular point in the workflow tree. onWorkflowStopped open fun onWorkflowStopped(workflowId: Long ): Unit Called when a particular workflow node is stopped at a particular point in the workflow tree. println open fun println(text: String ): Unit Called with descriptions of every event. Default implementation just calls kotlin.io.println .","title":"Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/#extension-functions","text":"Name Summary andThen fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next .","title":"Extension Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / init init SimpleLoggingDiagnosticListener() A WorkflowDiagnosticListener that just prints all events using println .","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/-init-/#init","text":"SimpleLoggingDiagnosticListener() A WorkflowDiagnosticListener that just prints all events using println .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-after-render-pass/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onAfterRenderPass onAfterRenderPass open fun onAfterRenderPass(rendering: Any ?): Unit Overrides WorkflowDiagnosticListener.onAfterRenderPass Called just after the workflow tree finishes rendering. Corresponds to onBeforeRenderPass .","title":"On after render pass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-after-render-pass/#onafterrenderpass","text":"open fun onAfterRenderPass(rendering: Any ?): Unit Overrides WorkflowDiagnosticListener.onAfterRenderPass Called just after the workflow tree finishes rendering. Corresponds to onBeforeRenderPass .","title":"onAfterRenderPass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-after-snapshot-pass/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onAfterSnapshotPass onAfterSnapshotPass open fun onAfterSnapshotPass(): Unit Overrides WorkflowDiagnosticListener.onAfterSnapshotPass Called just after all the workflows snapshotState methods are called. Corresponds to onBeforeSnapshotPass .","title":"On after snapshot pass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-after-snapshot-pass/#onaftersnapshotpass","text":"open fun onAfterSnapshotPass(): Unit Overrides WorkflowDiagnosticListener.onAfterSnapshotPass Called just after all the workflows snapshotState methods are called. Corresponds to onBeforeSnapshotPass .","title":"onAfterSnapshotPass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-after-workflow-rendered/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onAfterWorkflowRendered onAfterWorkflowRendered open fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Overrides WorkflowDiagnosticListener.onAfterWorkflowRendered Called just after an individual workflow s render method was called. Corresponds to onBeforeWorkflowRendered .","title":"On after workflow rendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-after-workflow-rendered/#onafterworkflowrendered","text":"open fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Overrides WorkflowDiagnosticListener.onAfterWorkflowRendered Called just after an individual workflow s render method was called. Corresponds to onBeforeWorkflowRendered .","title":"onAfterWorkflowRendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-before-render-pass/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onBeforeRenderPass onBeforeRenderPass open fun onBeforeRenderPass(props: Any ?): Unit Overrides WorkflowDiagnosticListener.onBeforeRenderPass Called just before the workflow tree is going to be rendered. Corresponds to onAfterRenderPass .","title":"On before render pass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-before-render-pass/#onbeforerenderpass","text":"open fun onBeforeRenderPass(props: Any ?): Unit Overrides WorkflowDiagnosticListener.onBeforeRenderPass Called just before the workflow tree is going to be rendered. Corresponds to onAfterRenderPass .","title":"onBeforeRenderPass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-before-snapshot-pass/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onBeforeSnapshotPass onBeforeSnapshotPass open fun onBeforeSnapshotPass(): Unit Overrides WorkflowDiagnosticListener.onBeforeSnapshotPass Called just before all the workflows snapshotState methods are called. Corresponds to onAfterSnapshotPass .","title":"On before snapshot pass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-before-snapshot-pass/#onbeforesnapshotpass","text":"open fun onBeforeSnapshotPass(): Unit Overrides WorkflowDiagnosticListener.onBeforeSnapshotPass Called just before all the workflows snapshotState methods are called. Corresponds to onAfterSnapshotPass .","title":"onBeforeSnapshotPass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-before-workflow-rendered/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onBeforeWorkflowRendered onBeforeWorkflowRendered open fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Overrides WorkflowDiagnosticListener.onBeforeWorkflowRendered Called just before an individual workflow s render method is going to be called. Corresponds to onAfterWorkflowRendered .","title":"On before workflow rendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-before-workflow-rendered/#onbeforeworkflowrendered","text":"open fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Overrides WorkflowDiagnosticListener.onBeforeWorkflowRendered Called just before an individual workflow s render method is going to be called. Corresponds to onAfterWorkflowRendered .","title":"onBeforeWorkflowRendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-props-changed/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onPropsChanged onPropsChanged open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Overrides WorkflowDiagnosticListener.onPropsChanged Called after onPropsChanged returns. Parameters workflowId - The ID of the workflow for this event. If null, the props for the root workflow changed. oldState and newState will always be null in that case.","title":"On props changed"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-props-changed/#onpropschanged","text":"open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Overrides WorkflowDiagnosticListener.onPropsChanged Called after onPropsChanged returns.","title":"onPropsChanged"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-props-changed/#parameters","text":"workflowId - The ID of the workflow for this event. If null, the props for the root workflow changed. oldState and newState will always be null in that case.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-runtime-started/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onRuntimeStarted onRuntimeStarted open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Overrides WorkflowDiagnosticListener.onRuntimeStarted Called when the runtime has started executing. No other methods will be called on this interface before this returns. Corresponds to onRuntimeStopped .","title":"On runtime started"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-runtime-started/#onruntimestarted","text":"open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Overrides WorkflowDiagnosticListener.onRuntimeStarted Called when the runtime has started executing. No other methods will be called on this interface before this returns. Corresponds to onRuntimeStopped .","title":"onRuntimeStarted"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-runtime-stopped/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onRuntimeStopped onRuntimeStopped open fun onRuntimeStopped(): Unit Overrides WorkflowDiagnosticListener.onRuntimeStopped Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. Corresponds to onRuntimeStarted .","title":"On runtime stopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-runtime-stopped/#onruntimestopped","text":"open fun onRuntimeStopped(): Unit Overrides WorkflowDiagnosticListener.onRuntimeStopped Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. Corresponds to onRuntimeStarted .","title":"onRuntimeStopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-sink-received/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onSinkReceived onSinkReceived open fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Overrides WorkflowDiagnosticListener.onSinkReceived Called when a Sink has received an event. onWorkflowAction will always be called after this. Parameters workflowId - The ID of the workflow that created the sink and will execute its corresponding WorkflowAction . action - The WorkflowAction that will be executed by workflowId .","title":"On sink received"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-sink-received/#onsinkreceived","text":"open fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Overrides WorkflowDiagnosticListener.onSinkReceived Called when a Sink has received an event. onWorkflowAction will always be called after this.","title":"onSinkReceived"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-sink-received/#parameters","text":"workflowId - The ID of the workflow that created the sink and will execute its corresponding WorkflowAction . action - The WorkflowAction that will be executed by workflowId .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-worker-output/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onWorkerOutput onWorkerOutput open fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Overrides WorkflowDiagnosticListener.onWorkerOutput Called when a worker emits an output. onWorkflowAction will always be called after this. Parameters workerId - The ID of the worker that emitted output . parentWorkflowId - The ID of the workflow that is running this worker and that will receive the output. output - The value that the worker output.","title":"On worker output"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-worker-output/#onworkeroutput","text":"open fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Overrides WorkflowDiagnosticListener.onWorkerOutput Called when a worker emits an output. onWorkflowAction will always be called after this.","title":"onWorkerOutput"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-worker-output/#parameters","text":"workerId - The ID of the worker that emitted output . parentWorkflowId - The ID of the workflow that is running this worker and that will receive the output. output - The value that the worker output.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-worker-started/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onWorkerStarted onWorkerStarted open fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Overrides WorkflowDiagnosticListener.onWorkerStarted Called when a workflow starts running a new worker. Corresponds to onWorkerStopped . Parameters workerId - An globally-unique ID that uniquely identifies the worker. parentWorkflowId - The ID of the workflow whose call to runningWorker caused this worker to start. key - The key passed to runningWorker by parentWorkflowId . description - A string description of the worker. Contains the worker s toString .","title":"On worker started"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-worker-started/#onworkerstarted","text":"open fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Overrides WorkflowDiagnosticListener.onWorkerStarted Called when a workflow starts running a new worker. Corresponds to onWorkerStopped .","title":"onWorkerStarted"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-worker-started/#parameters","text":"workerId - An globally-unique ID that uniquely identifies the worker. parentWorkflowId - The ID of the workflow whose call to runningWorker caused this worker to start. key - The key passed to runningWorker by parentWorkflowId . description - A string description of the worker. Contains the worker s toString .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-worker-stopped/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onWorkerStopped onWorkerStopped open fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Overrides WorkflowDiagnosticListener.onWorkerStopped Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. Corresponds to onWorkerStarted . Parameters workerId - The ID of the worker that stopped. parentWorkflowId - The ID of the workflow that was running this worker.","title":"On worker stopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-worker-stopped/#onworkerstopped","text":"open fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Overrides WorkflowDiagnosticListener.onWorkerStopped Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. Corresponds to onWorkerStarted .","title":"onWorkerStopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-worker-stopped/#parameters","text":"workerId - The ID of the worker that stopped. parentWorkflowId - The ID of the workflow that was running this worker.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-workflow-action/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onWorkflowAction onWorkflowAction open fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Overrides WorkflowDiagnosticListener.onWorkflowAction Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. Either onWorkerOutput or onSinkReceived will have been called before this. Parameters workflowId - The ID of the workflow that created this action . action - The WorkflowAction that was executed. oldState - The state of the workflow before executing action . newState - The state of the workflow after executing action . If the action doesn t set the state, this will be the same value as oldState . output - The output value returned from action .","title":"On workflow action"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-workflow-action/#onworkflowaction","text":"open fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Overrides WorkflowDiagnosticListener.onWorkflowAction Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. Either onWorkerOutput or onSinkReceived will have been called before this.","title":"onWorkflowAction"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-workflow-action/#parameters","text":"workflowId - The ID of the workflow that created this action . action - The WorkflowAction that was executed. oldState - The state of the workflow before executing action . newState - The state of the workflow after executing action . If the action doesn t set the state, this will be the same value as oldState . output - The output value returned from action .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-workflow-started/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onWorkflowStarted onWorkflowStarted open fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Overrides WorkflowDiagnosticListener.onWorkflowStarted Called when a particular workflow node is started at a particular point in the workflow tree. Corresponds to onWorkerStopped . Parameters workflowId - The ID of the workflow that just started. parentId - The ID of the workflow whose call to renderChild caused this workflow to start. workflowType - The fully-qualified name of this workflow s class. key - The key passed to renderChild by parentId when rendering this workflow. initialProps - The props passed to renderChild by parentId . initialState - The state returned from initialState . restoredFromSnapshot - True iff the snapshot parameter to initialState was non-null.","title":"On workflow started"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-workflow-started/#onworkflowstarted","text":"open fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Overrides WorkflowDiagnosticListener.onWorkflowStarted Called when a particular workflow node is started at a particular point in the workflow tree. Corresponds to onWorkerStopped .","title":"onWorkflowStarted"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-workflow-started/#parameters","text":"workflowId - The ID of the workflow that just started. parentId - The ID of the workflow whose call to renderChild caused this workflow to start. workflowType - The fully-qualified name of this workflow s class. key - The key passed to renderChild by parentId when rendering this workflow. initialProps - The props passed to renderChild by parentId . initialState - The state returned from initialState . restoredFromSnapshot - True iff the snapshot parameter to initialState was non-null.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-workflow-stopped/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / onWorkflowStopped onWorkflowStopped open fun onWorkflowStopped(workflowId: Long ): Unit Overrides WorkflowDiagnosticListener.onWorkflowStopped Called when a particular workflow node is stopped at a particular point in the workflow tree. Corresponds to onWorkflowStarted . Parameters workflowId - The ID of the workflow that stopped.","title":"On workflow stopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-workflow-stopped/#onworkflowstopped","text":"open fun onWorkflowStopped(workflowId: Long ): Unit Overrides WorkflowDiagnosticListener.onWorkflowStopped Called when a particular workflow node is stopped at a particular point in the workflow tree. Corresponds to onWorkflowStarted .","title":"onWorkflowStopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/on-workflow-stopped/#parameters","text":"workflowId - The ID of the workflow that stopped.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/println/","text":"workflow-runtime / com.squareup.workflow.diagnostic / SimpleLoggingDiagnosticListener / println println protected open fun println(text: String ): Unit Called with descriptions of every event. Default implementation just calls kotlin.io.println .","title":"Println"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-simple-logging-diagnostic-listener/println/#println","text":"protected open fun println(text: String ): Unit Called with descriptions of every event. Default implementation just calls kotlin.io.println .","title":"println"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener WorkflowDiagnosticListener interface WorkflowDiagnosticListener Receives diagnostic events from the workflow runtime when significant things happen, e.g. the runtime starts or stops, workflows and workers are started or stopped, and information about render passes and workflow actions. To register a listener with the runtime, set WorkflowSession.diagnosticListener in the beforeStart function passed to launchWorkflowIn . Multiple listeners can be composed using the andThen function. No guarantees are made about what threads methods are invoked on. Implementations should take care to be thread-safe. Sequence of Events Events received by this interface occur in a well-defined order. onRuntimeStarted onBeforeRenderPass onBeforeWorkflowRendered Also called for each child workflow, recursively. Child start are emitted before the render method returns. onWorkflowStarted onWorkerStarted onAfterWorkflowRendered Child stop events are emitted after the render method returns. onWorkflowStopped onWorkerStopped onAfterRenderPass onBeforeSnapshotPass onAfterSnapshotPass Either: onSinkReceived onWorkerOutput onWorkflowAction Back to onBeforeRenderPass . onRuntimeStopped Detekt Configuration If you re using Detekt, you may need to suppress some warnings when implementing this interface. Add @Suppress(\"TooManyFunctions\") to your class. Add @Suppress(\"LongParameterList\") to onWorkflowStarted if you override it. Functions Name Summary onAfterRenderPass open fun onAfterRenderPass(rendering: Any ?): Unit Called just after the workflow tree finishes rendering. onAfterSnapshotPass open fun onAfterSnapshotPass(): Unit Called just after all the workflows snapshotState methods are called. onAfterWorkflowRendered open fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Called just after an individual workflow s render method was called. onBeforeRenderPass open fun onBeforeRenderPass(props: Any ?): Unit Called just before the workflow tree is going to be rendered. onBeforeSnapshotPass open fun onBeforeSnapshotPass(): Unit Called just before all the workflows snapshotState methods are called. onBeforeWorkflowRendered open fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Called just before an individual workflow s render method is going to be called. onPropsChanged open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Called after onPropsChanged returns. onRuntimeStarted open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Called when the runtime has started executing. onRuntimeStopped open fun onRuntimeStopped(): Unit Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. onSinkReceived open fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Called when a Sink has received an event. onWorkerOutput open fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Called when a worker emits an output. onWorkerStarted open fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Called when a workflow starts running a new worker. onWorkerStopped open fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. onWorkflowAction open fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. onWorkflowStarted open fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Called when a particular workflow node is started at a particular point in the workflow tree. onWorkflowStopped open fun onWorkflowStopped(workflowId: Long ): Unit Called when a particular workflow node is stopped at a particular point in the workflow tree. Extension Functions Name Summary andThen fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next . Inheritors Name Summary DebugSnapshotRecordingListener class DebugSnapshotRecordingListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass. SimpleLoggingDiagnosticListener open class SimpleLoggingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that just prints all events using println .","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/#workflowdiagnosticlistener","text":"interface WorkflowDiagnosticListener Receives diagnostic events from the workflow runtime when significant things happen, e.g. the runtime starts or stops, workflows and workers are started or stopped, and information about render passes and workflow actions. To register a listener with the runtime, set WorkflowSession.diagnosticListener in the beforeStart function passed to launchWorkflowIn . Multiple listeners can be composed using the andThen function. No guarantees are made about what threads methods are invoked on. Implementations should take care to be thread-safe.","title":"WorkflowDiagnosticListener"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/#sequence-of-events","text":"Events received by this interface occur in a well-defined order. onRuntimeStarted onBeforeRenderPass onBeforeWorkflowRendered Also called for each child workflow, recursively. Child start are emitted before the render method returns. onWorkflowStarted onWorkerStarted onAfterWorkflowRendered Child stop events are emitted after the render method returns. onWorkflowStopped onWorkerStopped onAfterRenderPass onBeforeSnapshotPass onAfterSnapshotPass Either: onSinkReceived onWorkerOutput onWorkflowAction Back to onBeforeRenderPass . onRuntimeStopped","title":"Sequence of Events"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/#detekt-configuration","text":"If you re using Detekt, you may need to suppress some warnings when implementing this interface. Add @Suppress(\"TooManyFunctions\") to your class. Add @Suppress(\"LongParameterList\") to onWorkflowStarted if you override it.","title":"Detekt Configuration"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/#functions","text":"Name Summary onAfterRenderPass open fun onAfterRenderPass(rendering: Any ?): Unit Called just after the workflow tree finishes rendering. onAfterSnapshotPass open fun onAfterSnapshotPass(): Unit Called just after all the workflows snapshotState methods are called. onAfterWorkflowRendered open fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Called just after an individual workflow s render method was called. onBeforeRenderPass open fun onBeforeRenderPass(props: Any ?): Unit Called just before the workflow tree is going to be rendered. onBeforeSnapshotPass open fun onBeforeSnapshotPass(): Unit Called just before all the workflows snapshotState methods are called. onBeforeWorkflowRendered open fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Called just before an individual workflow s render method is going to be called. onPropsChanged open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Called after onPropsChanged returns. onRuntimeStarted open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Called when the runtime has started executing. onRuntimeStopped open fun onRuntimeStopped(): Unit Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. onSinkReceived open fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Called when a Sink has received an event. onWorkerOutput open fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Called when a worker emits an output. onWorkerStarted open fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Called when a workflow starts running a new worker. onWorkerStopped open fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. onWorkflowAction open fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. onWorkflowStarted open fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Called when a particular workflow node is started at a particular point in the workflow tree. onWorkflowStopped open fun onWorkflowStopped(workflowId: Long ): Unit Called when a particular workflow node is stopped at a particular point in the workflow tree.","title":"Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/#extension-functions","text":"Name Summary andThen fun WorkflowDiagnosticListener .andThen(next: WorkflowDiagnosticListener ): WorkflowDiagnosticListener Returns a WorkflowDiagnosticListener that will delegate all method calls first to this instance, and then to next .","title":"Extension Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/#inheritors","text":"Name Summary DebugSnapshotRecordingListener class DebugSnapshotRecordingListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that records WorkflowHierarchyDebugSnapshot s and WorkflowUpdateDebugInfo s and sends them to debugger after each render pass. SimpleLoggingDiagnosticListener open class SimpleLoggingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that just prints all events using println .","title":"Inheritors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-after-render-pass/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onAfterRenderPass onAfterRenderPass @VeryExperimentalWorkflow open fun onAfterRenderPass(rendering: Any ?): Unit Called just after the workflow tree finishes rendering. Corresponds to onBeforeRenderPass .","title":"On after render pass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-after-render-pass/#onafterrenderpass","text":"@VeryExperimentalWorkflow open fun onAfterRenderPass(rendering: Any ?): Unit Called just after the workflow tree finishes rendering. Corresponds to onBeforeRenderPass .","title":"onAfterRenderPass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-after-snapshot-pass/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onAfterSnapshotPass onAfterSnapshotPass @VeryExperimentalWorkflow open fun onAfterSnapshotPass(): Unit Called just after all the workflows snapshotState methods are called. Corresponds to onBeforeSnapshotPass .","title":"On after snapshot pass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-after-snapshot-pass/#onaftersnapshotpass","text":"@VeryExperimentalWorkflow open fun onAfterSnapshotPass(): Unit Called just after all the workflows snapshotState methods are called. Corresponds to onBeforeSnapshotPass .","title":"onAfterSnapshotPass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-after-workflow-rendered/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onAfterWorkflowRendered onAfterWorkflowRendered @VeryExperimentalWorkflow open fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Called just after an individual workflow s render method was called. Corresponds to onBeforeWorkflowRendered .","title":"On after workflow rendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-after-workflow-rendered/#onafterworkflowrendered","text":"@VeryExperimentalWorkflow open fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit Called just after an individual workflow s render method was called. Corresponds to onBeforeWorkflowRendered .","title":"onAfterWorkflowRendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-before-render-pass/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onBeforeRenderPass onBeforeRenderPass @VeryExperimentalWorkflow open fun onBeforeRenderPass(props: Any ?): Unit Called just before the workflow tree is going to be rendered. Corresponds to onAfterRenderPass .","title":"On before render pass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-before-render-pass/#onbeforerenderpass","text":"@VeryExperimentalWorkflow open fun onBeforeRenderPass(props: Any ?): Unit Called just before the workflow tree is going to be rendered. Corresponds to onAfterRenderPass .","title":"onBeforeRenderPass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-before-snapshot-pass/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onBeforeSnapshotPass onBeforeSnapshotPass @VeryExperimentalWorkflow open fun onBeforeSnapshotPass(): Unit Called just before all the workflows snapshotState methods are called. Corresponds to onAfterSnapshotPass .","title":"On before snapshot pass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-before-snapshot-pass/#onbeforesnapshotpass","text":"@VeryExperimentalWorkflow open fun onBeforeSnapshotPass(): Unit Called just before all the workflows snapshotState methods are called. Corresponds to onAfterSnapshotPass .","title":"onBeforeSnapshotPass"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-before-workflow-rendered/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onBeforeWorkflowRendered onBeforeWorkflowRendered @VeryExperimentalWorkflow open fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Called just before an individual workflow s render method is going to be called. Corresponds to onAfterWorkflowRendered .","title":"On before workflow rendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-before-workflow-rendered/#onbeforeworkflowrendered","text":"@VeryExperimentalWorkflow open fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit Called just before an individual workflow s render method is going to be called. Corresponds to onAfterWorkflowRendered .","title":"onBeforeWorkflowRendered"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-props-changed/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onPropsChanged onPropsChanged @VeryExperimentalWorkflow open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Called after onPropsChanged returns. Parameters workflowId - The ID of the workflow for this event. If null, the props for the root workflow changed. oldState and newState will always be null in that case.","title":"On props changed"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-props-changed/#onpropschanged","text":"@VeryExperimentalWorkflow open fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit Called after onPropsChanged returns.","title":"onPropsChanged"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-props-changed/#parameters","text":"workflowId - The ID of the workflow for this event. If null, the props for the root workflow changed. oldState and newState will always be null in that case.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-runtime-started/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onRuntimeStarted onRuntimeStarted @VeryExperimentalWorkflow open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Called when the runtime has started executing. No other methods will be called on this interface before this returns. Corresponds to onRuntimeStopped .","title":"On runtime started"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-runtime-started/#onruntimestarted","text":"@VeryExperimentalWorkflow open fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit Called when the runtime has started executing. No other methods will be called on this interface before this returns. Corresponds to onRuntimeStopped .","title":"onRuntimeStarted"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-runtime-stopped/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onRuntimeStopped onRuntimeStopped @VeryExperimentalWorkflow open fun onRuntimeStopped(): Unit Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. Corresponds to onRuntimeStarted .","title":"On runtime stopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-runtime-stopped/#onruntimestopped","text":"@VeryExperimentalWorkflow open fun onRuntimeStopped(): Unit Called after the runtime has been cancelled or failed, after all workflow-related coroutines have completed. Corresponds to onRuntimeStarted .","title":"onRuntimeStopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-sink-received/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onSinkReceived onSinkReceived @VeryExperimentalWorkflow open fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Called when a Sink has received an event. onWorkflowAction will always be called after this. Parameters workflowId - The ID of the workflow that created the sink and will execute its corresponding WorkflowAction . action - The WorkflowAction that will be executed by workflowId .","title":"On sink received"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-sink-received/#onsinkreceived","text":"@VeryExperimentalWorkflow open fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit Called when a Sink has received an event. onWorkflowAction will always be called after this.","title":"onSinkReceived"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-sink-received/#parameters","text":"workflowId - The ID of the workflow that created the sink and will execute its corresponding WorkflowAction . action - The WorkflowAction that will be executed by workflowId .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-worker-output/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onWorkerOutput onWorkerOutput @VeryExperimentalWorkflow open fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Called when a worker emits an output. onWorkflowAction will always be called after this. Parameters workerId - The ID of the worker that emitted output . parentWorkflowId - The ID of the workflow that is running this worker and that will receive the output. output - The value that the worker output.","title":"On worker output"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-worker-output/#onworkeroutput","text":"@VeryExperimentalWorkflow open fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit Called when a worker emits an output. onWorkflowAction will always be called after this.","title":"onWorkerOutput"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-worker-output/#parameters","text":"workerId - The ID of the worker that emitted output . parentWorkflowId - The ID of the workflow that is running this worker and that will receive the output. output - The value that the worker output.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-worker-started/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onWorkerStarted onWorkerStarted @VeryExperimentalWorkflow open fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Called when a workflow starts running a new worker. Corresponds to onWorkerStopped . Parameters workerId - An globally-unique ID that uniquely identifies the worker. parentWorkflowId - The ID of the workflow whose call to runningWorker caused this worker to start. key - The key passed to runningWorker by parentWorkflowId . description - A string description of the worker. Contains the worker s toString .","title":"On worker started"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-worker-started/#onworkerstarted","text":"@VeryExperimentalWorkflow open fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit Called when a workflow starts running a new worker. Corresponds to onWorkerStopped .","title":"onWorkerStarted"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-worker-started/#parameters","text":"workerId - An globally-unique ID that uniquely identifies the worker. parentWorkflowId - The ID of the workflow whose call to runningWorker caused this worker to start. key - The key passed to runningWorker by parentWorkflowId . description - A string description of the worker. Contains the worker s toString .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-worker-stopped/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onWorkerStopped onWorkerStopped @VeryExperimentalWorkflow open fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. Corresponds to onWorkerStarted . Parameters workerId - The ID of the worker that stopped. parentWorkflowId - The ID of the workflow that was running this worker.","title":"On worker stopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-worker-stopped/#onworkerstopped","text":"@VeryExperimentalWorkflow open fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit Called when a worker finishes running. The workflow may still technically be running the worker, but it will never emit any more outputs. Corresponds to onWorkerStarted .","title":"onWorkerStopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-worker-stopped/#parameters","text":"workerId - The ID of the worker that stopped. parentWorkflowId - The ID of the workflow that was running this worker.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-workflow-action/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onWorkflowAction onWorkflowAction @VeryExperimentalWorkflow open fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. Either onWorkerOutput or onSinkReceived will have been called before this. Parameters workflowId - The ID of the workflow that created this action . action - The WorkflowAction that was executed. oldState - The state of the workflow before executing action . newState - The state of the workflow after executing action . If the action doesn t set the state, this will be the same value as oldState . output - The output value returned from action .","title":"On workflow action"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-workflow-action/#onworkflowaction","text":"@VeryExperimentalWorkflow open fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit Called when a workflow has executed a WorkflowAction in response to a worker output or sink event. Either onWorkerOutput or onSinkReceived will have been called before this.","title":"onWorkflowAction"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-workflow-action/#parameters","text":"workflowId - The ID of the workflow that created this action . action - The WorkflowAction that was executed. oldState - The state of the workflow before executing action . newState - The state of the workflow after executing action . If the action doesn t set the state, this will be the same value as oldState . output - The output value returned from action .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-workflow-started/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onWorkflowStarted onWorkflowStarted @VeryExperimentalWorkflow open fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Called when a particular workflow node is started at a particular point in the workflow tree. Corresponds to onWorkerStopped . Parameters workflowId - The ID of the workflow that just started. parentId - The ID of the workflow whose call to renderChild caused this workflow to start. workflowType - The fully-qualified name of this workflow s class. key - The key passed to renderChild by parentId when rendering this workflow. initialProps - The props passed to renderChild by parentId . initialState - The state returned from initialState . restoredFromSnapshot - True iff the snapshot parameter to initialState was non-null.","title":"On workflow started"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-workflow-started/#onworkflowstarted","text":"@VeryExperimentalWorkflow open fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit Called when a particular workflow node is started at a particular point in the workflow tree. Corresponds to onWorkerStopped .","title":"onWorkflowStarted"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-workflow-started/#parameters","text":"workflowId - The ID of the workflow that just started. parentId - The ID of the workflow whose call to renderChild caused this workflow to start. workflowType - The fully-qualified name of this workflow s class. key - The key passed to renderChild by parentId when rendering this workflow. initialProps - The props passed to renderChild by parentId . initialState - The state returned from initialState . restoredFromSnapshot - True iff the snapshot parameter to initialState was non-null.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-workflow-stopped/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowDiagnosticListener / onWorkflowStopped onWorkflowStopped @VeryExperimentalWorkflow open fun onWorkflowStopped(workflowId: Long ): Unit Called when a particular workflow node is stopped at a particular point in the workflow tree. Corresponds to onWorkflowStarted . Parameters workflowId - The ID of the workflow that stopped.","title":"On workflow stopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-workflow-stopped/#onworkflowstopped","text":"@VeryExperimentalWorkflow open fun onWorkflowStopped(workflowId: Long ): Unit Called when a particular workflow node is stopped at a particular point in the workflow tree. Corresponds to onWorkflowStarted .","title":"onWorkflowStopped"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-diagnostic-listener/on-workflow-stopped/#parameters","text":"workflowId - The ID of the workflow that stopped.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot WorkflowHierarchyDebugSnapshot data class WorkflowHierarchyDebugSnapshot Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass. Emitted from com.squareup.workflow.WorkflowSession.debugInfo . Parameters workflowType - A string representation of the type of this workflow. state - The actual state value of the workflow. children - All the child workflows that were rendered by this workflow in the last render pass. See ChildWorkflow . Types Name Summary ChildWorker data class ChildWorker Represents a worker that is being run by the workflow represented by a particular WorkflowHierarchyDebugSnapshot . ChildWorkflow data class ChildWorkflow Represents a workflow that was rendered by the workflow represented by a particular WorkflowHierarchyDebugSnapshot . Constructors Name Summary init WorkflowHierarchyDebugSnapshot(workflowType: String , props: Any ?, state: Any ?, rendering: Any ?, children: List WorkflowHierarchyDebugSnapshot.ChildWorkflow , workers: List WorkflowHierarchyDebugSnapshot.ChildWorker ) Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass. Properties Name Summary children val children: List WorkflowHierarchyDebugSnapshot.ChildWorkflow All the child workflows that were rendered by this workflow in the last render pass. See ChildWorkflow . props val props: Any ? rendering val rendering: Any ? state val state: Any ? The actual state value of the workflow. workers val workers: List WorkflowHierarchyDebugSnapshot.ChildWorker workflowType val workflowType: String A string representation of the type of this workflow. Functions Name Summary toDescriptionString fun toDescriptionString(): String Generates a multi-line, recursive string describing the update. toString fun toString(): String","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/#workflowhierarchydebugsnapshot","text":"data class WorkflowHierarchyDebugSnapshot Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass. Emitted from com.squareup.workflow.WorkflowSession.debugInfo .","title":"WorkflowHierarchyDebugSnapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/#parameters","text":"workflowType - A string representation of the type of this workflow. state - The actual state value of the workflow. children - All the child workflows that were rendered by this workflow in the last render pass. See ChildWorkflow .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/#types","text":"Name Summary ChildWorker data class ChildWorker Represents a worker that is being run by the workflow represented by a particular WorkflowHierarchyDebugSnapshot . ChildWorkflow data class ChildWorkflow Represents a workflow that was rendered by the workflow represented by a particular WorkflowHierarchyDebugSnapshot .","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/#constructors","text":"Name Summary init WorkflowHierarchyDebugSnapshot(workflowType: String , props: Any ?, state: Any ?, rendering: Any ?, children: List WorkflowHierarchyDebugSnapshot.ChildWorkflow , workers: List WorkflowHierarchyDebugSnapshot.ChildWorker ) Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass.","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/#properties","text":"Name Summary children val children: List WorkflowHierarchyDebugSnapshot.ChildWorkflow All the child workflows that were rendered by this workflow in the last render pass. See ChildWorkflow . props val props: Any ? rendering val rendering: Any ? state val state: Any ? The actual state value of the workflow. workers val workers: List WorkflowHierarchyDebugSnapshot.ChildWorker workflowType val workflowType: String A string representation of the type of this workflow.","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/#functions","text":"Name Summary toDescriptionString fun toDescriptionString(): String Generates a multi-line, recursive string describing the update. toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / init init WorkflowHierarchyDebugSnapshot(workflowType: String , props: Any ?, state: Any ?, rendering: Any ?, children: List WorkflowHierarchyDebugSnapshot.ChildWorkflow , workers: List WorkflowHierarchyDebugSnapshot.ChildWorker ) Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass. Emitted from com.squareup.workflow.WorkflowSession.debugInfo . Parameters workflowType - A string representation of the type of this workflow. state - The actual state value of the workflow. children - All the child workflows that were rendered by this workflow in the last render pass. See ChildWorkflow .","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-init-/#init","text":"WorkflowHierarchyDebugSnapshot(workflowType: String , props: Any ?, state: Any ?, rendering: Any ?, children: List WorkflowHierarchyDebugSnapshot.ChildWorkflow , workers: List WorkflowHierarchyDebugSnapshot.ChildWorker ) Describes a tree of snapshots of the states of the entire workflow tree after a particular render pass. Emitted from com.squareup.workflow.WorkflowSession.debugInfo .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-init-/#parameters","text":"workflowType - A string representation of the type of this workflow. state - The actual state value of the workflow. children - All the child workflows that were rendered by this workflow in the last render pass. See ChildWorkflow .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/children/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / children children val children: List WorkflowHierarchyDebugSnapshot.ChildWorkflow All the child workflows that were rendered by this workflow in the last render pass. See ChildWorkflow .","title":"Children"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/children/#children","text":"val children: List WorkflowHierarchyDebugSnapshot.ChildWorkflow All the child workflows that were rendered by this workflow in the last render pass. See ChildWorkflow .","title":"children"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/props/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / props props val props: Any ?","title":"Props"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/props/#props","text":"val props: Any ?","title":"props"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/rendering/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / rendering rendering val rendering: Any ?","title":"Rendering"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/rendering/#rendering","text":"val rendering: Any ?","title":"rendering"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/state/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / state state val state: Any ? The actual state value of the workflow.","title":"State"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/state/#state","text":"val state: Any ? The actual state value of the workflow.","title":"state"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/to-description-string/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / toDescriptionString toDescriptionString fun toDescriptionString(): String Generates a multi-line, recursive string describing the update.","title":"To description string"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/to-description-string/#todescriptionstring","text":"fun toDescriptionString(): String Generates a multi-line, recursive string describing the update.","title":"toDescriptionString"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/to-string/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / toString toString fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/workers/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / workers workers val workers: List WorkflowHierarchyDebugSnapshot.ChildWorker","title":"Workers"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/workers/#workers","text":"val workers: List WorkflowHierarchyDebugSnapshot.ChildWorker","title":"workers"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/workflow-type/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / workflowType workflowType val workflowType: String A string representation of the type of this workflow.","title":"Workflow type"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/workflow-type/#workflowtype","text":"val workflowType: String A string representation of the type of this workflow.","title":"workflowType"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / ChildWorker ChildWorker data class ChildWorker Represents a worker that is being run by the workflow represented by a particular WorkflowHierarchyDebugSnapshot . Parameters key - The string key that was used to render this child. description - A string that describes the worker. Includes the output of the worker s toString method. Constructors Name Summary init ChildWorker(key: String , description: String ) Represents a worker that is being run by the workflow represented by a particular WorkflowHierarchyDebugSnapshot . Properties Name Summary description val description: String A string that describes the worker. Includes the output of the worker s toString method. key val key: String The string key that was used to render this child.","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/#childworker","text":"data class ChildWorker Represents a worker that is being run by the workflow represented by a particular WorkflowHierarchyDebugSnapshot .","title":"ChildWorker"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/#parameters","text":"key - The string key that was used to render this child. description - A string that describes the worker. Includes the output of the worker s toString method.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/#constructors","text":"Name Summary init ChildWorker(key: String , description: String ) Represents a worker that is being run by the workflow represented by a particular WorkflowHierarchyDebugSnapshot .","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/#properties","text":"Name Summary description val description: String A string that describes the worker. Includes the output of the worker s toString method. key val key: String The string key that was used to render this child.","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / ChildWorker / init init ChildWorker(key: String , description: String ) Represents a worker that is being run by the workflow represented by a particular WorkflowHierarchyDebugSnapshot . Parameters key - The string key that was used to render this child. description - A string that describes the worker. Includes the output of the worker s toString method.","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/-init-/#init","text":"ChildWorker(key: String , description: String ) Represents a worker that is being run by the workflow represented by a particular WorkflowHierarchyDebugSnapshot .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/-init-/#parameters","text":"key - The string key that was used to render this child. description - A string that describes the worker. Includes the output of the worker s toString method.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/description/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / ChildWorker / description description val description: String A string that describes the worker. Includes the output of the worker s toString method.","title":"Description"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/description/#description","text":"val description: String A string that describes the worker. Includes the output of the worker s toString method.","title":"description"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/key/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / ChildWorker / key key val key: String The string key that was used to render this child.","title":"Key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-worker/key/#key","text":"val key: String The string key that was used to render this child.","title":"key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / ChildWorkflow ChildWorkflow data class ChildWorkflow Represents a workflow that was rendered by the workflow represented by a particular WorkflowHierarchyDebugSnapshot . Parameters key - The string key that was used to render this child. snapshot - The WorkflowHierarchyDebugSnapshot that describes the state of this child. Constructors Name Summary init ChildWorkflow(key: String , snapshot: WorkflowHierarchyDebugSnapshot ) Represents a workflow that was rendered by the workflow represented by a particular WorkflowHierarchyDebugSnapshot . Properties Name Summary key val key: String The string key that was used to render this child. snapshot val snapshot: WorkflowHierarchyDebugSnapshot The WorkflowHierarchyDebugSnapshot that describes the state of this child.","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/#childworkflow","text":"data class ChildWorkflow Represents a workflow that was rendered by the workflow represented by a particular WorkflowHierarchyDebugSnapshot .","title":"ChildWorkflow"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/#parameters","text":"key - The string key that was used to render this child. snapshot - The WorkflowHierarchyDebugSnapshot that describes the state of this child.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/#constructors","text":"Name Summary init ChildWorkflow(key: String , snapshot: WorkflowHierarchyDebugSnapshot ) Represents a workflow that was rendered by the workflow represented by a particular WorkflowHierarchyDebugSnapshot .","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/#properties","text":"Name Summary key val key: String The string key that was used to render this child. snapshot val snapshot: WorkflowHierarchyDebugSnapshot The WorkflowHierarchyDebugSnapshot that describes the state of this child.","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / ChildWorkflow / init init ChildWorkflow(key: String , snapshot: WorkflowHierarchyDebugSnapshot ) Represents a workflow that was rendered by the workflow represented by a particular WorkflowHierarchyDebugSnapshot . Parameters key - The string key that was used to render this child. snapshot - The WorkflowHierarchyDebugSnapshot that describes the state of this child.","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/-init-/#init","text":"ChildWorkflow(key: String , snapshot: WorkflowHierarchyDebugSnapshot ) Represents a workflow that was rendered by the workflow represented by a particular WorkflowHierarchyDebugSnapshot .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/-init-/#parameters","text":"key - The string key that was used to render this child. snapshot - The WorkflowHierarchyDebugSnapshot that describes the state of this child.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/key/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / ChildWorkflow / key key val key: String The string key that was used to render this child.","title":"Key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/key/#key","text":"val key: String The string key that was used to render this child.","title":"key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/snapshot/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowHierarchyDebugSnapshot / ChildWorkflow / snapshot snapshot val snapshot: WorkflowHierarchyDebugSnapshot The WorkflowHierarchyDebugSnapshot that describes the state of this child.","title":"Snapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-hierarchy-debug-snapshot/-child-workflow/snapshot/#snapshot","text":"val snapshot: WorkflowHierarchyDebugSnapshot The WorkflowHierarchyDebugSnapshot that describes the state of this child.","title":"snapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo WorkflowUpdateDebugInfo data class WorkflowUpdateDebugInfo A description of a workflow update triggered by a Source (worker, event, etc). This is a simple linked list that represents a traversal down the workflow tree that starts at the root and indicates, for each workflow, if its child output something that it handled (see Kind ), or if it was just a parent of a workflow that didn t output anything. When a workflow handles an update, the type of update is indicated by Source . Types Name Summary Kind sealed class Kind A sealed class that indicates whether a workflow actually executed a WorkflowAction , or was just the ancestor of a workflow that did. Source sealed class Source A sealed class that indicates what triggered the update. Constructors Name Summary init WorkflowUpdateDebugInfo(workflowType: String , kind: WorkflowUpdateDebugInfo.Kind ) A description of a workflow update triggered by a Source (worker, event, etc). Properties Name Summary kind val kind: WorkflowUpdateDebugInfo.Kind workflowType val workflowType: String Functions Name Summary toDescriptionString fun toDescriptionString(): String Generates a multi-line, recursive string describing the update. toString fun toString(): String","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/#workflowupdatedebuginfo","text":"data class WorkflowUpdateDebugInfo A description of a workflow update triggered by a Source (worker, event, etc). This is a simple linked list that represents a traversal down the workflow tree that starts at the root and indicates, for each workflow, if its child output something that it handled (see Kind ), or if it was just a parent of a workflow that didn t output anything. When a workflow handles an update, the type of update is indicated by Source .","title":"WorkflowUpdateDebugInfo"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/#types","text":"Name Summary Kind sealed class Kind A sealed class that indicates whether a workflow actually executed a WorkflowAction , or was just the ancestor of a workflow that did. Source sealed class Source A sealed class that indicates what triggered the update.","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/#constructors","text":"Name Summary init WorkflowUpdateDebugInfo(workflowType: String , kind: WorkflowUpdateDebugInfo.Kind ) A description of a workflow update triggered by a Source (worker, event, etc).","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/#properties","text":"Name Summary kind val kind: WorkflowUpdateDebugInfo.Kind workflowType val workflowType: String","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/#functions","text":"Name Summary toDescriptionString fun toDescriptionString(): String Generates a multi-line, recursive string describing the update. toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / init init WorkflowUpdateDebugInfo(workflowType: String , kind: WorkflowUpdateDebugInfo.Kind ) A description of a workflow update triggered by a Source (worker, event, etc). This is a simple linked list that represents a traversal down the workflow tree that starts at the root and indicates, for each workflow, if its child output something that it handled (see Kind ), or if it was just a parent of a workflow that didn t output anything. When a workflow handles an update, the type of update is indicated by Source .","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-init-/#init","text":"WorkflowUpdateDebugInfo(workflowType: String , kind: WorkflowUpdateDebugInfo.Kind ) A description of a workflow update triggered by a Source (worker, event, etc). This is a simple linked list that represents a traversal down the workflow tree that starts at the root and indicates, for each workflow, if its child output something that it handled (see Kind ), or if it was just a parent of a workflow that didn t output anything. When a workflow handles an update, the type of update is indicated by Source .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/kind/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / kind kind val kind: WorkflowUpdateDebugInfo.Kind","title":"Kind"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/kind/#kind","text":"val kind: WorkflowUpdateDebugInfo.Kind","title":"kind"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/to-description-string/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / toDescriptionString toDescriptionString fun toDescriptionString(): String Generates a multi-line, recursive string describing the update.","title":"To description string"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/to-description-string/#todescriptionstring","text":"fun toDescriptionString(): String Generates a multi-line, recursive string describing the update.","title":"toDescriptionString"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/to-string/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / toString toString fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/workflow-type/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / workflowType workflowType val workflowType: String","title":"Workflow type"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/workflow-type/#workflowtype","text":"val workflowType: String","title":"workflowType"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Kind Kind sealed class Kind A sealed class that indicates whether a workflow actually executed a WorkflowAction , or was just the ancestor of a workflow that did. Contains two subclasses, see their documentation for details: Updated Passthrough Types Name Summary Passthrough data class Passthrough : WorkflowUpdateDebugInfo.Kind Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it. Updated data class Updated : WorkflowUpdateDebugInfo.Kind Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by: Inheritors Name Summary Passthrough data class Passthrough : WorkflowUpdateDebugInfo.Kind Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it. Updated data class Updated : WorkflowUpdateDebugInfo.Kind Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by:","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/#kind","text":"sealed class Kind A sealed class that indicates whether a workflow actually executed a WorkflowAction , or was just the ancestor of a workflow that did. Contains two subclasses, see their documentation for details: Updated Passthrough","title":"Kind"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/#types","text":"Name Summary Passthrough data class Passthrough : WorkflowUpdateDebugInfo.Kind Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it. Updated data class Updated : WorkflowUpdateDebugInfo.Kind Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by:","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/#inheritors","text":"Name Summary Passthrough data class Passthrough : WorkflowUpdateDebugInfo.Kind Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it. Updated data class Updated : WorkflowUpdateDebugInfo.Kind Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by:","title":"Inheritors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Kind / Passthrough Passthrough data class Passthrough : WorkflowUpdateDebugInfo.Kind Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it. Constructors Name Summary init Passthrough(key: String , childInfo: WorkflowUpdateDebugInfo ) Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it. Properties Name Summary childInfo val childInfo: WorkflowUpdateDebugInfo key val key: String","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/#passthrough","text":"data class Passthrough : WorkflowUpdateDebugInfo.Kind Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it.","title":"Passthrough"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/#constructors","text":"Name Summary init Passthrough(key: String , childInfo: WorkflowUpdateDebugInfo ) Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it.","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/#properties","text":"Name Summary childInfo val childInfo: WorkflowUpdateDebugInfo key val key: String","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Kind / Passthrough / init init Passthrough(key: String , childInfo: WorkflowUpdateDebugInfo ) Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it.","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/-init-/#init","text":"Passthrough(key: String , childInfo: WorkflowUpdateDebugInfo ) Indicates that one of this workflow s descendants executed a WorkflowAction , but none of its immediate children emitted an output, so this workflow didn t get directly notified about it.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/child-info/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Kind / Passthrough / childInfo childInfo val childInfo: WorkflowUpdateDebugInfo","title":"Child info"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/child-info/#childinfo","text":"val childInfo: WorkflowUpdateDebugInfo","title":"childInfo"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/key/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Kind / Passthrough / key key val key: String","title":"Key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-passthrough/key/#key","text":"val key: String","title":"key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-updated/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Kind / Updated Updated data class Updated : WorkflowUpdateDebugInfo.Kind Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by: An event ( Source.Sink ) A worker ( Source.Worker ) A child workflow emitting an output ( Source.Subtree ) Constructors Name Summary init Updated(source: WorkflowUpdateDebugInfo.Source ) Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by: Properties Name Summary source val source: WorkflowUpdateDebugInfo.Source","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-updated/#updated","text":"data class Updated : WorkflowUpdateDebugInfo.Kind Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by: An event ( Source.Sink ) A worker ( Source.Worker ) A child workflow emitting an output ( Source.Subtree )","title":"Updated"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-updated/#constructors","text":"Name Summary init Updated(source: WorkflowUpdateDebugInfo.Source ) Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by:","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-updated/#properties","text":"Name Summary source val source: WorkflowUpdateDebugInfo.Source","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-updated/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Kind / Updated / init init Updated(source: WorkflowUpdateDebugInfo.Source ) Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by: An event ( Source.Sink ) A worker ( Source.Worker ) A child workflow emitting an output ( Source.Subtree )","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-updated/-init-/#init","text":"Updated(source: WorkflowUpdateDebugInfo.Source ) Indicates that this workflow actually executed a WorkflowAction . Updated.source is a Source that indicates if the action was triggered by: An event ( Source.Sink ) A worker ( Source.Worker ) A child workflow emitting an output ( Source.Subtree )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-updated/source/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Kind / Updated / source source val source: WorkflowUpdateDebugInfo.Source","title":"Source"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-kind/-updated/source/#source","text":"val source: WorkflowUpdateDebugInfo.Source","title":"source"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source Source sealed class Source A sealed class that indicates what triggered the update. Contains three subclasses, see their documentation for details: Sink Worker Subtree Types Name Summary Sink object Sink : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an event being received by a Sink (see makeActionSink ). Subtree data class Subtree : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow. Worker data class Worker : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a Worker being run by this workflow. Inheritors Name Summary Sink object Sink : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an event being received by a Sink (see makeActionSink ). Subtree data class Subtree : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow. Worker data class Worker : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a Worker being run by this workflow.","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/#source","text":"sealed class Source A sealed class that indicates what triggered the update. Contains three subclasses, see their documentation for details: Sink Worker Subtree","title":"Source"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/#types","text":"Name Summary Sink object Sink : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an event being received by a Sink (see makeActionSink ). Subtree data class Subtree : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow. Worker data class Worker : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a Worker being run by this workflow.","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/#inheritors","text":"Name Summary Sink object Sink : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an event being received by a Sink (see makeActionSink ). Subtree data class Subtree : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow. Worker data class Worker : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a Worker being run by this workflow.","title":"Inheritors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-sink/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Sink Sink object Sink : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an event being received by a Sink (see makeActionSink ).","title":" sink"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-sink/#sink","text":"object Sink : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an event being received by a Sink (see makeActionSink ).","title":"Sink"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Subtree Subtree data class Subtree : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow. Parameters key - The string key of the child that emitted the output. output - The value emitted from the child. childInfo - The WorkflowUpdateDebugInfo that describes the child s update. Constructors Name Summary init Subtree(key: String , output: Any , childInfo: WorkflowUpdateDebugInfo ) Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow. Properties Name Summary childInfo val childInfo: WorkflowUpdateDebugInfo The WorkflowUpdateDebugInfo that describes the child s update. key val key: String The string key of the child that emitted the output. output val output: Any The value emitted from the child.","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/#subtree","text":"data class Subtree : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow.","title":"Subtree"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/#parameters","text":"key - The string key of the child that emitted the output. output - The value emitted from the child. childInfo - The WorkflowUpdateDebugInfo that describes the child s update.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/#constructors","text":"Name Summary init Subtree(key: String , output: Any , childInfo: WorkflowUpdateDebugInfo ) Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow.","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/#properties","text":"Name Summary childInfo val childInfo: WorkflowUpdateDebugInfo The WorkflowUpdateDebugInfo that describes the child s update. key val key: String The string key of the child that emitted the output. output val output: Any The value emitted from the child.","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Subtree / init init Subtree(key: String , output: Any , childInfo: WorkflowUpdateDebugInfo ) Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow. Parameters key - The string key of the child that emitted the output. output - The value emitted from the child. childInfo - The WorkflowUpdateDebugInfo that describes the child s update.","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/-init-/#init","text":"Subtree(key: String , output: Any , childInfo: WorkflowUpdateDebugInfo ) Indicates that the update was triggered by an output emitted from a child workflow that was rendered by this workflow.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/-init-/#parameters","text":"key - The string key of the child that emitted the output. output - The value emitted from the child. childInfo - The WorkflowUpdateDebugInfo that describes the child s update.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/child-info/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Subtree / childInfo childInfo val childInfo: WorkflowUpdateDebugInfo The WorkflowUpdateDebugInfo that describes the child s update.","title":"Child info"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/child-info/#childinfo","text":"val childInfo: WorkflowUpdateDebugInfo The WorkflowUpdateDebugInfo that describes the child s update.","title":"childInfo"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/key/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Subtree / key key val key: String The string key of the child that emitted the output.","title":"Key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/key/#key","text":"val key: String The string key of the child that emitted the output.","title":"key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/output/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Subtree / output output val output: Any The value emitted from the child.","title":"Output"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-subtree/output/#output","text":"val output: Any The value emitted from the child.","title":"output"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Worker Worker data class Worker : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a Worker being run by this workflow. Parameters key - The string key of the worker that emitted the output. output - The value emitted from the worker. Constructors Name Summary init Worker(key: String , output: Any ) Indicates that the update was triggered by an output emitted from a Worker being run by this workflow. Properties Name Summary key val key: String The string key of the worker that emitted the output. output val output: Any The value emitted from the worker.","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/#worker","text":"data class Worker : WorkflowUpdateDebugInfo.Source Indicates that the update was triggered by an output emitted from a Worker being run by this workflow.","title":"Worker"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/#parameters","text":"key - The string key of the worker that emitted the output. output - The value emitted from the worker.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/#constructors","text":"Name Summary init Worker(key: String , output: Any ) Indicates that the update was triggered by an output emitted from a Worker being run by this workflow.","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/#properties","text":"Name Summary key val key: String The string key of the worker that emitted the output. output val output: Any The value emitted from the worker.","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/-init-/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Worker / init init Worker(key: String , output: Any ) Indicates that the update was triggered by an output emitted from a Worker being run by this workflow. Parameters key - The string key of the worker that emitted the output. output - The value emitted from the worker.","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/-init-/#init","text":"Worker(key: String , output: Any ) Indicates that the update was triggered by an output emitted from a Worker being run by this workflow.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/-init-/#parameters","text":"key - The string key of the worker that emitted the output. output - The value emitted from the worker.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/key/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Worker / key key val key: String The string key of the worker that emitted the output.","title":"Key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/key/#key","text":"val key: String The string key of the worker that emitted the output.","title":"key"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/output/","text":"workflow-runtime / com.squareup.workflow.diagnostic / WorkflowUpdateDebugInfo / Source / Worker / output output val output: Any The value emitted from the worker.","title":"Output"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.diagnostic/-workflow-update-debug-info/-source/-worker/output/#output","text":"val output: Any The value emitted from the worker.","title":"output"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/","text":"workflow-runtime / com.squareup.workflow.testing Package com.squareup.workflow.testing Types Name Summary WorkflowTestParams data class WorkflowTestParams out StateT Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . Functions Name Summary launchWorkflowForTestFromStateIn fun PropsT, StateT, OutputT : Any , RenderingT, RunnerT launchWorkflowForTestFromStateIn(scope: CoroutineScope, workflow: StatefulWorkflow PropsT , StateT , OutputT , RenderingT , props: Flow PropsT , testParams: WorkflowTestParams StateT , beforeStart: CoroutineScope.(session: WorkflowSession OutputT , RenderingT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with WorkflowTestParams.StartMode and the first value emitted by props . Subsequent values emitted from props will be used to re-render the workflow.","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/#package-comsquareupworkflowtesting","text":"","title":"Package com.squareup.workflow.testing"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/#types","text":"Name Summary WorkflowTestParams data class WorkflowTestParams out StateT Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test .","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/#functions","text":"Name Summary launchWorkflowForTestFromStateIn fun PropsT, StateT, OutputT : Any , RenderingT, RunnerT launchWorkflowForTestFromStateIn(scope: CoroutineScope, workflow: StatefulWorkflow PropsT , StateT , OutputT , RenderingT , props: Flow PropsT , testParams: WorkflowTestParams StateT , beforeStart: CoroutineScope.(session: WorkflowSession OutputT , RenderingT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with WorkflowTestParams.StartMode and the first value emitted by props . Subsequent values emitted from props will be used to re-render the workflow.","title":"Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/launch-workflow-for-test-from-state-in/","text":"workflow-runtime / com.squareup.workflow.testing / launchWorkflowForTestFromStateIn launchWorkflowForTestFromStateIn @TestOnly fun PropsT, StateT, OutputT : Any , RenderingT, RunnerT launchWorkflowForTestFromStateIn(scope: CoroutineScope, workflow: StatefulWorkflow PropsT , StateT , OutputT , RenderingT , props: Flow PropsT , testParams: WorkflowTestParams StateT , beforeStart: CoroutineScope.(session: WorkflowSession OutputT , RenderingT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with WorkflowTestParams.StartMode and the first value emitted by props . Subsequent values emitted from props will be used to re-render the workflow. See launchWorkflowIn for documentation about most of the parameters and behavior.","title":"Launch workflow for test from state in"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/launch-workflow-for-test-from-state-in/#launchworkflowfortestfromstatein","text":"@TestOnly fun PropsT, StateT, OutputT : Any , RenderingT, RunnerT launchWorkflowForTestFromStateIn(scope: CoroutineScope, workflow: StatefulWorkflow PropsT , StateT , OutputT , RenderingT , props: Flow PropsT , testParams: WorkflowTestParams StateT , beforeStart: CoroutineScope.(session: WorkflowSession OutputT , RenderingT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with WorkflowTestParams.StartMode and the first value emitted by props . Subsequent values emitted from props will be used to re-render the workflow. See launchWorkflowIn for documentation about most of the parameters and behavior.","title":"launchWorkflowForTestFromStateIn"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams WorkflowTestParams @TestOnly data class WorkflowTestParams out StateT Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . Parameters startFrom - How to start the workflow \u2013 see StartMode . checkRenderIdempotence - If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don t want to have to deal with the extra passes, you can temporarily set it to false. Types Name Summary StartMode sealed class StartMode out StateT Defines how to start the workflow for tests. Constructors Name Summary init WorkflowTestParams(startFrom: WorkflowTestParams.StartMode StateT = StartFresh, checkRenderIdempotence: Boolean = true) Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . Properties Name Summary checkRenderIdempotence val checkRenderIdempotence: Boolean If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don t want to have to deal with the extra passes, you can temporarily set it to false. startFrom val startFrom: WorkflowTestParams.StartMode StateT How to start the workflow \u2013 see StartMode .","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/#workflowtestparams","text":"@TestOnly data class WorkflowTestParams out StateT Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test .","title":"WorkflowTestParams"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/#parameters","text":"startFrom - How to start the workflow \u2013 see StartMode . checkRenderIdempotence - If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/#types","text":"Name Summary StartMode sealed class StartMode out StateT Defines how to start the workflow for tests.","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/#constructors","text":"Name Summary init WorkflowTestParams(startFrom: WorkflowTestParams.StartMode StateT = StartFresh, checkRenderIdempotence: Boolean = true) Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test .","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/#properties","text":"Name Summary checkRenderIdempotence val checkRenderIdempotence: Boolean If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don t want to have to deal with the extra passes, you can temporarily set it to false. startFrom val startFrom: WorkflowTestParams.StartMode StateT How to start the workflow \u2013 see StartMode .","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-init-/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / init init WorkflowTestParams(startFrom: WorkflowTestParams.StartMode StateT = StartFresh, checkRenderIdempotence: Boolean = true) Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test . Parameters startFrom - How to start the workflow \u2013 see StartMode . checkRenderIdempotence - If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don t want to have to deal with the extra passes, you can temporarily set it to false.","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-init-/#init","text":"WorkflowTestParams(startFrom: WorkflowTestParams.StartMode StateT = StartFresh, checkRenderIdempotence: Boolean = true) Defines configuration for workflow testing infrastructure such as testRender , testFromStart . and test .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-init-/#parameters","text":"startFrom - How to start the workflow \u2013 see StartMode . checkRenderIdempotence - If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/check-render-idempotence/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / checkRenderIdempotence checkRenderIdempotence val checkRenderIdempotence: Boolean If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don t want to have to deal with the extra passes, you can temporarily set it to false.","title":"Check render idempotence"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/check-render-idempotence/#checkrenderidempotence","text":"val checkRenderIdempotence: Boolean If true, every render method will be called multiple times, to help suss out any side effects that a render method is trying to perform. This parameter defaults to true since the workflow contract is that render will be called an arbitrary number of times for any given state, so performing side effects in render will almost always result in bugs. It is recommended to leave this on, but if you need to debug a test and don t want to have to deal with the extra passes, you can temporarily set it to false.","title":"checkRenderIdempotence"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/start-from/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / startFrom startFrom val startFrom: WorkflowTestParams.StartMode StateT How to start the workflow \u2013 see StartMode .","title":"Start from"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/start-from/#startfrom","text":"val startFrom: WorkflowTestParams.StartMode StateT How to start the workflow \u2013 see StartMode .","title":"startFrom"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode StartMode sealed class StartMode out StateT Defines how to start the workflow for tests. See the documentation on individual cases for more information: StartFresh StartFromWorkflowSnapshot StartFromCompleteSnapshot StartFromState Types Name Summary StartFresh object StartFresh : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a null snapshot. StartFromCompleteSnapshot data class StartFromCompleteSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. StartFromState data class StartFromState StateT : WorkflowTestParams.StartMode StateT Starts the workflow from an exact state. Only applies to StatefulWorkflow s. StartFromWorkflowSnapshot data class StartFromWorkflowSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. Inheritors Name Summary StartFresh object StartFresh : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a null snapshot. StartFromCompleteSnapshot data class StartFromCompleteSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. StartFromState data class StartFromState StateT : WorkflowTestParams.StartMode StateT Starts the workflow from an exact state. Only applies to StatefulWorkflow s. StartFromWorkflowSnapshot data class StartFromWorkflowSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s.","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/#startmode","text":"sealed class StartMode out StateT Defines how to start the workflow for tests. See the documentation on individual cases for more information: StartFresh StartFromWorkflowSnapshot StartFromCompleteSnapshot StartFromState","title":"StartMode"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/#types","text":"Name Summary StartFresh object StartFresh : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a null snapshot. StartFromCompleteSnapshot data class StartFromCompleteSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. StartFromState data class StartFromState StateT : WorkflowTestParams.StartMode StateT Starts the workflow from an exact state. Only applies to StatefulWorkflow s. StartFromWorkflowSnapshot data class StartFromWorkflowSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s.","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/#inheritors","text":"Name Summary StartFresh object StartFresh : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a null snapshot. StartFromCompleteSnapshot data class StartFromCompleteSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. StartFromState data class StartFromState StateT : WorkflowTestParams.StartMode StateT Starts the workflow from an exact state. Only applies to StatefulWorkflow s. StartFromWorkflowSnapshot data class StartFromWorkflowSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s.","title":"Inheritors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-fresh/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFresh StartFresh object StartFresh : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a null snapshot.","title":" start fresh"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-fresh/#startfresh","text":"object StartFresh : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a null snapshot.","title":"StartFresh"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFromCompleteSnapshot StartFromCompleteSnapshot data class StartFromCompleteSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow. Parameters snapshot - A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot . Constructors Name Summary init StartFromCompleteSnapshot(snapshot: Snapshot) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. Properties Name Summary snapshot val snapshot: Snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#startfromcompletesnapshot","text":"data class StartFromCompleteSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow.","title":"StartFromCompleteSnapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#parameters","text":"snapshot - A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#constructors","text":"Name Summary init StartFromCompleteSnapshot(snapshot: Snapshot) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s.","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/#properties","text":"Name Summary snapshot val snapshot: Snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/-init-/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFromCompleteSnapshot / init init StartFromCompleteSnapshot(snapshot: Snapshot) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow. Parameters snapshot - A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/-init-/#init","text":"StartFromCompleteSnapshot(snapshot: Snapshot) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromWorkflowSnapshot because it represents a complete snapshot of the entire tree, not just the individual snapshot for the root workflow.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/-init-/#parameters","text":"snapshot - A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/snapshot/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFromCompleteSnapshot / snapshot snapshot val snapshot: Snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"Snapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-complete-snapshot/snapshot/#snapshot","text":"val snapshot: Snapshot A Snapshot that is the entire snapshot from the workflow tree, as returned by WorkflowTester.awaitNextSnapshot . To test with only the snapshot returned by snapshotState , use StartFromWorkflowSnapshot .","title":"snapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-state/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFromState StartFromState data class StartFromState StateT : WorkflowTestParams.StartMode StateT Starts the workflow from an exact state. Only applies to StatefulWorkflow s. Constructors Name Summary init StartFromState(state: StateT ) Starts the workflow from an exact state. Only applies to StatefulWorkflow s. Properties Name Summary state val state: StateT","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-state/#startfromstate","text":"data class StartFromState StateT : WorkflowTestParams.StartMode StateT Starts the workflow from an exact state. Only applies to StatefulWorkflow s.","title":"StartFromState"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-state/#constructors","text":"Name Summary init StartFromState(state: StateT ) Starts the workflow from an exact state. Only applies to StatefulWorkflow s.","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-state/#properties","text":"Name Summary state val state: StateT","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-state/-init-/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFromState / init init StartFromState(state: StateT ) Starts the workflow from an exact state. Only applies to StatefulWorkflow s.","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-state/-init-/#init","text":"StartFromState(state: StateT ) Starts the workflow from an exact state. Only applies to StatefulWorkflow s.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-state/state/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFromState / state state val state: StateT","title":"State"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-state/state/#state","text":"val state: StateT","title":"state"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFromWorkflowSnapshot StartFromWorkflowSnapshot data class StartFromWorkflowSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime. Parameters snapshot - A Snapshot that can be directly parsed by a workflow s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot . Constructors Name Summary init StartFromWorkflowSnapshot(snapshot: Snapshot) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. Properties Name Summary snapshot val snapshot: Snapshot A Snapshot that can be directly parsed by a workflow s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#startfromworkflowsnapshot","text":"data class StartFromWorkflowSnapshot : WorkflowTestParams.StartMode Nothing Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime.","title":"StartFromWorkflowSnapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#parameters","text":"snapshot - A Snapshot that can be directly parsed by a workflow s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#constructors","text":"Name Summary init StartFromWorkflowSnapshot(snapshot: Snapshot) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s.","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/#properties","text":"Name Summary snapshot val snapshot: Snapshot A Snapshot that can be directly parsed by a workflow s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/-init-/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFromWorkflowSnapshot / init init StartFromWorkflowSnapshot(snapshot: Snapshot) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime. Parameters snapshot - A Snapshot that can be directly parsed by a workflow s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/-init-/#init","text":"StartFromWorkflowSnapshot(snapshot: Snapshot) Starts the workflow from its initial state (as specified by initial state ), with a non-null snapshot. Only applies to StatefulWorkflow s. This differs from StartFromCompleteSnapshot because it represents only the snapshot for the root workflow, without any of the snapshots of its children or other bookkeeping data added by the workflow runtime.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/-init-/#parameters","text":"snapshot - A Snapshot that can be directly parsed by a workflow s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/snapshot/","text":"workflow-runtime / com.squareup.workflow.testing / WorkflowTestParams / StartMode / StartFromWorkflowSnapshot / snapshot snapshot val snapshot: Snapshot A Snapshot that can be directly parsed by a workflow s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"Snapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow.testing/-workflow-test-params/-start-mode/-start-from-workflow-snapshot/snapshot/#snapshot","text":"val snapshot: Snapshot A Snapshot that can be directly parsed by a workflow s initialState method. For workflow trees, this is only the snapshot of the root workflow, as returned by snapshotState . To test with a complete snapshot of the entire workflow tree, use StartFromCompleteSnapshot .","title":"snapshot"},{"location":"kotlin/api/workflow-rx2/","text":"workflow-rx2 Packages Name Summary com.squareup.workflow.rx2 Index All Types","title":"Home"},{"location":"kotlin/api/workflow-rx2/#packages","text":"Name Summary com.squareup.workflow.rx2","title":"Packages"},{"location":"kotlin/api/workflow-rx2/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-rx2/alltypes/","text":"All Types Name Summary io.reactivex.Completable (extensions in package com.squareup.workflow.rx2) io.reactivex.Maybe (extensions in package com.squareup.workflow.rx2) io.reactivex.Observable (extensions in package com.squareup.workflow.rx2) org.reactivestreams.Publisher (extensions in package com.squareup.workflow.rx2) com.squareup.workflow.rx2.PublisherWorker An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow . io.reactivex.Single (extensions in package com.squareup.workflow.rx2)","title":"Home"},{"location":"kotlin/api/workflow-rx2/alltypes/#all-types","text":"Name Summary io.reactivex.Completable (extensions in package com.squareup.workflow.rx2) io.reactivex.Maybe (extensions in package com.squareup.workflow.rx2) io.reactivex.Observable (extensions in package com.squareup.workflow.rx2) org.reactivestreams.Publisher (extensions in package com.squareup.workflow.rx2) com.squareup.workflow.rx2.PublisherWorker An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow . io.reactivex.Single (extensions in package com.squareup.workflow.rx2)","title":"All Types"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/","text":"workflow-rx2 / com.squareup.workflow.rx2 Package com.squareup.workflow.rx2 Types Name Summary PublisherWorker abstract class PublisherWorker out OutputT : Any : Worker OutputT An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow . Extensions for External Classes Name Summary io.reactivex.Completable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single org.reactivestreams.Publisher","title":"workflow-rx2"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/#package-comsquareupworkflowrx2","text":"","title":"Package com.squareup.workflow.rx2"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/#types","text":"Name Summary PublisherWorker abstract class PublisherWorker out OutputT : Any : Worker OutputT An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow .","title":"Types"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/#extensions-for-external-classes","text":"Name Summary io.reactivex.Completable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single org.reactivestreams.Publisher","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / PublisherWorker PublisherWorker abstract class PublisherWorker out OutputT : Any : Worker OutputT An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow . If you re using RxJava, Flowable is a Publisher . Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher , but doesn t require you to add @UseExperimental(ExperimentalCoroutinesApi::class) to your code. Constructors Name Summary init PublisherWorker() An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow . Functions Name Summary run fun run(): Flow OutputT runPublisher abstract fun runPublisher(): Publisher out OutputT Returns a Flowable to execute the work represented by this worker.","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/#publisherworker","text":"abstract class PublisherWorker out OutputT : Any : Worker OutputT An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow . If you re using RxJava, Flowable is a Publisher . Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher , but doesn t require you to add @UseExperimental(ExperimentalCoroutinesApi::class) to your code.","title":"PublisherWorker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/#constructors","text":"Name Summary init PublisherWorker() An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow .","title":"Constructors"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/#functions","text":"Name Summary run fun run(): Flow OutputT runPublisher abstract fun runPublisher(): Publisher out OutputT Returns a Flowable to execute the work represented by this worker.","title":"Functions"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/-init-/","text":"workflow-rx2 / com.squareup.workflow.rx2 / PublisherWorker / init init PublisherWorker() An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow . If you re using RxJava, Flowable is a Publisher . Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher , but doesn t require you to add @UseExperimental(ExperimentalCoroutinesApi::class) to your code.","title":" init "},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/-init-/#init","text":"PublisherWorker() An convenience implementation of Worker that is expressed in terms of Reactive Streams Publisher instead of Flow . If you re using RxJava, Flowable is a Publisher . Subclassing this is equivalent to just implementing Worker.run directly and calling asFlow on your Publisher , but doesn t require you to add @UseExperimental(ExperimentalCoroutinesApi::class) to your code.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/run-publisher/","text":"workflow-rx2 / com.squareup.workflow.rx2 / PublisherWorker / runPublisher runPublisher abstract fun runPublisher(): Publisher out OutputT Returns a Flowable to execute the work represented by this worker. If you have an io.reactivex.Observable instead, just call toFlowable to convert it. The Flowable is subscribed to in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the subscription will be disposed .","title":"Run publisher"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/run-publisher/#runpublisher","text":"abstract fun runPublisher(): Publisher out OutputT Returns a Flowable to execute the work represented by this worker. If you have an io.reactivex.Observable instead, just call toFlowable to convert it. The Flowable is subscribed to in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the subscription will be disposed .","title":"runPublisher"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/run/","text":"workflow-rx2 / com.squareup.workflow.rx2 / PublisherWorker / run run fun run(): Flow OutputT","title":"Run"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/-publisher-worker/run/#run","text":"fun run(): Flow OutputT","title":"run"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-completable/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Completable Extensions for io.reactivex.Completable Name Summary asWorker fun Completable.asWorker(): Worker Nothing Creates a Worker from this Completable .","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-completable/#extensions-for-ioreactivexcompletable","text":"Name Summary asWorker fun Completable.asWorker(): Worker Nothing Creates a Worker from this Completable .","title":"Extensions for io.reactivex.Completable"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-completable/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Completable / asWorker asWorker fun Completable.asWorker(): Worker Nothing Creates a Worker from this Completable . The Completable will be subscribed to when the Worker is started, and disposed when it is cancelled. The key is required for this operator because there is no type information available to distinguish workers.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-completable/as-worker/#asworker","text":"fun Completable.asWorker(): Worker Nothing Creates a Worker from this Completable . The Completable will be subscribed to when the Worker is started, and disposed when it is cancelled. The key is required for this operator because there is no type information available to distinguish workers.","title":"asWorker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-maybe/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Maybe Extensions for io.reactivex.Maybe Name Summary asWorker fun T : Any Maybe out T ? .asWorker(): Worker T Creates a Worker from this Maybe .","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-maybe/#extensions-for-ioreactivexmaybe","text":"Name Summary asWorker fun T : Any Maybe out T ? .asWorker(): Worker T Creates a Worker from this Maybe .","title":"Extensions for io.reactivex.Maybe"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-maybe/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Maybe / asWorker asWorker inline fun reified T : Any Maybe out T ? .asWorker(): Worker T Creates a Worker from this Maybe . The Maybe will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-maybe/as-worker/#asworker","text":"inline fun reified T : Any Maybe out T ? .asWorker(): Worker T Creates a Worker from this Maybe . The Maybe will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-observable/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Observable Extensions for io.reactivex.Observable Name Summary asWorker fun T : Any Observable out T ? .asWorker(): Worker T Creates a Worker from this Observable .","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-observable/#extensions-for-ioreactivexobservable","text":"Name Summary asWorker fun T : Any Observable out T ? .asWorker(): Worker T Creates a Worker from this Observable .","title":"Extensions for io.reactivex.Observable"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-observable/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Observable / asWorker asWorker inline fun reified T : Any Observable out T ? .asWorker(): Worker T Creates a Worker from this Observable . The Observable will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-observable/as-worker/#asworker","text":"inline fun reified T : Any Observable out T ? .asWorker(): Worker T Creates a Worker from this Observable . The Observable will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-single/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Single Extensions for io.reactivex.Single Name Summary asWorker fun T : Any Single out T ? .asWorker(): Worker T Creates a Worker from this Single .","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-single/#extensions-for-ioreactivexsingle","text":"Name Summary asWorker fun T : Any Single out T ? .asWorker(): Worker T Creates a Worker from this Single .","title":"Extensions for io.reactivex.Single"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-single/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Single / asWorker asWorker inline fun reified T : Any Single out T ? .asWorker(): Worker T Creates a Worker from this Single . The Single will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-single/as-worker/#asworker","text":"inline fun reified T : Any Single out T ? .asWorker(): Worker T Creates a Worker from this Single . The Single will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/org.reactivestreams.-publisher/","text":"workflow-rx2 / com.squareup.workflow.rx2 / org.reactivestreams.Publisher Extensions for org.reactivestreams.Publisher Name Summary asWorker fun T : Any Publisher out T ? .asWorker(): Worker T Creates a Worker from this Publisher ( Flowable is a Publisher ).","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/org.reactivestreams.-publisher/#extensions-for-orgreactivestreamspublisher","text":"Name Summary asWorker fun T : Any Publisher out T ? .asWorker(): Worker T Creates a Worker from this Publisher ( Flowable is a Publisher ).","title":"Extensions for org.reactivestreams.Publisher"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/org.reactivestreams.-publisher/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / org.reactivestreams.Publisher / asWorker asWorker inline fun reified T : Any Publisher out T ? .asWorker(): Worker T Creates a Worker from this Publisher ( Flowable is a Publisher ). The Publisher will be subscribed to when the Worker is started, and cancelled when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/org.reactivestreams.-publisher/as-worker/#asworker","text":"inline fun reified T : Any Publisher out T ? .asWorker(): Worker T Creates a Worker from this Publisher ( Flowable is a Publisher ). The Publisher will be subscribed to when the Worker is started, and cancelled when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow-testing/","text":"workflow-testing Packages Name Summary com.squareup.workflow.testing Index All Types","title":"Home"},{"location":"kotlin/api/workflow-testing/#packages","text":"Name Summary com.squareup.workflow.testing","title":"Packages"},{"location":"kotlin/api/workflow-testing/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-testing/alltypes/","text":"All Types Name Summary com.squareup.workflow.testing.MockChildWorkflow A mock implementation of Workflow for use in tests with testRender and TestRenderResult . com.squareup.workflow.testing.MockWorker A mock implementation of Worker for use in tests with testRender and TestRenderResult . com.squareup.workflow.StatefulWorkflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.StatelessWorkflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.TestRenderResult Represents the result of running a single render pass on a workflow. com.squareup.workflow.Worker (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.WorkerSink Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test. com.squareup.workflow.testing.WorkerTester com.squareup.workflow.Workflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.WorkflowTester Runs a Workflow and provides access to its renderings , outputs , and snapshots .","title":"Home"},{"location":"kotlin/api/workflow-testing/alltypes/#all-types","text":"Name Summary com.squareup.workflow.testing.MockChildWorkflow A mock implementation of Workflow for use in tests with testRender and TestRenderResult . com.squareup.workflow.testing.MockWorker A mock implementation of Worker for use in tests with testRender and TestRenderResult . com.squareup.workflow.StatefulWorkflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.StatelessWorkflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.TestRenderResult Represents the result of running a single render pass on a workflow. com.squareup.workflow.Worker (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.WorkerSink Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test. com.squareup.workflow.testing.WorkerTester com.squareup.workflow.Workflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.WorkflowTester Runs a Workflow and provides access to its renderings , outputs , and snapshots .","title":"All Types"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/","text":"workflow-testing / com.squareup.workflow.testing Package com.squareup.workflow.testing Types Name Summary MockChildWorkflow class MockChildWorkflow P, R : Workflow P , Nothing , R A mock implementation of Workflow for use in tests with testRender and TestRenderResult . MockWorker class MockWorker T : Worker T A mock implementation of Worker for use in tests with testRender and TestRenderResult . TestRenderResult class TestRenderResult StateT, OutputT : Any , RenderingT Represents the result of running a single render pass on a workflow. WorkerSink class WorkerSink T : Worker T Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test. WorkerTester interface WorkerTester T WorkflowTester class WorkflowTester PropsT, OutputT : Any , RenderingT Runs a Workflow and provides access to its renderings , outputs , and snapshots . Extensions for External Classes Name Summary com.squareup.workflow.StatefulWorkflow com.squareup.workflow.StatelessWorkflow com.squareup.workflow.Worker com.squareup.workflow.Workflow Functions Name Summary WorkerSink fun T WorkerSink(name: String ): WorkerSink T","title":"workflow-testing"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/#package-comsquareupworkflowtesting","text":"","title":"Package com.squareup.workflow.testing"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/#types","text":"Name Summary MockChildWorkflow class MockChildWorkflow P, R : Workflow P , Nothing , R A mock implementation of Workflow for use in tests with testRender and TestRenderResult . MockWorker class MockWorker T : Worker T A mock implementation of Worker for use in tests with testRender and TestRenderResult . TestRenderResult class TestRenderResult StateT, OutputT : Any , RenderingT Represents the result of running a single render pass on a workflow. WorkerSink class WorkerSink T : Worker T Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test. WorkerTester interface WorkerTester T WorkflowTester class WorkflowTester PropsT, OutputT : Any , RenderingT Runs a Workflow and provides access to its renderings , outputs , and snapshots .","title":"Types"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/#extensions-for-external-classes","text":"Name Summary com.squareup.workflow.StatefulWorkflow com.squareup.workflow.StatelessWorkflow com.squareup.workflow.Worker com.squareup.workflow.Workflow","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/#functions","text":"Name Summary WorkerSink fun T WorkerSink(name: String ): WorkerSink T","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/","text":"workflow-testing / com.squareup.workflow.testing / WorkerSink WorkerSink inline fun reified T WorkerSink(name: String ): WorkerSink T","title":" worker sink"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/#workersink","text":"inline fun reified T WorkerSink(name: String ): WorkerSink T","title":"WorkerSink"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/","text":"workflow-testing / com.squareup.workflow.testing / MockChildWorkflow MockChildWorkflow class MockChildWorkflow P, R : Workflow P , Nothing , R A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Note this workflow can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers. Parameters renderer - Function that is invoked in each render pass to calculate the rendering. See Also StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender Constructors Name Summary init MockChildWorkflow(rendering: R ) Creates a MockChildWorkflow that will always render the same value, rendering . MockChildWorkflow(renderer: ( P ) - R ) A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Properties Name Summary lastSeenProps val lastSeenProps: P Returns the last input value used to render this instance. Functions Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow P , *, Nothing , R Extension Functions Name Summary testFromStart fun T, PropsT, OutputT : Any , RenderingT Workflow PropsT , OutputT , RenderingT .testFromStart(props: PropsT , testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#mockchildworkflow","text":"class MockChildWorkflow P, R : Workflow P , Nothing , R A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Note this workflow can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers.","title":"MockChildWorkflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#parameters","text":"renderer - Function that is invoked in each render pass to calculate the rendering. See Also StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#constructors","text":"Name Summary init MockChildWorkflow(rendering: R ) Creates a MockChildWorkflow that will always render the same value, rendering . MockChildWorkflow(renderer: ( P ) - R ) A mock implementation of Workflow for use in tests with testRender and TestRenderResult .","title":"Constructors"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#properties","text":"Name Summary lastSeenProps val lastSeenProps: P Returns the last input value used to render this instance.","title":"Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#functions","text":"Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow P , *, Nothing , R","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#extension-functions","text":"Name Summary testFromStart fun T, PropsT, OutputT : Any , RenderingT Workflow PropsT , OutputT , RenderingT .testFromStart(props: PropsT , testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing.","title":"Extension Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/-init-/","text":"workflow-testing / com.squareup.workflow.testing / MockChildWorkflow / init init MockChildWorkflow(rendering: R ) Creates a MockChildWorkflow that will always render the same value, rendering . MockChildWorkflow(renderer: ( P ) - R ) A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Note this workflow can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers. Parameters renderer - Function that is invoked in each render pass to calculate the rendering. See Also StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":" init "},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/-init-/#init","text":"MockChildWorkflow(rendering: R ) Creates a MockChildWorkflow that will always render the same value, rendering . MockChildWorkflow(renderer: ( P ) - R ) A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Note this workflow can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/-init-/#parameters","text":"renderer - Function that is invoked in each render pass to calculate the rendering. See Also StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/as-stateful-workflow/","text":"workflow-testing / com.squareup.workflow.testing / MockChildWorkflow / asStatefulWorkflow asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow P , *, Nothing , R","title":"As stateful workflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/as-stateful-workflow/#asstatefulworkflow","text":"fun asStatefulWorkflow(): StatefulWorkflow P , *, Nothing , R","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/last-seen-props/","text":"workflow-testing / com.squareup.workflow.testing / MockChildWorkflow / lastSeenProps lastSeenProps val lastSeenProps: P Returns the last input value used to render this instance.","title":"Last seen props"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/last-seen-props/#lastseenprops","text":"val lastSeenProps: P Returns the last input value used to render this instance.","title":"lastSeenProps"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker MockWorker class MockWorker T : Worker T A mock implementation of Worker for use in tests with testRender and TestRenderResult . Note this Worker can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers. See Also com.squareup.workflow.StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender Constructors Name Summary init MockWorker(name: String ) A mock implementation of Worker for use in tests with testRender and TestRenderResult . Properties Name Summary name val name: String Functions Name Summary doesSameWorkAs fun doesSameWorkAs(otherWorker: Worker * ): Boolean run fun run(): Flow T Extension Functions Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#mockworker","text":"class MockWorker T : Worker T A mock implementation of Worker for use in tests with testRender and TestRenderResult . Note this Worker can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers. See Also com.squareup.workflow.StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":"MockWorker"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#constructors","text":"Name Summary init MockWorker(name: String ) A mock implementation of Worker for use in tests with testRender and TestRenderResult .","title":"Constructors"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#properties","text":"Name Summary name val name: String","title":"Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#functions","text":"Name Summary doesSameWorkAs fun doesSameWorkAs(otherWorker: Worker * ): Boolean run fun run(): Flow T","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#extension-functions","text":"Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Extension Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/-init-/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker / init init MockWorker(name: String ) A mock implementation of Worker for use in tests with testRender and TestRenderResult . Note this Worker can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers. See Also com.squareup.workflow.StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":" init "},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/-init-/#init","text":"MockWorker(name: String ) A mock implementation of Worker for use in tests with testRender and TestRenderResult . Note this Worker can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers. See Also com.squareup.workflow.StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/does-same-work-as/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker / doesSameWorkAs doesSameWorkAs fun doesSameWorkAs(otherWorker: Worker * ): Boolean","title":"Does same work as"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/does-same-work-as/#doessameworkas","text":"fun doesSameWorkAs(otherWorker: Worker * ): Boolean","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/name/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker / name name val name: String","title":"Name"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/run/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker / run run fun run(): Flow T","title":"Run"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/run/#run","text":"fun run(): Flow T","title":"run"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult TestRenderResult class TestRenderResult StateT, OutputT : Any , RenderingT Represents the result of running a single render pass on a workflow. Parameters rendering - The actual RenderingT value returned from the workflow s render method. state - The StateT passed into the render method. behavior - The Behavior generated from the RenderContext . Properties Name Summary rendering val rendering: RenderingT The actual RenderingT value returned from the workflow s render method. Functions Name Summary assertNoWorkersRan fun assertNoWorkersRan(): Unit Throws an AssertionError if any Worker s were run. assertNoWorkflowsRendered fun assertNoWorkflowsRendered(): Unit Throws an AssertionError if any Workflow s were rendered. assertRan fun T : Any Worker T .assertRan(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not run this worker with withKey . assertRendered fun CInput, COutputT : Any , CRenderingT Workflow CInput , COutputT , CRenderingT .assertRendered(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not render this@assertWorkflowRendered with withKey . getEventResult fun getEventResult(): Pair StateT , OutputT ? Call this after invoking one of the event handlers on your rendering to get the result of handling that event. handleOutput fun CPropsT, COutputT : Any , CRenderingT Workflow CPropsT , COutputT , CRenderingT .handleOutput(output: COutputT , key: String = \"\"): Pair StateT , OutputT ? Asserts that this workflow was rendered with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler. fun T : Any Worker T .handleOutput(output: T , key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/#testrenderresult","text":"class TestRenderResult StateT, OutputT : Any , RenderingT Represents the result of running a single render pass on a workflow.","title":"TestRenderResult"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/#parameters","text":"rendering - The actual RenderingT value returned from the workflow s render method. state - The StateT passed into the render method. behavior - The Behavior generated from the RenderContext .","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/#properties","text":"Name Summary rendering val rendering: RenderingT The actual RenderingT value returned from the workflow s render method.","title":"Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/#functions","text":"Name Summary assertNoWorkersRan fun assertNoWorkersRan(): Unit Throws an AssertionError if any Worker s were run. assertNoWorkflowsRendered fun assertNoWorkflowsRendered(): Unit Throws an AssertionError if any Workflow s were rendered. assertRan fun T : Any Worker T .assertRan(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not run this worker with withKey . assertRendered fun CInput, COutputT : Any , CRenderingT Workflow CInput , COutputT , CRenderingT .assertRendered(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not render this@assertWorkflowRendered with withKey . getEventResult fun getEventResult(): Pair StateT , OutputT ? Call this after invoking one of the event handlers on your rendering to get the result of handling that event. handleOutput fun CPropsT, COutputT : Any , CRenderingT Workflow CPropsT , COutputT , CRenderingT .handleOutput(output: COutputT , key: String = \"\"): Pair StateT , OutputT ? Asserts that this workflow was rendered with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler. fun T : Any Worker T .handleOutput(output: T , key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler.","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-no-workers-ran/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / assertNoWorkersRan assertNoWorkersRan fun assertNoWorkersRan(): Unit Throws an AssertionError if any Worker s were run.","title":"Assert no workers ran"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-no-workers-ran/#assertnoworkersran","text":"fun assertNoWorkersRan(): Unit Throws an AssertionError if any Worker s were run.","title":"assertNoWorkersRan"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-no-workflows-rendered/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / assertNoWorkflowsRendered assertNoWorkflowsRendered fun assertNoWorkflowsRendered(): Unit Throws an AssertionError if any Workflow s were rendered.","title":"Assert no workflows rendered"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-no-workflows-rendered/#assertnoworkflowsrendered","text":"fun assertNoWorkflowsRendered(): Unit Throws an AssertionError if any Workflow s were rendered.","title":"assertNoWorkflowsRendered"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-ran/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / assertRan assertRan fun T : Any Worker T .assertRan(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not run this worker with withKey .","title":"Assert ran"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-ran/#assertran","text":"fun T : Any Worker T .assertRan(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not run this worker with withKey .","title":"assertRan"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-rendered/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / assertRendered assertRendered fun CInput, COutputT : Any , CRenderingT Workflow CInput , COutputT , CRenderingT .assertRendered(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not render this@assertWorkflowRendered with withKey .","title":"Assert rendered"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-rendered/#assertrendered","text":"fun CInput, COutputT : Any , CRenderingT Workflow CInput , COutputT , CRenderingT .assertRendered(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not render this@assertWorkflowRendered with withKey .","title":"assertRendered"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/get-event-result/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / getEventResult getEventResult fun getEventResult(): Pair StateT , OutputT ? Call this after invoking one of the event handlers on your rendering to get the result of handling that event. E.g. 1 2 3 4 5 rendering.let { assertTrue(it is FooRendering) it.onFooEvent(Unit) val (state, output) = getEventResult() }","title":"Get event result"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/get-event-result/#geteventresult","text":"fun getEventResult(): Pair StateT , OutputT ? Call this after invoking one of the event handlers on your rendering to get the result of handling that event. E.g. 1 2 3 4 5 rendering.let { assertTrue(it is FooRendering) it.onFooEvent(Unit) val (state, output) = getEventResult() }","title":"getEventResult"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/handle-output/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / handleOutput handleOutput fun CPropsT, COutputT : Any , CRenderingT Workflow CPropsT , COutputT , CRenderingT .handleOutput(output: COutputT , key: String = \"\"): Pair StateT , OutputT ? Asserts that this workflow was rendered with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler. fun T : Any Worker T .handleOutput(output: T , key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler.","title":"Handle output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/handle-output/#handleoutput","text":"fun CPropsT, COutputT : Any , CRenderingT Workflow CPropsT , COutputT , CRenderingT .handleOutput(output: COutputT , key: String = \"\"): Pair StateT , OutputT ? Asserts that this workflow was rendered with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler. fun T : Any Worker T .handleOutput(output: T , key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler.","title":"handleOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/rendering/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / rendering rendering val rendering: RenderingT The actual RenderingT value returned from the workflow s render method.","title":"Rendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/rendering/#rendering","text":"val rendering: RenderingT The actual RenderingT value returned from the workflow s render method.","title":"rendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/","text":"workflow-testing / com.squareup.workflow.testing / WorkerSink WorkerSink class WorkerSink T : Worker T Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name . These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently. Parameters name - String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information. Constructors Name Summary init WorkerSink(name: String , type: KClass * ) Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test. Functions Name Summary doesSameWorkAs fun doesSameWorkAs(otherWorker: Worker * ): Boolean run fun run(): Flow T send fun send(value: T ): Unit toString fun toString(): String Extension Functions Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/#workersink","text":"class WorkerSink T : Worker T Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name . These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently.","title":"WorkerSink"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/#parameters","text":"name - String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information.","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/#constructors","text":"Name Summary init WorkerSink(name: String , type: KClass * ) Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test.","title":"Constructors"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/#functions","text":"Name Summary doesSameWorkAs fun doesSameWorkAs(otherWorker: Worker * ): Boolean run fun run(): Flow T send fun send(value: T ): Unit toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/#extension-functions","text":"Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Extension Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/-init-/","text":"workflow-testing / com.squareup.workflow.testing / WorkerSink / init init WorkerSink(name: String , type: KClass * ) Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name . These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently. Parameters name - String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information.","title":" init "},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/-init-/#init","text":"WorkerSink(name: String , type: KClass * ) Implementation of Worker for integration tests (using testFromStart or testFromState ) that need to simply push values into the worker from the test. Instances of this class are considered equivalent if they have matching type and name . These workers can not be run concurrently \u2013 they may only be run by a single workflow at a time, although they may be run multiple times sequentially. The Flow returned by run will throw an exception if it is collected more than once concurrently.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/-init-/#parameters","text":"name - String used to distinguish this worker from other WorkerSink s being ran by the same workflow. Used to implement doesSameWorkAs , see the kdoc on that method for more information.","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/does-same-work-as/","text":"workflow-testing / com.squareup.workflow.testing / WorkerSink / doesSameWorkAs doesSameWorkAs fun doesSameWorkAs(otherWorker: Worker * ): Boolean","title":"Does same work as"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/does-same-work-as/#doessameworkas","text":"fun doesSameWorkAs(otherWorker: Worker * ): Boolean","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/run/","text":"workflow-testing / com.squareup.workflow.testing / WorkerSink / run run fun run(): Flow T","title":"Run"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/run/#run","text":"fun run(): Flow T","title":"run"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/send/","text":"workflow-testing / com.squareup.workflow.testing / WorkerSink / send send fun send(value: T ): Unit","title":"Send"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/send/#send","text":"fun send(value: T ): Unit","title":"send"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/to-string/","text":"workflow-testing / com.squareup.workflow.testing / WorkerSink / toString toString fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-sink/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester WorkerTester interface WorkerTester T Functions Name Summary assertFinished abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. assertNoOutput abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput . assertNotFinished abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished. cancelWorker abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it s finished cancelling (joined). getException abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it. nextOutput abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/#workertester","text":"interface WorkerTester T","title":"WorkerTester"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/#functions","text":"Name Summary assertFinished abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. assertNoOutput abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput . assertNotFinished abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished. cancelWorker abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it s finished cancelling (joined). getException abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it. nextOutput abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-finished/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / assertFinished assertFinished abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. Throws an AssertionError if an output was emitted.","title":"Assert finished"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-finished/#assertfinished","text":"abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. Throws an AssertionError if an output was emitted.","title":"assertFinished"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-no-output/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / assertNoOutput assertNoOutput abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput .","title":"Assert no output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-no-output/#assertnooutput","text":"abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput .","title":"assertNoOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-not-finished/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / assertNotFinished assertNotFinished abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished.","title":"Assert not finished"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-not-finished/#assertnotfinished","text":"abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished.","title":"assertNotFinished"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/cancel-worker/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / cancelWorker cancelWorker abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it s finished cancelling (joined).","title":"Cancel worker"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/cancel-worker/#cancelworker","text":"abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it s finished cancelling (joined).","title":"cancelWorker"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/get-exception/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / getException getException abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it.","title":"Get exception"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/get-exception/#getexception","text":"abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it.","title":"getException"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/next-output/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / nextOutput nextOutput abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"Next output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/next-output/#nextoutput","text":"abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"nextOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester WorkflowTester class WorkflowTester PropsT, OutputT : Any , RenderingT Runs a Workflow and provides access to its renderings , outputs , and snapshots . For each of renderings, outputs, and snapshots, this class gives you a few ways to access information about them: awaitNextRendering , awaitNextOutput , awaitNextSnapshot Block until something becomes available, and then return it. hasRendering , hasOutput , hasSnapshot Return true if the previous methods won t block. sendProps Send a new PropsT to the root workflow. Properties Name Summary hasOutput val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed. hasRendering val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed. hasSnapshot val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed. Functions Name Summary awaitNextOutput fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it. awaitNextRendering fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it. awaitNextSnapshot fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): Snapshot Blocks until the workflow emits a snapshot, then returns it. sendProps fun sendProps(input: PropsT ): Unit Sends input to the workflow. Companion Object Properties Name Summary DEFAULT_TIMEOUT_MS const val DEFAULT_TIMEOUT_MS: Long","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/#workflowtester","text":"class WorkflowTester PropsT, OutputT : Any , RenderingT Runs a Workflow and provides access to its renderings , outputs , and snapshots . For each of renderings, outputs, and snapshots, this class gives you a few ways to access information about them: awaitNextRendering , awaitNextOutput , awaitNextSnapshot Block until something becomes available, and then return it. hasRendering , hasOutput , hasSnapshot Return true if the previous methods won t block. sendProps Send a new PropsT to the root workflow.","title":"WorkflowTester"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/#properties","text":"Name Summary hasOutput val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed. hasRendering val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed. hasSnapshot val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/#functions","text":"Name Summary awaitNextOutput fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it. awaitNextRendering fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it. awaitNextSnapshot fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): Snapshot Blocks until the workflow emits a snapshot, then returns it. sendProps fun sendProps(input: PropsT ): Unit Sends input to the workflow.","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/#companion-object-properties","text":"Name Summary DEFAULT_TIMEOUT_MS const val DEFAULT_TIMEOUT_MS: Long","title":"Companion Object Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/-d-e-f-a-u-l-t_-t-i-m-e-o-u-t_-m-s/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / DEFAULT_TIMEOUT_MS DEFAULT_TIMEOUT_MS const val DEFAULT_TIMEOUT_MS: Long","title":" d e f a u l t  t i m e o u t  m s"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/-d-e-f-a-u-l-t_-t-i-m-e-o-u-t_-m-s/#default_timeout_ms","text":"const val DEFAULT_TIMEOUT_MS: Long","title":"DEFAULT_TIMEOUT_MS"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-output/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / awaitNextOutput awaitNextOutput fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it. Parameters timeoutMs - The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Await next output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-output/#awaitnextoutput","text":"fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it.","title":"awaitNextOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-output/#parameters","text":"timeoutMs - The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-rendering/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / awaitNextRendering awaitNextRendering fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it. Parameters timeoutMs - The maximum amount of time to wait for a rendering to be emitted. If null, WorkflowTester.DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple renderings, all but the most recent one will be dropped.","title":"Await next rendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-rendering/#awaitnextrendering","text":"fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it.","title":"awaitNextRendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-rendering/#parameters","text":"timeoutMs - The maximum amount of time to wait for a rendering to be emitted. If null, WorkflowTester.DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple renderings, all but the most recent one will be dropped.","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-snapshot/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / awaitNextSnapshot awaitNextSnapshot fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): Snapshot Blocks until the workflow emits a snapshot, then returns it. The returned snapshot will be the snapshot only of the root workflow. It will be null if snapshotState returned an empty Snapshot . Parameters timeoutMs - The maximum amount of time to wait for a snapshot to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple snapshots, all but the most recent one will be dropped.","title":"Await next snapshot"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-snapshot/#awaitnextsnapshot","text":"fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): Snapshot Blocks until the workflow emits a snapshot, then returns it. The returned snapshot will be the snapshot only of the root workflow. It will be null if snapshotState returned an empty Snapshot .","title":"awaitNextSnapshot"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-snapshot/#parameters","text":"timeoutMs - The maximum amount of time to wait for a snapshot to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple snapshots, all but the most recent one will be dropped.","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-output/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / hasOutput hasOutput val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed.","title":"Has output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-output/#hasoutput","text":"val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed.","title":"hasOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-rendering/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / hasRendering hasRendering val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed.","title":"Has rendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-rendering/#hasrendering","text":"val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed.","title":"hasRendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-snapshot/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / hasSnapshot hasSnapshot val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"Has snapshot"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-snapshot/#hassnapshot","text":"val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"hasSnapshot"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/send-props/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / sendProps sendProps fun sendProps(input: PropsT ): Unit Sends input to the workflow.","title":"Send props"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/send-props/#sendprops","text":"fun sendProps(input: PropsT ): Unit Sends input to the workflow.","title":"sendProps"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatefulWorkflow Extensions for com.squareup.workflow.StatefulWorkflow Name Summary test fun T, PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .test(props: PropsT , testParams: WorkflowTestParams StateT = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing. testRender fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRender(state: S , block: TestRenderResult S , O , R .() - Unit ): Unit fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRender(props: I , state: S , block: TestRenderResult S , O , R .() - Unit ): Unit Calls StatefulWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output. testRenderInitialState fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRenderInitialState(input: I , block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state for the input , then calls testRender with that state and passes through the TestRenderResult to block along with the initial state. fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRenderInitialState(block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state, then calls testRender with that state and passes through the TestRenderResult to block along with the initial state.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/#extensions-for-comsquareupworkflowstatefulworkflow","text":"Name Summary test fun T, PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .test(props: PropsT , testParams: WorkflowTestParams StateT = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing. testRender fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRender(state: S , block: TestRenderResult S , O , R .() - Unit ): Unit fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRender(props: I , state: S , block: TestRenderResult S , O , R .() - Unit ): Unit Calls StatefulWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output. testRenderInitialState fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRenderInitialState(input: I , block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state for the input , then calls testRender with that state and passes through the TestRenderResult to block along with the initial state. fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRenderInitialState(block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state, then calls testRender with that state and passes through the TestRenderResult to block along with the initial state.","title":"Extensions for com.squareup.workflow.StatefulWorkflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render-initial-state/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatefulWorkflow / testRenderInitialState testRenderInitialState fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRenderInitialState(input: I , block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state for the input , then calls testRender with that state and passes through the TestRenderResult to block along with the initial state. fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRenderInitialState(block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state, then calls testRender with that state and passes through the TestRenderResult to block along with the initial state.","title":"Test render initial state"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render-initial-state/#testrenderinitialstate","text":"fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRenderInitialState(input: I , block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state for the input , then calls testRender with that state and passes through the TestRenderResult to block along with the initial state. fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRenderInitialState(block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state, then calls testRender with that state and passes through the TestRenderResult to block along with the initial state.","title":"testRenderInitialState"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatefulWorkflow / testRender testRender fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRender(state: S , block: TestRenderResult S , O , R .() - Unit ): Unit fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRender(props: I , state: S , block: TestRenderResult S , O , R .() - Unit ): Unit Calls StatefulWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output. Mocking Child Workflows and Workers Child Workflow s should be stateless and not try to do anything with their RenderContext in their render method. The RenderContext they get is not a real one, and will throw an exception if it is used. In other words, the only thing child workflows can do is return a rendering. The MockChildWorkflow abstract class makes it easy to write fake workflows that meet these requirements, however you may use the normal ways of creating workflows too. Child Worker s should be instances of MockWorker . Use testRenderInitialState to automatically calculate the initial state from the input.","title":"Test render"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render/#testrender","text":"fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRender(state: S , block: TestRenderResult S , O , R .() - Unit ): Unit fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRender(props: I , state: S , block: TestRenderResult S , O , R .() - Unit ): Unit Calls StatefulWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output.","title":"testRender"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render/#mocking-child-workflows-and-workers","text":"Child Workflow s should be stateless and not try to do anything with their RenderContext in their render method. The RenderContext they get is not a real one, and will throw an exception if it is used. In other words, the only thing child workflows can do is return a rendering. The MockChildWorkflow abstract class makes it easy to write fake workflows that meet these requirements, however you may use the normal ways of creating workflows too. Child Worker s should be instances of MockWorker . Use testRenderInitialState to automatically calculate the initial state from the input.","title":"Mocking Child Workflows and Workers"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatefulWorkflow / test test @TestOnly fun T, PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .test(props: PropsT , testParams: WorkflowTestParams StateT = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"Test"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test/#test","text":"@TestOnly fun T, PropsT, StateT, OutputT : Any , RenderingT StatefulWorkflow PropsT , StateT , OutputT , RenderingT .test(props: PropsT , testParams: WorkflowTestParams StateT = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"test"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatelessWorkflow Extensions for com.squareup.workflow.StatelessWorkflow Name Summary testRender fun O : Any , R StatelessWorkflow Unit , O , R .testRender(block: TestRenderResult Unit , O , R .() - Unit ): Unit fun I, O : Any , R StatelessWorkflow I , O , R .testRender(input: I , block: TestRenderResult Unit , O , R .() - Unit ): Unit Calls StatelessWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/#extensions-for-comsquareupworkflowstatelessworkflow","text":"Name Summary testRender fun O : Any , R StatelessWorkflow Unit , O , R .testRender(block: TestRenderResult Unit , O , R .() - Unit ): Unit fun I, O : Any , R StatelessWorkflow I , O , R .testRender(input: I , block: TestRenderResult Unit , O , R .() - Unit ): Unit Calls StatelessWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output.","title":"Extensions for com.squareup.workflow.StatelessWorkflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/test-render/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatelessWorkflow / testRender testRender fun O : Any , R StatelessWorkflow Unit , O , R .testRender(block: TestRenderResult Unit , O , R .() - Unit ): Unit fun I, O : Any , R StatelessWorkflow I , O , R .testRender(input: I , block: TestRenderResult Unit , O , R .() - Unit ): Unit Calls StatelessWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output. Mocking Child Workflows and Workers Child Workflow s should be stateless and not try to do anything with their RenderContext in their render method. The RenderContext they get is not a real one, and will throw an exception if it is used. In other words, the only thing child workflows can do is return a rendering. The MockChildWorkflow abstract class makes it easy to write fake workflows that meet these requirements, however you may use the normal ways of creating workflows too. Child Worker s should be instances of MockWorker .","title":"Test render"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/test-render/#testrender","text":"fun O : Any , R StatelessWorkflow Unit , O , R .testRender(block: TestRenderResult Unit , O , R .() - Unit ): Unit fun I, O : Any , R StatelessWorkflow I , O , R .testRender(input: I , block: TestRenderResult Unit , O , R .() - Unit ): Unit Calls StatelessWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output.","title":"testRender"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/test-render/#mocking-child-workflows-and-workers","text":"Child Workflow s should be stateless and not try to do anything with their RenderContext in their render method. The RenderContext they get is not a real one, and will throw an exception if it is used. In other words, the only thing child workflows can do is return a rendering. The MockChildWorkflow abstract class makes it easy to write fake workflows that meet these requirements, however you may use the normal ways of creating workflows too. Child Worker s should be instances of MockWorker .","title":"Mocking Child Workflows and Workers"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-worker/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.Worker Extensions for com.squareup.workflow.Worker Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-worker/#extensions-for-comsquareupworkflowworker","text":"Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Extensions for com.squareup.workflow.Worker"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-worker/test/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.Worker / test test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Test"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-worker/test/#test","text":"fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"test"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-workflow/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.Workflow Extensions for com.squareup.workflow.Workflow Name Summary testFromStart fun T, PropsT, OutputT : Any , RenderingT Workflow PropsT , OutputT , RenderingT .testFromStart(props: PropsT , testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-workflow/#extensions-for-comsquareupworkflowworkflow","text":"Name Summary testFromStart fun T, PropsT, OutputT : Any , RenderingT Workflow PropsT , OutputT , RenderingT .testFromStart(props: PropsT , testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing.","title":"Extensions for com.squareup.workflow.Workflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-workflow/test-from-start/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.Workflow / testFromStart testFromStart @TestOnly fun T, PropsT, OutputT : Any , RenderingT Workflow PropsT , OutputT , RenderingT .testFromStart(props: PropsT , testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T @TestOnly fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"Test from start"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-workflow/test-from-start/#testfromstart","text":"@TestOnly fun T, PropsT, OutputT : Any , RenderingT Workflow PropsT , OutputT , RenderingT .testFromStart(props: PropsT , testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester PropsT , OutputT , RenderingT .() - T ): T @TestOnly fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(testParams: WorkflowTestParams Nothing = WorkflowTestParams(), context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"testFromStart"},{"location":"kotlin/api/workflow-tracing/","text":"workflow-tracing Packages Name Summary com.squareup.workflow.diagnostic.tracing Index All Types","title":"Home"},{"location":"kotlin/api/workflow-tracing/#packages","text":"Name Summary com.squareup.workflow.diagnostic.tracing","title":"Packages"},{"location":"kotlin/api/workflow-tracing/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-tracing/alltypes/","text":"All Types Name Summary com.squareup.workflow.diagnostic.tracing.MemoryStats Reports free/available memory. com.squareup.workflow.diagnostic.tracing.RuntimeMemoryStats A MemoryStats that reports memory stats using this Runtime instance. com.squareup.workflow.diagnostic.tracing.TracingDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"Home"},{"location":"kotlin/api/workflow-tracing/alltypes/#all-types","text":"Name Summary com.squareup.workflow.diagnostic.tracing.MemoryStats Reports free/available memory. com.squareup.workflow.diagnostic.tracing.RuntimeMemoryStats A MemoryStats that reports memory stats using this Runtime instance. com.squareup.workflow.diagnostic.tracing.TracingDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"All Types"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing Package com.squareup.workflow.diagnostic.tracing Types Name Summary MemoryStats interface MemoryStats Reports free/available memory. RuntimeMemoryStats object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance. TracingDiagnosticListener class TracingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Functions Name Summary TracingDiagnosticListener fun TracingDiagnosticListener(file: File , name: String = \"\"): TracingDiagnosticListener fun TracingDiagnosticListener(name: String = \"\", memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) - TraceEncoder): TracingDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"workflow-tracing"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/#package-comsquareupworkflowdiagnostictracing","text":"","title":"Package com.squareup.workflow.diagnostic.tracing"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/#types","text":"Name Summary MemoryStats interface MemoryStats Reports free/available memory. RuntimeMemoryStats object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance. TracingDiagnosticListener class TracingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"Types"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/#functions","text":"Name Summary TracingDiagnosticListener fun TracingDiagnosticListener(file: File , name: String = \"\"): TracingDiagnosticListener fun TracingDiagnosticListener(name: String = \"\", memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) - TraceEncoder): TracingDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"Functions"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener TracingDiagnosticListener fun TracingDiagnosticListener(file: File , name: String = \"\"): TracingDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Parameters file - The File to write the trace to. name - If non-empty, will be used to set the process name in the trace file. If empty, the workflow type is used for the process name. fun TracingDiagnosticListener(name: String = \"\", memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) - TraceEncoder): TracingDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Parameters name - If non-empty, will be used to set the process name in the trace file. If empty, the workflow type is used for the process name. encoderProvider - A function that returns a TraceEncoder that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in.","title":" tracing diagnostic listener"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/#tracingdiagnosticlistener","text":"fun TracingDiagnosticListener(file: File , name: String = \"\"): TracingDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"TracingDiagnosticListener"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/#parameters","text":"file - The File to write the trace to. name - If non-empty, will be used to set the process name in the trace file. If empty, the workflow type is used for the process name. fun TracingDiagnosticListener(name: String = \"\", memoryStats: MemoryStats = RuntimeMemoryStats, encoderProvider: (workflowScope: CoroutineScope) - TraceEncoder): TracingDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"Parameters"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/#parameters_1","text":"name - If non-empty, will be used to set the process name in the trace file. If empty, the workflow type is used for the process name. encoderProvider - A function that returns a TraceEncoder that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in.","title":"Parameters"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-memory-stats/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / MemoryStats MemoryStats interface MemoryStats Reports free/available memory. See Also RuntimeMemoryStats Functions Name Summary freeMemory abstract fun freeMemory(): Long totalMemory abstract fun totalMemory(): Long Inheritors Name Summary RuntimeMemoryStats object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance.","title":"Home"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-memory-stats/#memorystats","text":"interface MemoryStats Reports free/available memory. See Also RuntimeMemoryStats","title":"MemoryStats"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-memory-stats/#functions","text":"Name Summary freeMemory abstract fun freeMemory(): Long totalMemory abstract fun totalMemory(): Long","title":"Functions"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-memory-stats/#inheritors","text":"Name Summary RuntimeMemoryStats object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance.","title":"Inheritors"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-memory-stats/free-memory/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / MemoryStats / freeMemory freeMemory abstract fun freeMemory(): Long","title":"Free memory"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-memory-stats/free-memory/#freememory","text":"abstract fun freeMemory(): Long","title":"freeMemory"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-memory-stats/total-memory/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / MemoryStats / totalMemory totalMemory abstract fun totalMemory(): Long","title":"Total memory"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-memory-stats/total-memory/#totalmemory","text":"abstract fun totalMemory(): Long","title":"totalMemory"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-runtime-memory-stats/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / RuntimeMemoryStats RuntimeMemoryStats object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance. Functions Name Summary freeMemory fun freeMemory(): Long totalMemory fun totalMemory(): Long","title":"Home"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-runtime-memory-stats/#runtimememorystats","text":"object RuntimeMemoryStats : MemoryStats A MemoryStats that reports memory stats using this Runtime instance.","title":"RuntimeMemoryStats"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-runtime-memory-stats/#functions","text":"Name Summary freeMemory fun freeMemory(): Long totalMemory fun totalMemory(): Long","title":"Functions"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-runtime-memory-stats/free-memory/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / RuntimeMemoryStats / freeMemory freeMemory fun freeMemory(): Long Overrides MemoryStats.freeMemory","title":"Free memory"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-runtime-memory-stats/free-memory/#freememory","text":"fun freeMemory(): Long Overrides MemoryStats.freeMemory","title":"freeMemory"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-runtime-memory-stats/total-memory/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / RuntimeMemoryStats / totalMemory totalMemory fun totalMemory(): Long Overrides MemoryStats.totalMemory","title":"Total memory"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-runtime-memory-stats/total-memory/#totalmemory","text":"fun totalMemory(): Long Overrides MemoryStats.totalMemory","title":"totalMemory"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener TracingDiagnosticListener class TracingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Constructors Name Summary init TracingDiagnosticListener(memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) - TraceLogger) A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Functions Name Summary onAfterRenderPass fun onAfterRenderPass(rendering: Any ?): Unit onAfterSnapshotPass fun onAfterSnapshotPass(): Unit onAfterWorkflowRendered fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit onBeforeRenderPass fun onBeforeRenderPass(props: Any ?): Unit onBeforeSnapshotPass fun onBeforeSnapshotPass(): Unit onBeforeWorkflowRendered fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit onPropsChanged fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit onRuntimeStarted fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit onRuntimeStopped fun onRuntimeStopped(): Unit onSinkReceived fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit onWorkerOutput fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit onWorkerStarted fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit onWorkerStopped fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit onWorkflowAction fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit onWorkflowStarted fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit onWorkflowStopped fun onWorkflowStopped(workflowId: Long ): Unit","title":"Home"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/#tracingdiagnosticlistener","text":"class TracingDiagnosticListener : WorkflowDiagnosticListener A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"TracingDiagnosticListener"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/#constructors","text":"Name Summary init TracingDiagnosticListener(memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) - TraceLogger) A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"Constructors"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/#functions","text":"Name Summary onAfterRenderPass fun onAfterRenderPass(rendering: Any ?): Unit onAfterSnapshotPass fun onAfterSnapshotPass(): Unit onAfterWorkflowRendered fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit onBeforeRenderPass fun onBeforeRenderPass(props: Any ?): Unit onBeforeSnapshotPass fun onBeforeSnapshotPass(): Unit onBeforeWorkflowRendered fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit onPropsChanged fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit onRuntimeStarted fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit onRuntimeStopped fun onRuntimeStopped(): Unit onSinkReceived fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit onWorkerOutput fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit onWorkerStarted fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit onWorkerStopped fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit onWorkflowAction fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit onWorkflowStarted fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit onWorkflowStopped fun onWorkflowStopped(workflowId: Long ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/-init-/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / init init TracingDiagnosticListener(memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) - TraceLogger) A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing . Parameters loggerProvider - A function that returns a TraceLogger that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in, as well as the same workflow type description passed to WorkflowDiagnosticListener.onWorkflowStarted .","title":" init "},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/-init-/#init","text":"TracingDiagnosticListener(memoryStats: MemoryStats = RuntimeMemoryStats, loggerProvider: (workflowScope: CoroutineScope, workflowType: String ) - TraceLogger) A WorkflowDiagnosticListener that generates a trace file that can be viewed in Chrome by visiting chrome://tracing .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/-init-/#parameters","text":"loggerProvider - A function that returns a TraceLogger that will be used to write trace events. The function gets the CoroutineScope that the workflow runtime is running in, as well as the same workflow type description passed to WorkflowDiagnosticListener.onWorkflowStarted .","title":"Parameters"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-after-render-pass/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onAfterRenderPass onAfterRenderPass fun onAfterRenderPass(rendering: Any ?): Unit","title":"On after render pass"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-after-render-pass/#onafterrenderpass","text":"fun onAfterRenderPass(rendering: Any ?): Unit","title":"onAfterRenderPass"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-after-snapshot-pass/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onAfterSnapshotPass onAfterSnapshotPass fun onAfterSnapshotPass(): Unit","title":"On after snapshot pass"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-after-snapshot-pass/#onaftersnapshotpass","text":"fun onAfterSnapshotPass(): Unit","title":"onAfterSnapshotPass"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-after-workflow-rendered/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onAfterWorkflowRendered onAfterWorkflowRendered fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit","title":"On after workflow rendered"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-after-workflow-rendered/#onafterworkflowrendered","text":"fun onAfterWorkflowRendered(workflowId: Long , rendering: Any ?): Unit","title":"onAfterWorkflowRendered"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-before-render-pass/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onBeforeRenderPass onBeforeRenderPass fun onBeforeRenderPass(props: Any ?): Unit","title":"On before render pass"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-before-render-pass/#onbeforerenderpass","text":"fun onBeforeRenderPass(props: Any ?): Unit","title":"onBeforeRenderPass"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-before-snapshot-pass/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onBeforeSnapshotPass onBeforeSnapshotPass fun onBeforeSnapshotPass(): Unit","title":"On before snapshot pass"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-before-snapshot-pass/#onbeforesnapshotpass","text":"fun onBeforeSnapshotPass(): Unit","title":"onBeforeSnapshotPass"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-before-workflow-rendered/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onBeforeWorkflowRendered onBeforeWorkflowRendered fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit","title":"On before workflow rendered"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-before-workflow-rendered/#onbeforeworkflowrendered","text":"fun onBeforeWorkflowRendered(workflowId: Long , props: Any ?, state: Any ?): Unit","title":"onBeforeWorkflowRendered"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-props-changed/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onPropsChanged onPropsChanged fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit","title":"On props changed"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-props-changed/#onpropschanged","text":"fun onPropsChanged(workflowId: Long ?, oldProps: Any ?, newProps: Any ?, oldState: Any ?, newState: Any ?): Unit","title":"onPropsChanged"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-runtime-started/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onRuntimeStarted onRuntimeStarted fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit","title":"On runtime started"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-runtime-started/#onruntimestarted","text":"fun onRuntimeStarted(workflowScope: CoroutineScope, rootWorkflowType: String ): Unit","title":"onRuntimeStarted"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-runtime-stopped/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onRuntimeStopped onRuntimeStopped fun onRuntimeStopped(): Unit","title":"On runtime stopped"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-runtime-stopped/#onruntimestopped","text":"fun onRuntimeStopped(): Unit","title":"onRuntimeStopped"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-sink-received/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onSinkReceived onSinkReceived fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit","title":"On sink received"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-sink-received/#onsinkreceived","text":"fun onSinkReceived(workflowId: Long , action: WorkflowAction *, * ): Unit","title":"onSinkReceived"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-worker-output/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onWorkerOutput onWorkerOutput fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit","title":"On worker output"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-worker-output/#onworkeroutput","text":"fun onWorkerOutput(workerId: Long , parentWorkflowId: Long , output: Any ): Unit","title":"onWorkerOutput"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-worker-started/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onWorkerStarted onWorkerStarted fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit","title":"On worker started"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-worker-started/#onworkerstarted","text":"fun onWorkerStarted(workerId: Long , parentWorkflowId: Long , key: String , description: String ): Unit","title":"onWorkerStarted"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-worker-stopped/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onWorkerStopped onWorkerStopped fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit","title":"On worker stopped"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-worker-stopped/#onworkerstopped","text":"fun onWorkerStopped(workerId: Long , parentWorkflowId: Long ): Unit","title":"onWorkerStopped"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-workflow-action/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onWorkflowAction onWorkflowAction fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit","title":"On workflow action"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-workflow-action/#onworkflowaction","text":"fun onWorkflowAction(workflowId: Long , action: WorkflowAction *, * , oldState: Any ?, newState: Any ?, output: Any ?): Unit","title":"onWorkflowAction"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-workflow-started/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onWorkflowStarted onWorkflowStarted fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit","title":"On workflow started"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-workflow-started/#onworkflowstarted","text":"fun onWorkflowStarted(workflowId: Long , parentId: Long ?, workflowType: String , key: String , initialProps: Any ?, initialState: Any ?, restoredFromSnapshot: Boolean ): Unit","title":"onWorkflowStarted"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-workflow-stopped/","text":"workflow-tracing / com.squareup.workflow.diagnostic.tracing / TracingDiagnosticListener / onWorkflowStopped onWorkflowStopped fun onWorkflowStopped(workflowId: Long ): Unit","title":"On workflow stopped"},{"location":"kotlin/api/workflow-tracing/com.squareup.workflow.diagnostic.tracing/-tracing-diagnostic-listener/on-workflow-stopped/#onworkflowstopped","text":"fun onWorkflowStopped(workflowId: Long ): Unit","title":"onWorkflowStopped"},{"location":"kotlin/api/workflow-ui-android/","text":"workflow-ui-android Packages Name Summary com.squareup.workflow.ui com.squareup.workflow.ui.backstack Index All Types","title":"Home"},{"location":"kotlin/api/workflow-ui-android/#packages","text":"Name Summary com.squareup.workflow.ui com.squareup.workflow.ui.backstack","title":"Packages"},{"location":"kotlin/api/workflow-ui-android/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-ui-android/alltypes/","text":"All Types Name Summary com.squareup.workflow.ui.BackPressHandler A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. com.squareup.workflow.ui.backstack.BackStackConfig Informs views whether they re children of a BackStackContainer , and if so whether they re the first frame or not . com.squareup.workflow.ui.backstack.BackStackContainer A container view that can display a stream of BackStackScreen instances. com.squareup.workflow.ui.BuilderBinding A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) com.squareup.workflow.ui.ContainerHintKey Defines a value that can be provided by a ContainerHints map, specifying its type and default value. com.squareup.workflow.ui.ContainerHints Immutable, append-only map of values that a parent view can pass down to its children via android.view.View.showRendering et al. Allows container views to give descendants information about the context in which they re drawing. androidx.fragment.app.FragmentActivity (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.LayoutRunner A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderBinding if you want to build views from code rather than layouts.) com.squareup.workflow.ui.ModalContainer Base class for containers that show HasModals.modals in Dialog s. com.squareup.workflow.ui.ShowRenderingTag ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . android.view.View (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.ViewBinding Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. com.squareup.workflow.ui.ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. com.squareup.workflow.ui.ViewShowRendering Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering . com.squareup.workflow.ui.backstack.ViewStateCache Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets. com.squareup.workflow.ui.WorkflowFragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . com.squareup.workflow.ui.WorkflowLayout A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. com.squareup.workflow.ui.WorkflowRunner Uses a Workflow and a ViewRegistry to drive a WorkflowLayout . com.squareup.workflow.ui.WorkflowViewStub A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/alltypes/#all-types","text":"Name Summary com.squareup.workflow.ui.BackPressHandler A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. com.squareup.workflow.ui.backstack.BackStackConfig Informs views whether they re children of a BackStackContainer , and if so whether they re the first frame or not . com.squareup.workflow.ui.backstack.BackStackContainer A container view that can display a stream of BackStackScreen instances. com.squareup.workflow.ui.BuilderBinding A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) com.squareup.workflow.ui.ContainerHintKey Defines a value that can be provided by a ContainerHints map, specifying its type and default value. com.squareup.workflow.ui.ContainerHints Immutable, append-only map of values that a parent view can pass down to its children via android.view.View.showRendering et al. Allows container views to give descendants information about the context in which they re drawing. androidx.fragment.app.FragmentActivity (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.LayoutRunner A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderBinding if you want to build views from code rather than layouts.) com.squareup.workflow.ui.ModalContainer Base class for containers that show HasModals.modals in Dialog s. com.squareup.workflow.ui.ShowRenderingTag ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . android.view.View (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.ViewBinding Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. com.squareup.workflow.ui.ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. com.squareup.workflow.ui.ViewShowRendering Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering . com.squareup.workflow.ui.backstack.ViewStateCache Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets. com.squareup.workflow.ui.WorkflowFragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . com.squareup.workflow.ui.WorkflowLayout A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. com.squareup.workflow.ui.WorkflowRunner Uses a Workflow and a ViewRegistry to drive a WorkflowLayout . com.squareup.workflow.ui.WorkflowViewStub A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"All Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/","text":"workflow-ui-android / com.squareup.workflow.ui Package com.squareup.workflow.ui Types Name Summary BuilderBinding class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) ContainerHintKey abstract class ContainerHintKey T : Any Defines a value that can be provided by a ContainerHints map, specifying its type and default value. ContainerHints class ContainerHints Immutable, append-only map of values that a parent view can pass down to its children via android.view.View.showRendering et al. Allows container views to give descendants information about the context in which they re drawing. LayoutRunner interface LayoutRunner RenderingT : Any A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderBinding if you want to build views from code rather than layouts.) ModalContainer abstract class ModalContainer ModalRenderingT : Any : FrameLayout Base class for containers that show HasModals.modals in Dialog s. ShowRenderingTag data class ShowRenderingTag out RenderingT : Any ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . ViewBinding interface ViewBinding RenderingT : Any Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. ViewRegistry class ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. WorkflowFragment abstract class WorkflowFragment PropsT, OutputT : Any : Fragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . WorkflowLayout class WorkflowLayout : FrameLayout A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. WorkflowRunner interface WorkflowRunner out OutputT : Any Uses a Workflow and a ViewRegistry to drive a WorkflowLayout . WorkflowViewStub class WorkflowViewStub : View A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . Type Aliases Name Summary BackPressHandler typealias BackPressHandler = () - Unit A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. ViewShowRendering typealias ViewShowRendering RenderingT = ( RenderingT , ContainerHints ) - Unit Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering . Extensions for External Classes Name Summary android.view.View androidx.fragment.app.FragmentActivity","title":"workflow-ui-android"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/#package-comsquareupworkflowui","text":"","title":"Package com.squareup.workflow.ui"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/#types","text":"Name Summary BuilderBinding class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) ContainerHintKey abstract class ContainerHintKey T : Any Defines a value that can be provided by a ContainerHints map, specifying its type and default value. ContainerHints class ContainerHints Immutable, append-only map of values that a parent view can pass down to its children via android.view.View.showRendering et al. Allows container views to give descendants information about the context in which they re drawing. LayoutRunner interface LayoutRunner RenderingT : Any A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderBinding if you want to build views from code rather than layouts.) ModalContainer abstract class ModalContainer ModalRenderingT : Any : FrameLayout Base class for containers that show HasModals.modals in Dialog s. ShowRenderingTag data class ShowRenderingTag out RenderingT : Any ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . ViewBinding interface ViewBinding RenderingT : Any Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. ViewRegistry class ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. WorkflowFragment abstract class WorkflowFragment PropsT, OutputT : Any : Fragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . WorkflowLayout class WorkflowLayout : FrameLayout A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. WorkflowRunner interface WorkflowRunner out OutputT : Any Uses a Workflow and a ViewRegistry to drive a WorkflowLayout . WorkflowViewStub class WorkflowViewStub : View A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/#type-aliases","text":"Name Summary BackPressHandler typealias BackPressHandler = () - Unit A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window. ViewShowRendering typealias ViewShowRendering RenderingT = ( RenderingT , ContainerHints ) - Unit Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering .","title":"Type Aliases"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/#extensions-for-external-classes","text":"Name Summary android.view.View androidx.fragment.app.FragmentActivity","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-back-press-handler/","text":"workflow-ui-android / com.squareup.workflow.ui / BackPressHandler BackPressHandler typealias BackPressHandler = () - Unit A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window.","title":" back press handler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-back-press-handler/#backpresshandler","text":"typealias BackPressHandler = () - Unit A function passed to View.backPressedHandler , to be called if the back button is pressed while that view is attached to a window.","title":"BackPressHandler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewShowRendering ViewShowRendering typealias ViewShowRendering RenderingT = (@UnsafeVariance RenderingT , ContainerHints ) - Unit Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering .","title":" view show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-show-rendering/#viewshowrendering","text":"typealias ViewShowRendering RenderingT = (@UnsafeVariance RenderingT , ContainerHints ) - Unit Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering .","title":"ViewShowRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/","text":"workflow-ui-android / com.squareup.workflow.ui / BuilderBinding BuilderBinding class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Typical usage is to have a custom builder or view s companion object implement ViewBinding by delegating to a BuilderBinding , like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyView( context: Context, attributeSet: AttributeSet? ) : FrameLayout(context, attributeSet) { private fun update(rendering: MyRendering) { ... } companion object : ViewBuilder MyScreen by BuilderBinding( type = MyScreen::class, builder = { _, initialRendering, context, _ - MyView(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } This pattern allows us to assemble a ViewRegistry out of the custom classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( MyView, GamePlayLayoutRunner, GameOverLayoutRunner ) Note in particular the ViewRegistry argument to the viewConstructor lambda. This allows nested renderings to be displayed. It s simplest, and most typical, to pass the ViewRegistry to WorkflowViewStub.update to show nested renderings. When that s too constraining, more complex containers can call ViewRegistry.buildView , View.canShowRendering and View.showRendering directly. Constructors Name Summary init BuilderBinding(type: KClass RenderingT , viewConstructor: (viewRegistry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?) - View ) A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Properties Name Summary type val type: KClass RenderingT Functions Name Summary buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/#builderbinding","text":"class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Typical usage is to have a custom builder or view s companion object implement ViewBinding by delegating to a BuilderBinding , like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyView( context: Context, attributeSet: AttributeSet? ) : FrameLayout(context, attributeSet) { private fun update(rendering: MyRendering) { ... } companion object : ViewBuilder MyScreen by BuilderBinding( type = MyScreen::class, builder = { _, initialRendering, context, _ - MyView(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } This pattern allows us to assemble a ViewRegistry out of the custom classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( MyView, GamePlayLayoutRunner, GameOverLayoutRunner ) Note in particular the ViewRegistry argument to the viewConstructor lambda. This allows nested renderings to be displayed. It s simplest, and most typical, to pass the ViewRegistry to WorkflowViewStub.update to show nested renderings. When that s too constraining, more complex containers can call ViewRegistry.buildView , View.canShowRendering and View.showRendering directly.","title":"BuilderBinding"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/#constructors","text":"Name Summary init BuilderBinding(type: KClass RenderingT , viewConstructor: (viewRegistry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?) - View ) A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.)","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/#properties","text":"Name Summary type val type: KClass RenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/#functions","text":"Name Summary buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / BuilderBinding / init init BuilderBinding(type: KClass RenderingT , viewConstructor: (viewRegistry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?) - View ) A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Typical usage is to have a custom builder or view s companion object implement ViewBinding by delegating to a BuilderBinding , like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyView( context: Context, attributeSet: AttributeSet? ) : FrameLayout(context, attributeSet) { private fun update(rendering: MyRendering) { ... } companion object : ViewBuilder MyScreen by BuilderBinding( type = MyScreen::class, builder = { _, initialRendering, context, _ - MyView(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } This pattern allows us to assemble a ViewRegistry out of the custom classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( MyView, GamePlayLayoutRunner, GameOverLayoutRunner ) Note in particular the ViewRegistry argument to the viewConstructor lambda. This allows nested renderings to be displayed. It s simplest, and most typical, to pass the ViewRegistry to WorkflowViewStub.update to show nested renderings. When that s too constraining, more complex containers can call ViewRegistry.buildView , View.canShowRendering and View.showRendering directly.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/-init-/#init","text":"BuilderBinding(type: KClass RenderingT , viewConstructor: (viewRegistry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?) - View ) A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Typical usage is to have a custom builder or view s companion object implement ViewBinding by delegating to a BuilderBinding , like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyView( context: Context, attributeSet: AttributeSet? ) : FrameLayout(context, attributeSet) { private fun update(rendering: MyRendering) { ... } companion object : ViewBuilder MyScreen by BuilderBinding( type = MyScreen::class, builder = { _, initialRendering, context, _ - MyView(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } This pattern allows us to assemble a ViewRegistry out of the custom classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( MyView, GamePlayLayoutRunner, GameOverLayoutRunner ) Note in particular the ViewRegistry argument to the viewConstructor lambda. This allows nested renderings to be displayed. It s simplest, and most typical, to pass the ViewRegistry to WorkflowViewStub.update to show nested renderings. When that s too constraining, more complex containers can call ViewRegistry.buildView , View.canShowRendering and View.showRendering directly.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/build-view/","text":"workflow-ui-android / com.squareup.workflow.ui / BuilderBinding / buildView buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?): View Overrides ViewBinding.buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/build-view/#buildview","text":"fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?): View Overrides ViewBinding.buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/type/","text":"workflow-ui-android / com.squareup.workflow.ui / BuilderBinding / type type val type: KClass RenderingT Overrides ViewBinding.type","title":"Type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/type/#type","text":"val type: KClass RenderingT Overrides ViewBinding.type","title":"type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHintKey ContainerHintKey abstract class ContainerHintKey T : Any Defines a value that can be provided by a ContainerHints map, specifying its type and default value. Constructors Name Summary init ContainerHintKey(type: KClass T ) Defines a value that can be provided by a ContainerHints map, specifying its type and default value. Properties Name Summary default abstract val default: T Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString open fun toString(): String Inheritors Name Summary Companion companion object Companion : ContainerHintKey BackStackConfig","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/#containerhintkey","text":"abstract class ContainerHintKey T : Any Defines a value that can be provided by a ContainerHints map, specifying its type and default value.","title":"ContainerHintKey"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/#constructors","text":"Name Summary init ContainerHintKey(type: KClass T ) Defines a value that can be provided by a ContainerHints map, specifying its type and default value.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/#properties","text":"Name Summary default abstract val default: T","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString open fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/#inheritors","text":"Name Summary Companion companion object Companion : ContainerHintKey BackStackConfig","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHintKey / init init ContainerHintKey(type: KClass T ) Defines a value that can be provided by a ContainerHints map, specifying its type and default value.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/-init-/#init","text":"ContainerHintKey(type: KClass T ) Defines a value that can be provided by a ContainerHints map, specifying its type and default value.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/default/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHintKey / default default abstract val default: T","title":"Default"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/default/#default","text":"abstract val default: T","title":"default"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/equals/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHintKey / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/hash-code/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHintKey / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/to-string/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHintKey / toString toString open fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hint-key/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHints ContainerHints class ContainerHints Immutable, append-only map of values that a parent view can pass down to its children via android.view.View.showRendering et al. Allows container views to give descendants information about the context in which they re drawing. Constructors Name Summary init ContainerHints() Functions Name Summary equals fun equals(other: Any ?): Boolean get operator fun T : Any get(key: ContainerHintKey T ): T hashCode fun hashCode(): Int plus operator fun T : Any plus(pair: Pair ContainerHintKey T , T ): ContainerHints operator fun plus(other: ContainerHints ): ContainerHints toString fun toString(): String","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/#containerhints","text":"class ContainerHints Immutable, append-only map of values that a parent view can pass down to its children via android.view.View.showRendering et al. Allows container views to give descendants information about the context in which they re drawing.","title":"ContainerHints"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/#constructors","text":"Name Summary init ContainerHints()","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean get operator fun T : Any get(key: ContainerHintKey T ): T hashCode fun hashCode(): Int plus operator fun T : Any plus(pair: Pair ContainerHintKey T , T ): ContainerHints operator fun plus(other: ContainerHints ): ContainerHints toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHints / init init ContainerHints()","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/-init-/#init","text":"ContainerHints()","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/equals/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHints / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/get/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHints / get get operator fun T : Any get(key: ContainerHintKey T ): T","title":"Get"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/get/#get","text":"operator fun T : Any get(key: ContainerHintKey T ): T","title":"get"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/hash-code/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHints / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/plus/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHints / plus plus operator fun T : Any plus(pair: Pair ContainerHintKey T , T ): ContainerHints operator fun plus(other: ContainerHints ): ContainerHints","title":"Plus"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/plus/#plus","text":"operator fun T : Any plus(pair: Pair ContainerHintKey T , T ): ContainerHints operator fun plus(other: ContainerHints ): ContainerHints","title":"plus"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/to-string/","text":"workflow-ui-android / com.squareup.workflow.ui / ContainerHints / toString toString fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-container-hints/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner LayoutRunner interface LayoutRunner RenderingT : Any A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderBinding if you want to build views from code rather than layouts.) Typical usage is to have a LayoutRunner s companion object implement ViewBinding by delegating to LayoutRunner.bind , specifying the layout resource it expects to drive. class HelloLayoutRunner(view: View) : LayoutRunner { private val messageView: TextView = view.findViewById(R.id.hello_message) 1 2 3 4 5 6 7 8 override fun showRendering(rendering: Rendering) { messageView.text = rendering.message messageView.setOnClickListener { rendering.onClick(Unit) } } companion object : ViewBinding Rendering by bind( R.layout.hello_goodbye_layout, ::HelloLayoutRunner ) } This pattern allows us to assemble a ViewRegistry out of the LayoutRunner classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) Every LayoutRunner must have a constructor that accepts a View as its first argument. The constructor may also have a second ViewRegistry argument, to allow nested renderings to be displayed in nested views. It s simplest, and most typical, to pass the ViewRegistry to WorkflowViewStub.update to show nested renderings. When that s too constraining, more complex containers can call ViewRegistry.buildView , View.canShowRendering and View.showRendering directly. Types Name Summary Binding class Binding RenderingT : Any : ViewBinding RenderingT Functions Name Summary showRendering abstract fun showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit Companion Object Functions Name Summary bind fun RenderingT : Any bind(layoutId: Int , constructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ): ViewBinding RenderingT fun RenderingT : Any bind(layoutId: Int , constructor: ( View ) - LayoutRunner RenderingT ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . bindNoRunner fun RenderingT : Any bindNoRunner(layoutId: Int ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/#layoutrunner","text":"interface LayoutRunner RenderingT : Any A delegate that implements a showRendering method to be called when a workflow rendering of type RenderingT is ready to be displayed in a view inflated from a layout resource by a ViewRegistry . (Use BuilderBinding if you want to build views from code rather than layouts.) Typical usage is to have a LayoutRunner s companion object implement ViewBinding by delegating to LayoutRunner.bind , specifying the layout resource it expects to drive. class HelloLayoutRunner(view: View) : LayoutRunner { private val messageView: TextView = view.findViewById(R.id.hello_message) 1 2 3 4 5 6 7 8 override fun showRendering(rendering: Rendering) { messageView.text = rendering.message messageView.setOnClickListener { rendering.onClick(Unit) } } companion object : ViewBinding Rendering by bind( R.layout.hello_goodbye_layout, ::HelloLayoutRunner ) } This pattern allows us to assemble a ViewRegistry out of the LayoutRunner classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) Every LayoutRunner must have a constructor that accepts a View as its first argument. The constructor may also have a second ViewRegistry argument, to allow nested renderings to be displayed in nested views. It s simplest, and most typical, to pass the ViewRegistry to WorkflowViewStub.update to show nested renderings. When that s too constraining, more complex containers can call ViewRegistry.buildView , View.canShowRendering and View.showRendering directly.","title":"LayoutRunner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/#types","text":"Name Summary Binding class Binding RenderingT : Any : ViewBinding RenderingT","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/#functions","text":"Name Summary showRendering abstract fun showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/#companion-object-functions","text":"Name Summary bind fun RenderingT : Any bind(layoutId: Int , constructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ): ViewBinding RenderingT fun RenderingT : Any bind(layoutId: Int , constructor: ( View ) - LayoutRunner RenderingT ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . bindNoRunner fun RenderingT : Any bindNoRunner(layoutId: Int ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views.","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/bind-no-runner/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / bindNoRunner bindNoRunner inline fun reified RenderingT : Any bindNoRunner(@LayoutRes layoutId: Int ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views.","title":"Bind no runner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/bind-no-runner/#bindnorunner","text":"inline fun reified RenderingT : Any bindNoRunner(@LayoutRes layoutId: Int ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views.","title":"bindNoRunner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/bind/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / bind bind inline fun reified RenderingT : Any bind(@LayoutRes layoutId: Int , noinline constructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ): ViewBinding RenderingT inline fun reified RenderingT : Any bind(@LayoutRes layoutId: Int , noinline constructor: ( View ) - LayoutRunner RenderingT ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor .","title":"Bind"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/bind/#bind","text":"inline fun reified RenderingT : Any bind(@LayoutRes layoutId: Int , noinline constructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ): ViewBinding RenderingT inline fun reified RenderingT : Any bind(@LayoutRes layoutId: Int , noinline constructor: ( View ) - LayoutRunner RenderingT ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor .","title":"bind"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / showRendering showRendering abstract fun showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit","title":"Show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/show-rendering/#showrendering","text":"abstract fun showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit","title":"showRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / Binding Binding class Binding RenderingT : Any : ViewBinding RenderingT Constructors Name Summary init Binding(type: KClass RenderingT , layoutId: Int , runnerConstructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ) Properties Name Summary type val type: KClass RenderingT Functions Name Summary buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/#binding","text":"class Binding RenderingT : Any : ViewBinding RenderingT","title":"Binding"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/#constructors","text":"Name Summary init Binding(type: KClass RenderingT , layoutId: Int , runnerConstructor: ( View , ViewRegistry ) - LayoutRunner RenderingT )","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/#properties","text":"Name Summary type val type: KClass RenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/#functions","text":"Name Summary buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / Binding / init init Binding(type: KClass RenderingT , @LayoutRes layoutId: Int , runnerConstructor: ( View , ViewRegistry ) - LayoutRunner RenderingT )","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/-init-/#init","text":"Binding(type: KClass RenderingT , @LayoutRes layoutId: Int , runnerConstructor: ( View , ViewRegistry ) - LayoutRunner RenderingT )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/build-view/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / Binding / buildView buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?): View Overrides ViewBinding.buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/build-view/#buildview","text":"fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ?): View Overrides ViewBinding.buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/type/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / Binding / type type val type: KClass RenderingT Overrides ViewBinding.type","title":"Type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/type/#type","text":"val type: KClass RenderingT Overrides ViewBinding.type","title":"type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer ModalContainer abstract class ModalContainer ModalRenderingT : Any : FrameLayout Base class for containers that show HasModals.modals in Dialog s. The concrete implementations returned by the factory methods forAlertContainerScreen and forContainerScreen should cover many specific needs, and where those are too limiting subclasses are simple to create. Parameters ModalRenderingT - the type of the nested renderings to be shown in a dialog window. Types Name Summary DialogRef data class DialogRef ModalRenderingT : Any Constructors Name Summary init ModalContainer(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) Base class for containers that show HasModals.modals in Dialog s. Properties Name Summary registry lateinit var registry: ViewRegistry Functions Name Summary buildDialog abstract fun buildDialog(initialModalRendering: ModalRenderingT , initialContainerHints: ContainerHints , viewRegistry: ViewRegistry ): ModalContainer.DialogRef ModalRenderingT Called to create (but not show) a Dialog to render initialModalRendering . onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable ): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable update fun update(newScreen: HasModals *, ModalRenderingT , containerHints: ContainerHints ): Unit updateDialog abstract fun updateDialog(dialogRef: ModalContainer.DialogRef ModalRenderingT ): Unit Companion Object Functions Name Summary forAlertContainerScreen fun forAlertContainerScreen(dialogThemeResId: Int = 0): ViewBinding AlertContainerScreen * Creates a ViewBinding to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. forContainerScreen fun H : HasModals *, * forContainerScreen(id: Int , dialogThemeResId: Int = 0, modalDecorator: ( View ) - View = { it }): ViewBinding H Creates a ViewBinding for modal container screens of type H . Extension Properties Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. Extension Functions Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#modalcontainer","text":"abstract class ModalContainer ModalRenderingT : Any : FrameLayout Base class for containers that show HasModals.modals in Dialog s. The concrete implementations returned by the factory methods forAlertContainerScreen and forContainerScreen should cover many specific needs, and where those are too limiting subclasses are simple to create.","title":"ModalContainer"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#parameters","text":"ModalRenderingT - the type of the nested renderings to be shown in a dialog window.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#types","text":"Name Summary DialogRef data class DialogRef ModalRenderingT : Any","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#constructors","text":"Name Summary init ModalContainer(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) Base class for containers that show HasModals.modals in Dialog s.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#properties","text":"Name Summary registry lateinit var registry: ViewRegistry","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#functions","text":"Name Summary buildDialog abstract fun buildDialog(initialModalRendering: ModalRenderingT , initialContainerHints: ContainerHints , viewRegistry: ViewRegistry ): ModalContainer.DialogRef ModalRenderingT Called to create (but not show) a Dialog to render initialModalRendering . onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable ): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable update fun update(newScreen: HasModals *, ModalRenderingT , containerHints: ContainerHints ): Unit updateDialog abstract fun updateDialog(dialogRef: ModalContainer.DialogRef ModalRenderingT ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#companion-object-functions","text":"Name Summary forAlertContainerScreen fun forAlertContainerScreen(dialogThemeResId: Int = 0): ViewBinding AlertContainerScreen * Creates a ViewBinding to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. forContainerScreen fun H : HasModals *, * forContainerScreen(id: Int , dialogThemeResId: Int = 0, modalDecorator: ( View ) - View = { it }): ViewBinding H Creates a ViewBinding for modal container screens of type H .","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#extension-properties","text":"Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window.","title":"Extension Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#extension-functions","text":"Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Extension Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / init init ModalContainer(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) Base class for containers that show HasModals.modals in Dialog s. The concrete implementations returned by the factory methods forAlertContainerScreen and forContainerScreen should cover many specific needs, and where those are too limiting subclasses are simple to create. Parameters ModalRenderingT - the type of the nested renderings to be shown in a dialog window.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-init-/#init","text":"ModalContainer(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) Base class for containers that show HasModals.modals in Dialog s. The concrete implementations returned by the factory methods forAlertContainerScreen and forContainerScreen should cover many specific needs, and where those are too limiting subclasses are simple to create.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-init-/#parameters","text":"ModalRenderingT - the type of the nested renderings to be shown in a dialog window.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/build-dialog/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / buildDialog buildDialog protected abstract fun buildDialog(initialModalRendering: ModalRenderingT , initialContainerHints: ContainerHints , viewRegistry: ViewRegistry ): ModalContainer.DialogRef ModalRenderingT Called to create (but not show) a Dialog to render initialModalRendering .","title":"Build dialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/build-dialog/#builddialog","text":"protected abstract fun buildDialog(initialModalRendering: ModalRenderingT , initialContainerHints: ContainerHints , viewRegistry: ViewRegistry ): ModalContainer.DialogRef ModalRenderingT Called to create (but not show) a Dialog to render initialModalRendering .","title":"buildDialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-alert-container-screen/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / forAlertContainerScreen forAlertContainerScreen fun forAlertContainerScreen(@StyleRes dialogThemeResId: Int = 0): ViewBinding AlertContainerScreen * Creates a ViewBinding to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. Parameters dialogThemeResId - the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context s default alert dialog theme.","title":"For alert container screen"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-alert-container-screen/#foralertcontainerscreen","text":"fun forAlertContainerScreen(@StyleRes dialogThemeResId: Int = 0): ViewBinding AlertContainerScreen * Creates a ViewBinding to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s.","title":"forAlertContainerScreen"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-alert-container-screen/#parameters","text":"dialogThemeResId - the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context s default alert dialog theme.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-container-screen/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / forContainerScreen forContainerScreen inline fun reified H : HasModals *, * forContainerScreen(@IdRes id: Int , @StyleRes dialogThemeResId: Int = 0, noinline modalDecorator: ( View ) - View = { it }): ViewBinding H Creates a ViewBinding for modal container screens of type H . Each view created for HasModals.modals will be shown in a Dialog whose window is set to size itself to WRAP_CONTENT (see android.view.Window.setLayout ). Two customization hooks are provided: you can specify a theme to be applied to the dialog window; and/or provide a function to decorate the view to set as the dialog s content . Parameters id - a unique identifier for containers of this type, allowing them to participate view persistence dialogThemeResId - a style resource describing the theme to use for dialog windows. Defaults to 0 to use the default dialog theme. modalDecorator - a function to apply to each modal view created before it is passed to android.app.Dialog.setContentView . Defaults to making no changes.","title":"For container screen"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-container-screen/#forcontainerscreen","text":"inline fun reified H : HasModals *, * forContainerScreen(@IdRes id: Int , @StyleRes dialogThemeResId: Int = 0, noinline modalDecorator: ( View ) - View = { it }): ViewBinding H Creates a ViewBinding for modal container screens of type H . Each view created for HasModals.modals will be shown in a Dialog whose window is set to size itself to WRAP_CONTENT (see android.view.Window.setLayout ). Two customization hooks are provided: you can specify a theme to be applied to the dialog window; and/or provide a function to decorate the view to set as the dialog s content .","title":"forContainerScreen"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-container-screen/#parameters","text":"id - a unique identifier for containers of this type, allowing them to participate view persistence dialogThemeResId - a style resource describing the theme to use for dialog windows. Defaults to 0 to use the default dialog theme. modalDecorator - a function to apply to each modal view created before it is passed to android.app.Dialog.setContentView . Defaults to making no changes.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-restore-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / onRestoreInstanceState onRestoreInstanceState protected open fun onRestoreInstanceState(state: Parcelable ): Unit","title":"On restore instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-restore-instance-state/#onrestoreinstancestate","text":"protected open fun onRestoreInstanceState(state: Parcelable ): Unit","title":"onRestoreInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-save-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / onSaveInstanceState onSaveInstanceState protected open fun onSaveInstanceState(): Parcelable","title":"On save instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-save-instance-state/#onsaveinstancestate","text":"protected open fun onSaveInstanceState(): Parcelable","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/registry/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / registry registry protected lateinit var registry: ViewRegistry","title":"Registry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/registry/#registry","text":"protected lateinit var registry: ViewRegistry","title":"registry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/update-dialog/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / updateDialog updateDialog protected abstract fun updateDialog(dialogRef: ModalContainer.DialogRef ModalRenderingT ): Unit","title":"Update dialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/update-dialog/#updatedialog","text":"protected abstract fun updateDialog(dialogRef: ModalContainer.DialogRef ModalRenderingT ): Unit","title":"updateDialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/update/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / update update protected fun update(newScreen: HasModals *, ModalRenderingT , containerHints: ContainerHints ): Unit","title":"Update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/update/#update","text":"protected fun update(newScreen: HasModals *, ModalRenderingT , containerHints: ContainerHints ): Unit","title":"update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef DialogRef protected data class DialogRef ModalRenderingT : Any Parameters extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality. Constructors Name Summary init DialogRef(modalRendering: ModalRenderingT , containerHints: ContainerHints , dialog: Dialog , extra: Any ? = null) Properties Name Summary containerHints val containerHints: ContainerHints dialog val dialog: Dialog extra val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality. modalRendering val modalRendering: ModalRenderingT Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#dialogref","text":"protected data class DialogRef ModalRenderingT : Any","title":"DialogRef"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#parameters","text":"extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#constructors","text":"Name Summary init DialogRef(modalRendering: ModalRenderingT , containerHints: ContainerHints , dialog: Dialog , extra: Any ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#properties","text":"Name Summary containerHints val containerHints: ContainerHints dialog val dialog: Dialog extra val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality. modalRendering val modalRendering: ModalRenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / init init DialogRef(modalRendering: ModalRenderingT , containerHints: ContainerHints , dialog: Dialog , extra: Any ? = null) Parameters extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/-init-/#init","text":"DialogRef(modalRendering: ModalRenderingT , containerHints: ContainerHints , dialog: Dialog , extra: Any ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/-init-/#parameters","text":"extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/container-hints/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / containerHints containerHints val containerHints: ContainerHints","title":"Container hints"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/container-hints/#containerhints","text":"val containerHints: ContainerHints","title":"containerHints"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/dialog/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / dialog dialog val dialog: Dialog","title":"Dialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/dialog/#dialog","text":"val dialog: Dialog","title":"dialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/equals/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/extra/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / extra extra val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"Extra"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/extra/#extra","text":"val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"extra"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/hash-code/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/modal-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / modalRendering modalRendering val modalRendering: ModalRenderingT","title":"Modal rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/modal-rendering/#modalrendering","text":"val modalRendering: ModalRenderingT","title":"modalRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/","text":"workflow-ui-android / com.squareup.workflow.ui / ShowRenderingTag ShowRenderingTag data class ShowRenderingTag out RenderingT : Any ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . Parameters showing - the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering. Constructors Name Summary init ShowRenderingTag(showing: RenderingT , showRendering: ViewShowRendering RenderingT ) ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . Properties Name Summary showing val showing: RenderingT the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering. showRendering val showRendering: ViewShowRendering RenderingT","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/#showrenderingtag","text":"data class ShowRenderingTag out RenderingT : Any ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering .","title":"ShowRenderingTag"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/#parameters","text":"showing - the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/#constructors","text":"Name Summary init ShowRenderingTag(showing: RenderingT , showRendering: ViewShowRendering RenderingT ) ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering .","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/#properties","text":"Name Summary showing val showing: RenderingT the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering. showRendering val showRendering: ViewShowRendering RenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ShowRenderingTag / init init ShowRenderingTag(showing: RenderingT , showRendering: ViewShowRendering RenderingT ) ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering . Parameters showing - the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/-init-/#init","text":"ShowRenderingTag(showing: RenderingT , showRendering: ViewShowRendering RenderingT ) ` * View tag that holds the function to make the view show instances of RenderingT , and the current rendering .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/-init-/#parameters","text":"showing - the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / ShowRenderingTag / showRendering showRendering val showRendering: ViewShowRendering RenderingT","title":"Show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/show-rendering/#showrendering","text":"val showRendering: ViewShowRendering RenderingT","title":"showRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/showing/","text":"workflow-ui-android / com.squareup.workflow.ui / ShowRenderingTag / showing showing val showing: RenderingT the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"Showing"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/showing/#showing","text":"val showing: RenderingT the current rendering. Used by canShowRendering to decide if the view can be updated with the next rendering.","title":"showing"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewBinding ViewBinding interface ViewBinding RenderingT : Any Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. Sets of bindings are gathered in ViewRegistry instances. Properties Name Summary type abstract val type: KClass RenderingT Functions Name Summary buildView abstract fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . Inheritors Name Summary Binding class Binding RenderingT : Any : ViewBinding RenderingT BuilderBinding class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Companion companion object Companion : ViewBinding BackStackScreen *","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/#viewbinding","text":"interface ViewBinding RenderingT : Any Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. Sets of bindings are gathered in ViewRegistry instances.","title":"ViewBinding"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/#properties","text":"Name Summary type abstract val type: KClass RenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/#functions","text":"Name Summary buildView abstract fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/#inheritors","text":"Name Summary Binding class Binding RenderingT : Any : ViewBinding RenderingT BuilderBinding class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows a ViewRegistry to create View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Companion companion object Companion : ViewBinding BackStackScreen *","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/build-view/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewBinding / buildView buildView abstract fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/build-view/#buildview","text":"abstract fun buildView(registry: ViewRegistry , initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/type/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewBinding / type type abstract val type: KClass RenderingT","title":"Type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/type/#type","text":"abstract val type: KClass RenderingT","title":"type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewRegistry ViewRegistry class ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. Two concrete ViewBinding implementations are provided: LayoutRunner.Binding , allowing the easy pairing of Android XML layout resources with LayoutRunner s to drive them. BuilderBinding , which can build views from code. Registries can be assembled via concatenation, making it easy to snap together screen sets. For example: 1 2 3 4 5 6 7 8 9 10 val AuthViewBindings = ViewRegistry( AuthorizingLayoutRunner, LoginLayoutRunner, SecondFactorLayoutRunner ) val TicTacToeViewBindings = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) val ApplicationViewBindings = ViewRegistry(ApplicationLayoutRunner) + AuthViewBindings + TicTacToeViewBindings In the above example, note that the companion object s of the various LayoutRunner classes honor a convention of implementing ViewBinding , in aid of this kind of assembly. See the class doc on LayoutRunner for details. Default bindings for the following types are provided, but can be overridden: Named * (Delegates to the registered binding for Named.wrapped .) BackStackScreen * AlertContainerScreen * (Use ModalContainer.forAlertContainerScreen to set a different dialog theme.) Constructors Name Summary init ViewRegistry(vararg bindings: ViewBinding * ) ViewRegistry(vararg registries: ViewRegistry ) Functions Name Summary buildView fun RenderingT : Any buildView(initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ? = null): View fun RenderingT : Any buildView(initialRendering: RenderingT , initialContainerHints: ContainerHints , container: ViewGroup ): View It is usually more convenient to use WorkflowViewStub than to call this method directly. plus operator fun RenderingT : Any plus(binding: ViewBinding RenderingT ): ViewRegistry operator fun plus(registry: ViewRegistry ): ViewRegistry","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/#viewregistry","text":"class ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. Two concrete ViewBinding implementations are provided: LayoutRunner.Binding , allowing the easy pairing of Android XML layout resources with LayoutRunner s to drive them. BuilderBinding , which can build views from code. Registries can be assembled via concatenation, making it easy to snap together screen sets. For example: 1 2 3 4 5 6 7 8 9 10 val AuthViewBindings = ViewRegistry( AuthorizingLayoutRunner, LoginLayoutRunner, SecondFactorLayoutRunner ) val TicTacToeViewBindings = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) val ApplicationViewBindings = ViewRegistry(ApplicationLayoutRunner) + AuthViewBindings + TicTacToeViewBindings In the above example, note that the companion object s of the various LayoutRunner classes honor a convention of implementing ViewBinding , in aid of this kind of assembly. See the class doc on LayoutRunner for details. Default bindings for the following types are provided, but can be overridden: Named * (Delegates to the registered binding for Named.wrapped .) BackStackScreen * AlertContainerScreen * (Use ModalContainer.forAlertContainerScreen to set a different dialog theme.)","title":"ViewRegistry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/#constructors","text":"Name Summary init ViewRegistry(vararg bindings: ViewBinding * ) ViewRegistry(vararg registries: ViewRegistry )","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/#functions","text":"Name Summary buildView fun RenderingT : Any buildView(initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ? = null): View fun RenderingT : Any buildView(initialRendering: RenderingT , initialContainerHints: ContainerHints , container: ViewGroup ): View It is usually more convenient to use WorkflowViewStub than to call this method directly. plus operator fun RenderingT : Any plus(binding: ViewBinding RenderingT ): ViewRegistry operator fun plus(registry: ViewRegistry ): ViewRegistry","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewRegistry / init init ViewRegistry(vararg bindings: ViewBinding * ) ViewRegistry(vararg registries: ViewRegistry )","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/-init-/#init","text":"ViewRegistry(vararg bindings: ViewBinding * ) ViewRegistry(vararg registries: ViewRegistry )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/build-view/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewRegistry / buildView buildView fun RenderingT : Any buildView(initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ? = null): View fun RenderingT : Any buildView(initialRendering: RenderingT , initialContainerHints: ContainerHints , container: ViewGroup ): View It is usually more convenient to use WorkflowViewStub than to call this method directly. Creates a View to display initialRendering , which can be updated via calls to View.showRendering . Exceptions IllegalArgumentException - if no binding can be find for type RenderingT IllegalStateException - if the matching ViewBinding fails to call View.bindShowRendering when constructing the view","title":"Build view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/build-view/#buildview","text":"fun RenderingT : Any buildView(initialRendering: RenderingT , initialContainerHints: ContainerHints , contextForNewView: Context , container: ViewGroup ? = null): View fun RenderingT : Any buildView(initialRendering: RenderingT , initialContainerHints: ContainerHints , container: ViewGroup ): View It is usually more convenient to use WorkflowViewStub than to call this method directly. Creates a View to display initialRendering , which can be updated via calls to View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/build-view/#exceptions","text":"IllegalArgumentException - if no binding can be find for type RenderingT IllegalStateException - if the matching ViewBinding fails to call View.bindShowRendering when constructing the view","title":"Exceptions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/plus/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewRegistry / plus plus operator fun RenderingT : Any plus(binding: ViewBinding RenderingT ): ViewRegistry operator fun plus(registry: ViewRegistry ): ViewRegistry","title":"Plus"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/plus/#plus","text":"operator fun RenderingT : Any plus(binding: ViewBinding RenderingT ): ViewRegistry operator fun plus(registry: ViewRegistry ): ViewRegistry","title":"plus"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment WorkflowFragment abstract class WorkflowFragment PropsT, OutputT : Any : Fragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . For a workflow with no inputs, or a static configuration, that s as simple as: 1 2 3 4 5 6 7 8 9 class HelloWorkflowFragment : WorkflowFragment Unit, Unit () { override fun onCreateWorkflow(): Config Unit, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), input = Unit ) } } A fragment to run a workflow whose configuration may need to be updated could provide a method like this: class HelloWorkflowFragment : WorkflowFragment HelloInput, Unit () { private val inputs = BehaviorSubject.createDefault(HelloInput.Fnord) 1 2 3 4 5 6 7 8 9 fun input(input: HelloInput) = inputs.onNext(input) override fun onCreateWorkflow(): Config HelloInput, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), inputs = inputs ) } } Constructors Name Summary init WorkflowFragment() A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . Properties Name Summary runner val runner: WorkflowRunner OutputT Provides subclasses with access to the products of the running Workflow . Safe to call after onActivityCreated . Functions Name Summary onActivityCreated open fun onActivityCreated(savedInstanceState: Bundle ?): Unit onCreateView fun onCreateView(inflater: LayoutInflater , container: ViewGroup ?, savedInstanceState: Bundle ?): View ? onCreateWorkflow abstract fun onCreateWorkflow(): WorkflowRunner.Config PropsT , OutputT Called from onActivityCreated , so it should be safe for implementations to call getActivity .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/#workflowfragment","text":"abstract class WorkflowFragment PropsT, OutputT : Any : Fragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . For a workflow with no inputs, or a static configuration, that s as simple as: 1 2 3 4 5 6 7 8 9 class HelloWorkflowFragment : WorkflowFragment Unit, Unit () { override fun onCreateWorkflow(): Config Unit, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), input = Unit ) } } A fragment to run a workflow whose configuration may need to be updated could provide a method like this: class HelloWorkflowFragment : WorkflowFragment HelloInput, Unit () { private val inputs = BehaviorSubject.createDefault(HelloInput.Fnord) 1 2 3 4 5 6 7 8 9 fun input(input: HelloInput) = inputs.onNext(input) override fun onCreateWorkflow(): Config HelloInput, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), inputs = inputs ) } }","title":"WorkflowFragment"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/#constructors","text":"Name Summary init WorkflowFragment() A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs .","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/#properties","text":"Name Summary runner val runner: WorkflowRunner OutputT Provides subclasses with access to the products of the running Workflow . Safe to call after onActivityCreated .","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/#functions","text":"Name Summary onActivityCreated open fun onActivityCreated(savedInstanceState: Bundle ?): Unit onCreateView fun onCreateView(inflater: LayoutInflater , container: ViewGroup ?, savedInstanceState: Bundle ?): View ? onCreateWorkflow abstract fun onCreateWorkflow(): WorkflowRunner.Config PropsT , OutputT Called from onActivityCreated , so it should be safe for implementations to call getActivity .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / init init WorkflowFragment() A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . For a workflow with no inputs, or a static configuration, that s as simple as: 1 2 3 4 5 6 7 8 9 class HelloWorkflowFragment : WorkflowFragment Unit, Unit () { override fun onCreateWorkflow(): Config Unit, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), input = Unit ) } } A fragment to run a workflow whose configuration may need to be updated could provide a method like this: class HelloWorkflowFragment : WorkflowFragment HelloInput, Unit () { private val inputs = BehaviorSubject.createDefault(HelloInput.Fnord) 1 2 3 4 5 6 7 8 9 fun input(input: HelloInput) = inputs.onNext(input) override fun onCreateWorkflow(): Config HelloInput, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), inputs = inputs ) } }","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/-init-/#init","text":"WorkflowFragment() A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . For a workflow with no inputs, or a static configuration, that s as simple as: 1 2 3 4 5 6 7 8 9 class HelloWorkflowFragment : WorkflowFragment Unit, Unit () { override fun onCreateWorkflow(): Config Unit, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), input = Unit ) } } A fragment to run a workflow whose configuration may need to be updated could provide a method like this: class HelloWorkflowFragment : WorkflowFragment HelloInput, Unit () { private val inputs = BehaviorSubject.createDefault(HelloInput.Fnord) 1 2 3 4 5 6 7 8 9 fun input(input: HelloInput) = inputs.onNext(input) override fun onCreateWorkflow(): Config HelloInput, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), inputs = inputs ) } }","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-activity-created/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / onActivityCreated onActivityCreated open fun onActivityCreated(savedInstanceState: Bundle ?): Unit","title":"On activity created"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-activity-created/#onactivitycreated","text":"open fun onActivityCreated(savedInstanceState: Bundle ?): Unit","title":"onActivityCreated"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-create-view/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / onCreateView onCreateView fun onCreateView(inflater: LayoutInflater , container: ViewGroup ?, savedInstanceState: Bundle ?): View ?","title":"On create view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-create-view/#oncreateview","text":"fun onCreateView(inflater: LayoutInflater , container: ViewGroup ?, savedInstanceState: Bundle ?): View ?","title":"onCreateView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-create-workflow/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / onCreateWorkflow onCreateWorkflow protected abstract fun onCreateWorkflow(): WorkflowRunner.Config PropsT , OutputT Called from onActivityCreated , so it should be safe for implementations to call getActivity .","title":"On create workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-create-workflow/#oncreateworkflow","text":"protected abstract fun onCreateWorkflow(): WorkflowRunner.Config PropsT , OutputT Called from onActivityCreated , so it should be safe for implementations to call getActivity .","title":"onCreateWorkflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/runner/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / runner runner protected val runner: WorkflowRunner OutputT Provides subclasses with access to the products of the running Workflow . Safe to call after onActivityCreated .","title":"Runner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/runner/#runner","text":"protected val runner: WorkflowRunner OutputT Provides subclasses with access to the products of the running Workflow . Safe to call after onActivityCreated .","title":"runner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout WorkflowLayout class WorkflowLayout : FrameLayout A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. Constructors Name Summary init WorkflowLayout(context: Context , attributeSet: AttributeSet ? = null) A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. Functions Name Summary onRestoreInstanceState fun onRestoreInstanceState(state: Parcelable ?): Unit onSaveInstanceState fun onSaveInstanceState(): Parcelable ? start fun start(renderings: Observable out Any , registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. Extension Properties Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. Extension Functions Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#workflowlayout","text":"class WorkflowLayout : FrameLayout A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":"WorkflowLayout"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#constructors","text":"Name Summary init WorkflowLayout(context: Context , attributeSet: AttributeSet ? = null) A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#functions","text":"Name Summary onRestoreInstanceState fun onRestoreInstanceState(state: Parcelable ?): Unit onSaveInstanceState fun onSaveInstanceState(): Parcelable ? start fun start(renderings: Observable out Any , registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one.","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#extension-properties","text":"Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window.","title":"Extension Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#extension-functions","text":"Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Extension Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout / init init WorkflowLayout(context: Context , attributeSet: AttributeSet ? = null) A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/-init-/#init","text":"WorkflowLayout(context: Context , attributeSet: AttributeSet ? = null) A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-restore-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout / onRestoreInstanceState onRestoreInstanceState protected fun onRestoreInstanceState(state: Parcelable ?): Unit","title":"On restore instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-restore-instance-state/#onrestoreinstancestate","text":"protected fun onRestoreInstanceState(state: Parcelable ?): Unit","title":"onRestoreInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-save-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout / onSaveInstanceState onSaveInstanceState protected fun onSaveInstanceState(): Parcelable ?","title":"On save instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-save-instance-state/#onsaveinstancestate","text":"protected fun onSaveInstanceState(): Parcelable ?","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/start/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout / start start fun start(renderings: Observable out Any , registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. Views created this way may make recursive calls to ViewRegistry.buildView to make children of their own to handle nested renderings.","title":"Start"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/start/#start","text":"fun start(renderings: Observable out Any , registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. Views created this way may make recursive calls to ViewRegistry.buildView to make children of their own to handle nested renderings.","title":"start"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner WorkflowRunner interface WorkflowRunner out OutputT : Any Uses a Workflow and a ViewRegistry to drive a WorkflowLayout . It is simplest to use Activity.setContentWorkflow or subclass WorkflowFragment rather than instantiate a WorkflowRunner directly. Types Name Summary Config class Config PropsT, OutputT : Any Properties Name Summary renderings abstract val renderings: Observable out Any A stream of the rendering values emitted by the running Workflow . result abstract val result: Maybe out OutputT Provides the first (and only) OutputT value emitted by the workflow, or nothing if it is canceled before emitting. viewRegistry abstract val viewRegistry: ViewRegistry Companion Object Functions Name Summary Config fun OutputT : Any Config(workflow: Workflow Unit , OutputT , Any , viewRegistry: ViewRegistry , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate, diagnosticListener: WorkflowDiagnosticListener? = null): WorkflowRunner.Config Unit , OutputT startWorkflow fun PropsT, OutputT : Any startWorkflow(activity: FragmentActivity, configure: () - WorkflowRunner.Config PropsT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given activity . fun PropsT, OutputT : Any startWorkflow(fragment: Fragment, configure: () - WorkflowRunner.Config PropsT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given fragment .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/#workflowrunner","text":"interface WorkflowRunner out OutputT : Any Uses a Workflow and a ViewRegistry to drive a WorkflowLayout . It is simplest to use Activity.setContentWorkflow or subclass WorkflowFragment rather than instantiate a WorkflowRunner directly.","title":"WorkflowRunner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/#types","text":"Name Summary Config class Config PropsT, OutputT : Any","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/#properties","text":"Name Summary renderings abstract val renderings: Observable out Any A stream of the rendering values emitted by the running Workflow . result abstract val result: Maybe out OutputT Provides the first (and only) OutputT value emitted by the workflow, or nothing if it is canceled before emitting. viewRegistry abstract val viewRegistry: ViewRegistry","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/#companion-object-functions","text":"Name Summary Config fun OutputT : Any Config(workflow: Workflow Unit , OutputT , Any , viewRegistry: ViewRegistry , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate, diagnosticListener: WorkflowDiagnosticListener? = null): WorkflowRunner.Config Unit , OutputT startWorkflow fun PropsT, OutputT : Any startWorkflow(activity: FragmentActivity, configure: () - WorkflowRunner.Config PropsT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given activity . fun PropsT, OutputT : Any startWorkflow(fragment: Fragment, configure: () - WorkflowRunner.Config PropsT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given fragment .","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config Config fun OutputT : Any Config(workflow: Workflow Unit , OutputT , Any , viewRegistry: ViewRegistry , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate, diagnosticListener: WorkflowDiagnosticListener? = null): WorkflowRunner.Config Unit , OutputT Parameters diagnosticListener - If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener .","title":" config"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#config","text":"fun OutputT : Any Config(workflow: Workflow Unit , OutputT , Any , viewRegistry: ViewRegistry , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate, diagnosticListener: WorkflowDiagnosticListener? = null): WorkflowRunner.Config Unit , OutputT","title":"Config"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#parameters","text":"diagnosticListener - If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener .","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/renderings/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / renderings renderings abstract val renderings: Observable out Any A stream of the rendering values emitted by the running Workflow .","title":"Renderings"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/renderings/#renderings","text":"abstract val renderings: Observable out Any A stream of the rendering values emitted by the running Workflow .","title":"renderings"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/result/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / result result abstract val result: Maybe out OutputT Provides the first (and only) OutputT value emitted by the workflow, or nothing if it is canceled before emitting. The output of the root workflow is treated as a result code, handy for use as a sign that the host Activity or Fragment should be finished. Thus, once a value is emitted the workflow is ended its output value is reported through this field.","title":"Result"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/result/#result","text":"abstract val result: Maybe out OutputT Provides the first (and only) OutputT value emitted by the workflow, or nothing if it is canceled before emitting. The output of the root workflow is treated as a result code, handy for use as a sign that the host Activity or Fragment should be finished. Thus, once a value is emitted the workflow is ended its output value is reported through this field.","title":"result"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/start-workflow/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / startWorkflow startWorkflow fun PropsT, OutputT : Any startWorkflow(activity: FragmentActivity, configure: () - WorkflowRunner.Config PropsT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given activity . It s probably more convenient to use FragmentActivity.setContentWorkflow rather than calling this method directly. Parameters configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread. fun PropsT, OutputT : Any startWorkflow(fragment: Fragment, configure: () - WorkflowRunner.Config PropsT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given fragment . It s probably more convenient to subclass WorkflowFragment rather than calling this method directly. Parameters configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread.","title":"Start workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/start-workflow/#startworkflow","text":"fun PropsT, OutputT : Any startWorkflow(activity: FragmentActivity, configure: () - WorkflowRunner.Config PropsT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given activity . It s probably more convenient to use FragmentActivity.setContentWorkflow rather than calling this method directly.","title":"startWorkflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/start-workflow/#parameters","text":"configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread. fun PropsT, OutputT : Any startWorkflow(fragment: Fragment, configure: () - WorkflowRunner.Config PropsT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given fragment . It s probably more convenient to subclass WorkflowFragment rather than calling this method directly.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/start-workflow/#parameters_1","text":"configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/view-registry/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / viewRegistry viewRegistry abstract val viewRegistry: ViewRegistry","title":"View registry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/view-registry/#viewregistry","text":"abstract val viewRegistry: ViewRegistry","title":"viewRegistry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config Config class Config PropsT, OutputT : Any Parameters diagnosticListener - If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener . Constructors Name Summary init Config(workflow: Workflow PropsT , OutputT , Any , viewRegistry: ViewRegistry , props: PropsT , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate, diagnosticListener: WorkflowDiagnosticListener? = null) Config(workflow: Workflow PropsT , OutputT , Any , viewRegistry: ViewRegistry , props: Flow PropsT , dispatcher: CoroutineDispatcher, diagnosticListener: WorkflowDiagnosticListener?) Properties Name Summary diagnosticListener val diagnosticListener: WorkflowDiagnosticListener? If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener . dispatcher val dispatcher: CoroutineDispatcher props val props: Flow PropsT viewRegistry val viewRegistry: ViewRegistry workflow val workflow: Workflow PropsT , OutputT , Any","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#config","text":"class Config PropsT, OutputT : Any","title":"Config"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#parameters","text":"diagnosticListener - If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener .","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#constructors","text":"Name Summary init Config(workflow: Workflow PropsT , OutputT , Any , viewRegistry: ViewRegistry , props: PropsT , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate, diagnosticListener: WorkflowDiagnosticListener? = null) Config(workflow: Workflow PropsT , OutputT , Any , viewRegistry: ViewRegistry , props: Flow PropsT , dispatcher: CoroutineDispatcher, diagnosticListener: WorkflowDiagnosticListener?)","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#properties","text":"Name Summary diagnosticListener val diagnosticListener: WorkflowDiagnosticListener? If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener . dispatcher val dispatcher: CoroutineDispatcher props val props: Flow PropsT viewRegistry val viewRegistry: ViewRegistry workflow val workflow: Workflow PropsT , OutputT , Any","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / init init Config(workflow: Workflow PropsT , OutputT , Any , viewRegistry: ViewRegistry , props: PropsT , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate, diagnosticListener: WorkflowDiagnosticListener? = null) Config(workflow: Workflow PropsT , OutputT , Any , viewRegistry: ViewRegistry , props: Flow PropsT , dispatcher: CoroutineDispatcher, diagnosticListener: WorkflowDiagnosticListener?) Parameters diagnosticListener - If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener .","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/-init-/#init","text":"Config(workflow: Workflow PropsT , OutputT , Any , viewRegistry: ViewRegistry , props: PropsT , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate, diagnosticListener: WorkflowDiagnosticListener? = null) Config(workflow: Workflow PropsT , OutputT , Any , viewRegistry: ViewRegistry , props: Flow PropsT , dispatcher: CoroutineDispatcher, diagnosticListener: WorkflowDiagnosticListener?)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/-init-/#parameters","text":"diagnosticListener - If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener .","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/diagnostic-listener/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / diagnosticListener diagnosticListener val diagnosticListener: WorkflowDiagnosticListener? If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener .","title":"Diagnostic listener"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/diagnostic-listener/#diagnosticlistener","text":"val diagnosticListener: WorkflowDiagnosticListener? If non-null, will receive all diagnostic events from the workflow runtime. See com.squareup.workflow.WorkflowSession.diagnosticListener .","title":"diagnosticListener"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/dispatcher/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / dispatcher dispatcher val dispatcher: CoroutineDispatcher","title":"Dispatcher"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher","title":"dispatcher"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/props/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / props props val props: Flow PropsT","title":"Props"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/props/#props","text":"val props: Flow PropsT","title":"props"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/view-registry/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / viewRegistry viewRegistry val viewRegistry: ViewRegistry","title":"View registry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/view-registry/#viewregistry","text":"val viewRegistry: ViewRegistry","title":"viewRegistry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/workflow/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / workflow workflow val workflow: Workflow PropsT , OutputT , Any","title":"Workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/workflow/#workflow","text":"val workflow: Workflow PropsT , OutputT , Any","title":"workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowViewStub WorkflowViewStub class WorkflowViewStub : View A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . Usage In the XML layout for your container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: 1 2 3 4 5 6 LinearLayout\u2026 com.squareup.workflow.ui.WorkflowViewStub android:id= @+id/child_stub / \u2026 Then in your LayoutRunner , get the ViewRegistry in your constructor pull the view out with findViewById like any other view and update it in your showRendering method: 1 2 3 4 5 6 7 8 9 10 class YourLayoutRunner( view: View, private val viewRegistry: ViewRegistry ) { private val child = view.findViewById WorkflowViewStub (R.id.child_stub) override fun showRendering(rendering: YourRendering) { child.update(rendering.childRendering, viewRegistry) } } Constructors Name Summary init WorkflowViewStub(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . Properties Name Summary actual var actual: View On-demand access to the delegate established by the last call to update , or this WorkflowViewStub instance if none has yet been set. Functions Name Summary update fun update(rendering: Any , containerHints: ContainerHints , registry: ViewRegistry ): View Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can t handle rendering , a new view is put in place. Extension Properties Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. Extension Functions Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/#workflowviewstub","text":"class WorkflowViewStub : View A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"WorkflowViewStub"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/#usage","text":"In the XML layout for your container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: 1 2 3 4 5 6 LinearLayout\u2026 com.squareup.workflow.ui.WorkflowViewStub android:id= @+id/child_stub / \u2026 Then in your LayoutRunner , get the ViewRegistry in your constructor pull the view out with findViewById like any other view and update it in your showRendering method: 1 2 3 4 5 6 7 8 9 10 class YourLayoutRunner( view: View, private val viewRegistry: ViewRegistry ) { private val child = view.findViewById WorkflowViewStub (R.id.child_stub) override fun showRendering(rendering: YourRendering) { child.update(rendering.childRendering, viewRegistry) } }","title":"Usage"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/#constructors","text":"Name Summary init WorkflowViewStub(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/#properties","text":"Name Summary actual var actual: View On-demand access to the delegate established by the last call to update , or this WorkflowViewStub instance if none has yet been set.","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/#functions","text":"Name Summary update fun update(rendering: Any , containerHints: ContainerHints , registry: ViewRegistry ): View Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can t handle rendering , a new view is put in place.","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/#extension-properties","text":"Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window.","title":"Extension Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/#extension-functions","text":"Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Extension Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowViewStub / init init WorkflowViewStub(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub . Usage In the XML layout for your container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: 1 2 3 4 5 6 LinearLayout\u2026 com.squareup.workflow.ui.WorkflowViewStub android:id= @+id/child_stub / \u2026 Then in your LayoutRunner , get the ViewRegistry in your constructor pull the view out with findViewById like any other view and update it in your showRendering method: 1 2 3 4 5 6 7 8 9 10 class YourLayoutRunner( view: View, private val viewRegistry: ViewRegistry ) { private val child = view.findViewById WorkflowViewStub (R.id.child_stub) override fun showRendering(rendering: YourRendering) { child.update(rendering.childRendering, viewRegistry) } }","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/-init-/#init","text":"WorkflowViewStub(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) A placeholder View that can replace itself with ones driven by workflow renderings, similar to android.view.ViewStub .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/-init-/#usage","text":"In the XML layout for your container view, place a WorkflowViewStub where you want child renderings to be displayed. E.g.: 1 2 3 4 5 6 LinearLayout\u2026 com.squareup.workflow.ui.WorkflowViewStub android:id= @+id/child_stub / \u2026 Then in your LayoutRunner , get the ViewRegistry in your constructor pull the view out with findViewById like any other view and update it in your showRendering method: 1 2 3 4 5 6 7 8 9 10 class YourLayoutRunner( view: View, private val viewRegistry: ViewRegistry ) { private val child = view.findViewById WorkflowViewStub (R.id.child_stub) override fun showRendering(rendering: YourRendering) { child.update(rendering.childRendering, viewRegistry) } }","title":"Usage"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/actual/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowViewStub / actual actual var actual: View On-demand access to the delegate established by the last call to update , or this WorkflowViewStub instance if none has yet been set.","title":"Actual"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/actual/#actual","text":"var actual: View On-demand access to the delegate established by the last call to update , or this WorkflowViewStub instance if none has yet been set.","title":"actual"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/update/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowViewStub / update update fun update(rendering: Any , containerHints: ContainerHints , registry: ViewRegistry ): View Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can t handle rendering , a new view is put in place. Exceptions IllegalArgumentException - if no binding can be find for the type of rendering IllegalStateException - if the matching ViewBinding fails to call View.bindShowRendering when constructing the view Return the view that showed rendering","title":"Update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/update/#update","text":"fun update(rendering: Any , containerHints: ContainerHints , registry: ViewRegistry ): View Replaces this view with one that can display rendering . If the receiver has already been replaced, updates the replacement if it canShowRendering . If the current replacement can t handle rendering , a new view is put in place.","title":"update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-view-stub/update/#exceptions","text":"IllegalArgumentException - if no binding can be find for the type of rendering IllegalStateException - if the matching ViewBinding fails to call View.bindShowRendering when constructing the view Return the view that showed rendering","title":"Exceptions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View Extensions for android.view.View Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/#extensions-for-androidviewview","text":"Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Extensions for android.view.View"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/back-pressed-handler/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / backPressedHandler backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. Implemented via a OnBackPressedCallback , making this a last-registered-first-served mechanism.","title":"Back pressed handler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/back-pressed-handler/#backpressedhandler","text":"var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. Implemented via a OnBackPressedCallback , making this a last-registered-first-served mechanism.","title":"backPressedHandler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/bind-show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / bindShowRendering bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Immediately invokes showRendering to display initialRendering . Intended for use by implementations of ViewBinding.buildView .","title":"Bind show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/bind-show-rendering/#bindshowrendering","text":"fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Immediately invokes showRendering to display initialRendering . Intended for use by implementations of ViewBinding.buildView .","title":"bindShowRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/can-show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / canShowRendering canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. True if this view is able to show rendering . Returns false if bindShowRendering has not been called, so it is always safe to call this method. Otherwise returns the compatibility of the initial rendering and the new one.","title":"Can show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/can-show-rendering/#canshowrendering","text":"fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. True if this view is able to show rendering . Returns false if bindShowRendering has not been called, so it is always safe to call this method. Otherwise returns the compatibility of the initial rendering and the new one.","title":"canShowRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/get-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / getRendering getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called.","title":"Get rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/get-rendering/#getrendering","text":"fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called.","title":"getRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/get-show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / getShowRendering getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called.","title":"Get show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/get-show-rendering/#getshowrendering","text":"fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called.","title":"getShowRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / showRendering showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. Sets the workflow rendering associated with this view, and displays it by invoking the ViewShowRendering function previously set by bindShowRendering . Exceptions IllegalStateException - if bindShowRendering has not been called.","title":"Show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/show-rendering/#showrendering","text":"fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. Sets the workflow rendering associated with this view, and displays it by invoking the ViewShowRendering function previously set by bindShowRendering .","title":"showRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/show-rendering/#exceptions","text":"IllegalStateException - if bindShowRendering has not been called.","title":"Exceptions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/","text":"workflow-ui-android / com.squareup.workflow.ui / androidx.fragment.app.FragmentActivity Extensions for androidx.fragment.app.FragmentActivity Name Summary setContentWorkflow fun PropsT, OutputT : Any FragmentActivity.setContentWorkflow(configure: () - WorkflowRunner.Config PropsT , OutputT , onResult: ( OutputT ) - Unit ): WorkflowRunner OutputT Call this method from FragmentActivity.onCreate , instead of FragmentActivity.setContentView . It creates a WorkflowRunner for this activity, if one doesn t already exist, and sets a view driven by that model as the content view. fun PropsT FragmentActivity.setContentWorkflow(configure: () - WorkflowRunner.Config PropsT , Nothing ): WorkflowRunner Nothing","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/#extensions-for-androidxfragmentappfragmentactivity","text":"Name Summary setContentWorkflow fun PropsT, OutputT : Any FragmentActivity.setContentWorkflow(configure: () - WorkflowRunner.Config PropsT , OutputT , onResult: ( OutputT ) - Unit ): WorkflowRunner OutputT Call this method from FragmentActivity.onCreate , instead of FragmentActivity.setContentView . It creates a WorkflowRunner for this activity, if one doesn t already exist, and sets a view driven by that model as the content view. fun PropsT FragmentActivity.setContentWorkflow(configure: () - WorkflowRunner.Config PropsT , Nothing ): WorkflowRunner Nothing","title":"Extensions for androidx.fragment.app.FragmentActivity"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/set-content-workflow/","text":"workflow-ui-android / com.squareup.workflow.ui / androidx.fragment.app.FragmentActivity / setContentWorkflow setContentWorkflow fun PropsT, OutputT : Any FragmentActivity.setContentWorkflow(configure: () - WorkflowRunner.Config PropsT , OutputT , onResult: ( OutputT ) - Unit ): WorkflowRunner OutputT Call this method from FragmentActivity.onCreate , instead of FragmentActivity.setContentView . It creates a WorkflowRunner for this activity, if one doesn t already exist, and sets a view driven by that model as the content view. Parameters configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread. onResult - function called with the first (and only) output emitted by the root workflow, handy for passing to FragmentActivity.setResult . The workflow is ended once it emits any values, so this is also a good place from which to call FragmentActivity.finish . Called only while the activity is active, and always called from the UI thread. fun PropsT FragmentActivity.setContentWorkflow(configure: () - WorkflowRunner.Config PropsT , Nothing ): WorkflowRunner Nothing","title":"Set content workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/set-content-workflow/#setcontentworkflow","text":"fun PropsT, OutputT : Any FragmentActivity.setContentWorkflow(configure: () - WorkflowRunner.Config PropsT , OutputT , onResult: ( OutputT ) - Unit ): WorkflowRunner OutputT Call this method from FragmentActivity.onCreate , instead of FragmentActivity.setContentView . It creates a WorkflowRunner for this activity, if one doesn t already exist, and sets a view driven by that model as the content view.","title":"setContentWorkflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/set-content-workflow/#parameters","text":"configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread. onResult - function called with the first (and only) output emitted by the root workflow, handy for passing to FragmentActivity.setResult . The workflow is ended once it emits any values, so this is also a good place from which to call FragmentActivity.finish . Called only while the activity is active, and always called from the UI thread. fun PropsT FragmentActivity.setContentWorkflow(configure: () - WorkflowRunner.Config PropsT , Nothing ): WorkflowRunner Nothing","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack Package com.squareup.workflow.ui.backstack Types Name Summary BackStackConfig enum class BackStackConfig Informs views whether they re children of a BackStackContainer , and if so whether they re the first frame or not . BackStackContainer open class BackStackContainer : FrameLayout A container view that can display a stream of BackStackScreen instances. ViewStateCache class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/#package-comsquareupworkflowuibackstack","text":"","title":"Package com.squareup.workflow.ui.backstack"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/#types","text":"Name Summary BackStackConfig enum class BackStackConfig Informs views whether they re children of a BackStackContainer , and if so whether they re the first frame or not . BackStackContainer open class BackStackContainer : FrameLayout A container view that can display a stream of BackStackScreen instances. ViewStateCache class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets.","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackConfig BackStackConfig enum class BackStackConfig Informs views whether they re children of a BackStackContainer , and if so whether they re the first frame or not . Types Name Summary Companion companion object Companion : ContainerHintKey BackStackConfig Enum Values Name Summary None There is no BackStackContainer above here. First This rendering is the first frame in a com.squareup.workflow.ui.BackStackScreen . Useful as a hint to disable go back behavior, or replace it with go up behavior. Other This rendering is in a com.squareup.workflow.ui.BackStackScreen but is not the first frame. Useful as a hint to enable go back behavior. Companion Object Properties Name Summary default val default: BackStackConfig","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/#backstackconfig","text":"enum class BackStackConfig Informs views whether they re children of a BackStackContainer , and if so whether they re the first frame or not .","title":"BackStackConfig"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/#types","text":"Name Summary Companion companion object Companion : ContainerHintKey BackStackConfig","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/#enum-values","text":"Name Summary None There is no BackStackContainer above here. First This rendering is the first frame in a com.squareup.workflow.ui.BackStackScreen . Useful as a hint to disable go back behavior, or replace it with go up behavior. Other This rendering is in a com.squareup.workflow.ui.BackStackScreen but is not the first frame. Useful as a hint to enable go back behavior.","title":"Enum Values"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/#companion-object-properties","text":"Name Summary default val default: BackStackConfig","title":"Companion Object Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-first/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackConfig / First First First This rendering is the first frame in a com.squareup.workflow.ui.BackStackScreen . Useful as a hint to disable go back behavior, or replace it with go up behavior.","title":" first"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-first/#first","text":"First This rendering is the first frame in a com.squareup.workflow.ui.BackStackScreen . Useful as a hint to disable go back behavior, or replace it with go up behavior.","title":"First"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-none/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackConfig / None None None There is no BackStackContainer above here.","title":" none"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-none/#none","text":"None There is no BackStackContainer above here.","title":"None"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-other/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackConfig / Other Other Other This rendering is in a com.squareup.workflow.ui.BackStackScreen but is not the first frame. Useful as a hint to enable go back behavior.","title":" other"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-other/#other","text":"Other This rendering is in a com.squareup.workflow.ui.BackStackScreen but is not the first frame. Useful as a hint to enable go back behavior.","title":"Other"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/default/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackConfig / default default val default: BackStackConfig","title":"Default"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/default/#default","text":"val default: BackStackConfig","title":"default"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-companion/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackConfig / Companion Companion companion object Companion : ContainerHintKey BackStackConfig Inherited Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString open fun toString(): String Companion Object Properties Name Summary default val default: BackStackConfig","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-companion/#companion","text":"companion object Companion : ContainerHintKey BackStackConfig","title":"Companion"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-companion/#inherited-functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString open fun toString(): String","title":"Inherited Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-companion/#companion-object-properties","text":"Name Summary default val default: BackStackConfig","title":"Companion Object Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-companion/default/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackConfig / Companion / default default val default: BackStackConfig Overrides ContainerHintKey.default","title":"Default"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-config/-companion/default/#default","text":"val default: BackStackConfig Overrides ContainerHintKey.default","title":"default"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer BackStackContainer open class BackStackContainer : FrameLayout A container view that can display a stream of BackStackScreen instances. Types Name Summary Companion companion object Companion : ViewBinding BackStackScreen * Constructors Name Summary init BackStackContainer(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) A container view that can display a stream of BackStackScreen instances. Functions Name Summary onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable ): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable performTransition open fun performTransition(oldViewMaybe: View ?, newView: View , popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named BackStackScreen * . Extension Properties Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window. Extension Functions Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#backstackcontainer","text":"open class BackStackContainer : FrameLayout A container view that can display a stream of BackStackScreen instances.","title":"BackStackContainer"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#types","text":"Name Summary Companion companion object Companion : ViewBinding BackStackScreen *","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#constructors","text":"Name Summary init BackStackContainer(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) A container view that can display a stream of BackStackScreen instances.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#functions","text":"Name Summary onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable ): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable performTransition open fun performTransition(oldViewMaybe: View ?, newView: View , popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named BackStackScreen * .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#extension-properties","text":"Name Summary backPressedHandler var View .backPressedHandler: BackPressHandler ? A function to be called if the device back button is pressed while this view is attached to a window.","title":"Extension Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#extension-functions","text":"Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , initialContainerHints: ContainerHints , showRendering: ViewShowRendering RenderingT ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly. canShowRendering fun View .canShowRendering(rendering: Any ): Boolean It is usually more convenient to use WorkflowViewStub than to call this method directly. getRendering fun RenderingT : Any View .getRendering(): RenderingT ? Returns the most recent rendering shown by this view, or null if bindShowRendering has never been called. getShowRendering fun RenderingT : Any View .getShowRendering(): ViewShowRendering RenderingT ? Returns the function set by the most recent call to bindShowRendering , or null if that method has never been called. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT , containerHints: ContainerHints ): Unit It is usually more convenient to use WorkflowViewStub than to call this method directly.","title":"Extension Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/-companion/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / Companion Companion companion object Companion : ViewBinding BackStackScreen *","title":" companion"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/-companion/#companion","text":"companion object Companion : ViewBinding BackStackScreen *","title":"Companion"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / init init BackStackContainer(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) A container view that can display a stream of BackStackScreen instances.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/-init-/#init","text":"BackStackContainer(context: Context , attributeSet: AttributeSet ? = null, defStyle: Int = 0, defStyleRes: Int = 0) A container view that can display a stream of BackStackScreen instances.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-restore-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / onRestoreInstanceState onRestoreInstanceState protected open fun onRestoreInstanceState(state: Parcelable ): Unit","title":"On restore instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-restore-instance-state/#onrestoreinstancestate","text":"protected open fun onRestoreInstanceState(state: Parcelable ): Unit","title":"onRestoreInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-save-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / onSaveInstanceState onSaveInstanceState protected open fun onSaveInstanceState(): Parcelable","title":"On save instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-save-instance-state/#onsaveinstancestate","text":"protected open fun onSaveInstanceState(): Parcelable","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/perform-transition/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / performTransition performTransition protected open fun performTransition(oldViewMaybe: View ?, newView: View , popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named BackStackScreen * . Parameters oldViewMaybe - the outgoing view, or null if this is the initial rendering. newView - the view that should replace oldViewMaybe (if it exists), and become this view s only child popped - true if we should give the appearance of popping back to a previous rendering, false if a new rendering is being pushed . Should be ignored if oldViewMaybe is null.","title":"Perform transition"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/perform-transition/#performtransition","text":"protected open fun performTransition(oldViewMaybe: View ?, newView: View , popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named BackStackScreen * .","title":"performTransition"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/perform-transition/#parameters","text":"oldViewMaybe - the outgoing view, or null if this is the initial rendering. newView - the view that should replace oldViewMaybe (if it exists), and become this view s only child popped - true if we should give the appearance of popping back to a previous rendering, false if a new rendering is being pushed . Should be ignored if oldViewMaybe is null.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache ViewStateCache class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets. This class implements Parcelable so that it can be preserved from a container view s own View.saveHierarchyState method. A simple container can return SavedState from that method rather than creating its own persistence class. Types Name Summary CREATOR companion object CREATOR : Creator ViewStateCache SavedState class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. Constructors Name Summary init ViewStateCache() Functions Name Summary describeContents fun describeContents(): Int prune fun prune(retaining: Collection Named * ): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped. restore fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view s View.onRestoreInstanceState . update fun update(retainedRenderings: Collection Named * , oldViewMaybe: View ?, newView: View ): Unit writeToParcel fun writeToParcel(parcel: Parcel , flags: Int ): Unit Companion Object Functions Name Summary createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#viewstatecache","text":"class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets. This class implements Parcelable so that it can be preserved from a container view s own View.saveHierarchyState method. A simple container can return SavedState from that method rather than creating its own persistence class.","title":"ViewStateCache"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#types","text":"Name Summary CREATOR companion object CREATOR : Creator ViewStateCache SavedState class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save.","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#constructors","text":"Name Summary init ViewStateCache()","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#functions","text":"Name Summary describeContents fun describeContents(): Int prune fun prune(retaining: Collection Named * ): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped. restore fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view s View.onRestoreInstanceState . update fun update(retainedRenderings: Collection Named * , oldViewMaybe: View ?, newView: View ): Unit writeToParcel fun writeToParcel(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / init init ViewStateCache()","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-init-/#init","text":"ViewStateCache()","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/create-from-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / createFromParcel createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache","title":"Create from parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/create-from-parcel/#createfromparcel","text":"fun createFromParcel(parcel: Parcel ): ViewStateCache","title":"createFromParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/describe-contents/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / describeContents describeContents fun describeContents(): Int","title":"Describe contents"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/describe-contents/#describecontents","text":"fun describeContents(): Int","title":"describeContents"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/new-array/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / newArray newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"New array"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/new-array/#newarray","text":"fun newArray(size: Int ): Array ViewStateCache ?","title":"newArray"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/prune/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / prune prune fun prune(retaining: Collection Named * ): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped.","title":"Prune"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/prune/#prune","text":"fun prune(retaining: Collection Named * ): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped.","title":"prune"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/restore/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / restore restore fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view s View.onRestoreInstanceState .","title":"Restore"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/restore/#restore","text":"fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view s View.onRestoreInstanceState .","title":"restore"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/update/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / update update fun update(retainedRenderings: Collection Named * , oldViewMaybe: View ?, newView: View ): Unit Parameters retainedRenderings - the renderings to be considered hidden after this update. Any associated view state will be retained in the cache, possibly to be restored to newView on a succeeding call to his method. Any other cached view state will be dropped. oldViewMaybe - the view that is being removed, if any, which is expected to be showing a Named rendering. If that rendering is compatible with a member of retainedRenderings , its state will be saved . newView - the view that is about to be displayed, which must be showing a Named rendering. If compatible view state is found in the cache, it is restored . Return true if newView has been restored.","title":"Update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/update/#update","text":"fun update(retainedRenderings: Collection Named * , oldViewMaybe: View ?, newView: View ): Unit","title":"update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/update/#parameters","text":"retainedRenderings - the renderings to be considered hidden after this update. Any associated view state will be retained in the cache, possibly to be restored to newView on a succeeding call to his method. Any other cached view state will be dropped. oldViewMaybe - the view that is being removed, if any, which is expected to be showing a Named rendering. If that rendering is compatible with a member of retainedRenderings , its state will be saved . newView - the view that is about to be displayed, which must be showing a Named rendering. If compatible view state is found in the cache, it is restored . Return true if newView has been restored.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/write-to-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / writeToParcel writeToParcel fun writeToParcel(parcel: Parcel , flags: Int ): Unit","title":"Write to parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/write-to-parcel/#writetoparcel","text":"fun writeToParcel(parcel: Parcel , flags: Int ): Unit","title":"writeToParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / CREATOR CREATOR companion object CREATOR : Creator ViewStateCache Companion Object Functions Name Summary createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/#creator","text":"companion object CREATOR : Creator ViewStateCache","title":"CREATOR"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/create-from-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / CREATOR / createFromParcel createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache","title":"Create from parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/create-from-parcel/#createfromparcel","text":"fun createFromParcel(parcel: Parcel ): ViewStateCache","title":"createFromParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/new-array/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / CREATOR / newArray newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"New array"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/new-array/#newarray","text":"fun newArray(size: Int ): Array ViewStateCache ?","title":"newArray"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState SavedState class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. More interesting containers should create their own subclass of BaseSavedState rather than trying to extend this one. Types Name Summary CREATOR companion object CREATOR : Creator ViewStateCache.SavedState Constructors Name Summary init SavedState(superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState(source: Parcel ) Properties Name Summary viewStateCache val viewStateCache: ViewStateCache Functions Name Summary writeToParcel fun writeToParcel(out: Parcel , flags: Int ): Unit Companion Object Functions Name Summary createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#savedstate","text":"class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. More interesting containers should create their own subclass of BaseSavedState rather than trying to extend this one.","title":"SavedState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#types","text":"Name Summary CREATOR companion object CREATOR : Creator ViewStateCache.SavedState","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#constructors","text":"Name Summary init SavedState(superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState(source: Parcel )","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#properties","text":"Name Summary viewStateCache val viewStateCache: ViewStateCache","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#functions","text":"Name Summary writeToParcel fun writeToParcel(out: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / init init SavedState(superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState(source: Parcel )","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-init-/#init","text":"SavedState(superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState(source: Parcel )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/create-from-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / createFromParcel createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState","title":"Create from parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/create-from-parcel/#createfromparcel","text":"fun createFromParcel(source: Parcel ): ViewStateCache.SavedState","title":"createFromParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/new-array/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / newArray newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"New array"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/new-array/#newarray","text":"fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"newArray"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/view-state-cache/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / viewStateCache viewStateCache val viewStateCache: ViewStateCache","title":"View state cache"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/view-state-cache/#viewstatecache","text":"val viewStateCache: ViewStateCache","title":"viewStateCache"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/write-to-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / writeToParcel writeToParcel fun writeToParcel(out: Parcel , flags: Int ): Unit","title":"Write to parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/write-to-parcel/#writetoparcel","text":"fun writeToParcel(out: Parcel , flags: Int ): Unit","title":"writeToParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / CREATOR CREATOR companion object CREATOR : Creator ViewStateCache.SavedState Companion Object Functions Name Summary createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/#creator","text":"companion object CREATOR : Creator ViewStateCache.SavedState","title":"CREATOR"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/create-from-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / CREATOR / createFromParcel createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState","title":"Create from parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/create-from-parcel/#createfromparcel","text":"fun createFromParcel(source: Parcel ): ViewStateCache.SavedState","title":"createFromParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/new-array/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / CREATOR / newArray newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"New array"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/new-array/#newarray","text":"fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"newArray"},{"location":"kotlin/api/workflow-ui-core/","text":"workflow-ui-core Packages Name Summary com.squareup.workflow.ui Index All Types","title":"Home"},{"location":"kotlin/api/workflow-ui-core/#packages","text":"Name Summary com.squareup.workflow.ui","title":"Packages"},{"location":"kotlin/api/workflow-ui-core/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-ui-core/alltypes/","text":"All Types Name Summary com.squareup.workflow.ui.AlertContainerScreen May show a stack of AlertScreen over a baseScreen . com.squareup.workflow.ui.AlertScreen Models a typical You sure about that? alert box. com.squareup.workflow.ui.BackStackScreen Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. com.squareup.workflow.ui.Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. com.squareup.workflow.ui.HasModals Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. kotlin.collections.List (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.Named Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Home"},{"location":"kotlin/api/workflow-ui-core/alltypes/#all-types","text":"Name Summary com.squareup.workflow.ui.AlertContainerScreen May show a stack of AlertScreen over a baseScreen . com.squareup.workflow.ui.AlertScreen Models a typical You sure about that? alert box. com.squareup.workflow.ui.BackStackScreen Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. com.squareup.workflow.ui.Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. com.squareup.workflow.ui.HasModals Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. kotlin.collections.List (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.Named Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"All Types"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/","text":"workflow-ui-core / com.squareup.workflow.ui Package com.squareup.workflow.ui Types Name Summary AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen . AlertScreen data class AlertScreen Models a typical You sure about that? alert box. BackStackScreen class BackStackScreen StackedT : Any Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Compatible interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. HasModals interface HasModals out B : Any , out M : Any Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Extensions for External Classes Name Summary kotlin.collections.List Functions Name Summary compatible fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey .","title":"workflow-ui-core"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/#package-comsquareupworkflowui","text":"","title":"Package com.squareup.workflow.ui"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/#types","text":"Name Summary AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen . AlertScreen data class AlertScreen Models a typical You sure about that? alert box. BackStackScreen class BackStackScreen StackedT : Any Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Compatible interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. HasModals interface HasModals out B : Any , out M : Any Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Types"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/#extensions-for-external-classes","text":"Name Summary kotlin.collections.List","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/#functions","text":"Name Summary compatible fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey .","title":"Functions"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/compatible/","text":"workflow-ui-core / com.squareup.workflow.ui / compatible compatible fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . A convenient way to take control over the matching behavior of objects that don t implement Compatible is to wrap them with Named .","title":"Compatible"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/compatible/#compatible","text":"fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . A convenient way to take control over the matching behavior of objects that don t implement Compatible is to wrap them with Named .","title":"compatible"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertContainerScreen AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen . Parameters B - the type of baseScreen Constructors Name Summary init AlertContainerScreen(baseScreen: B , alert: AlertScreen ) AlertContainerScreen(baseScreen: B , vararg alerts: AlertScreen )``AlertContainerScreen(baseScreen: B , modals: List AlertScreen = emptyList()) May show a stack of AlertScreen over a baseScreen . Properties Name Summary baseScreen val baseScreen: B modals val modals: List AlertScreen","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/#alertcontainerscreen","text":"data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen .","title":"AlertContainerScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/#parameters","text":"B - the type of baseScreen","title":"Parameters"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/#constructors","text":"Name Summary init AlertContainerScreen(baseScreen: B , alert: AlertScreen ) AlertContainerScreen(baseScreen: B , vararg alerts: AlertScreen )``AlertContainerScreen(baseScreen: B , modals: List AlertScreen = emptyList()) May show a stack of AlertScreen over a baseScreen .","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/#properties","text":"Name Summary baseScreen val baseScreen: B modals val modals: List AlertScreen","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertContainerScreen / init init AlertContainerScreen(baseScreen: B , alert: AlertScreen ) AlertContainerScreen(baseScreen: B , vararg alerts: AlertScreen )``AlertContainerScreen(baseScreen: B , modals: List AlertScreen = emptyList()) May show a stack of AlertScreen over a baseScreen . Parameters B - the type of baseScreen","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/-init-/#init","text":"AlertContainerScreen(baseScreen: B , alert: AlertScreen ) AlertContainerScreen(baseScreen: B , vararg alerts: AlertScreen )``AlertContainerScreen(baseScreen: B , modals: List AlertScreen = emptyList()) May show a stack of AlertScreen over a baseScreen .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/-init-/#parameters","text":"B - the type of baseScreen","title":"Parameters"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/base-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertContainerScreen / baseScreen baseScreen val baseScreen: B Overrides HasModals.baseScreen","title":"Base screen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/base-screen/#basescreen","text":"val baseScreen: B Overrides HasModals.baseScreen","title":"baseScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/modals/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertContainerScreen / modals modals val modals: List AlertScreen Overrides HasModals.modals","title":"Modals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/modals/#modals","text":"val modals: List AlertScreen Overrides HasModals.modals","title":"modals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen AlertScreen data class AlertScreen Models a typical You sure about that? alert box. Types Name Summary Button enum class Button Event sealed class Event Constructors Name Summary init AlertScreen(buttons: Map AlertScreen.Button , String = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) - Unit ) Models a typical You sure about that? alert box. Properties Name Summary buttons val buttons: Map AlertScreen.Button , String cancelable val cancelable: Boolean message val message: String onEvent val onEvent: ( AlertScreen.Event ) - Unit title val title: String Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#alertscreen","text":"data class AlertScreen Models a typical You sure about that? alert box.","title":"AlertScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#types","text":"Name Summary Button enum class Button Event sealed class Event","title":"Types"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#constructors","text":"Name Summary init AlertScreen(buttons: Map AlertScreen.Button , String = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) - Unit ) Models a typical You sure about that? alert box.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#properties","text":"Name Summary buttons val buttons: Map AlertScreen.Button , String cancelable val cancelable: Boolean message val message: String onEvent val onEvent: ( AlertScreen.Event ) - Unit title val title: String","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Functions"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / init init AlertScreen(buttons: Map AlertScreen.Button , String = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) - Unit ) Models a typical You sure about that? alert box.","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-init-/#init","text":"AlertScreen(buttons: Map AlertScreen.Button , String = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) - Unit ) Models a typical You sure about that? alert box.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/buttons/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / buttons buttons val buttons: Map AlertScreen.Button , String","title":"Buttons"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/buttons/#buttons","text":"val buttons: Map AlertScreen.Button , String","title":"buttons"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/cancelable/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / cancelable cancelable val cancelable: Boolean","title":"Cancelable"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/cancelable/#cancelable","text":"val cancelable: Boolean","title":"cancelable"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/equals/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/hash-code/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/message/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / message message val message: String","title":"Message"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/message/#message","text":"val message: String","title":"message"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/on-event/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / onEvent onEvent val onEvent: ( AlertScreen.Event ) - Unit","title":"On event"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/on-event/#onevent","text":"val onEvent: ( AlertScreen.Event ) - Unit","title":"onEvent"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/title/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / title title val title: String","title":"Title"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/title/#title","text":"val title: String","title":"title"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Button Button enum class Button Enum Values Name Summary POSITIVE NEGATIVE NEUTRAL","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/#button","text":"enum class Button","title":"Button"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/#enum-values","text":"Name Summary POSITIVE NEGATIVE NEUTRAL","title":"Enum Values"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-n-e-g-a-t-i-v-e/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Button / NEGATIVE NEGATIVE NEGATIVE","title":" n e g a t i v e"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-n-e-g-a-t-i-v-e/#negative","text":"NEGATIVE","title":"NEGATIVE"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-n-e-u-t-r-a-l/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Button / NEUTRAL NEUTRAL NEUTRAL","title":" n e u t r a l"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-n-e-u-t-r-a-l/#neutral","text":"NEUTRAL","title":"NEUTRAL"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-p-o-s-i-t-i-v-e/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Button / POSITIVE POSITIVE POSITIVE","title":" p o s i t i v e"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-p-o-s-i-t-i-v-e/#positive","text":"POSITIVE","title":"POSITIVE"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event Event sealed class Event Types Name Summary ButtonClicked data class ButtonClicked : AlertScreen.Event Canceled object Canceled : AlertScreen.Event Inheritors Name Summary ButtonClicked data class ButtonClicked : AlertScreen.Event Canceled object Canceled : AlertScreen.Event","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/#event","text":"sealed class Event","title":"Event"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/#types","text":"Name Summary ButtonClicked data class ButtonClicked : AlertScreen.Event Canceled object Canceled : AlertScreen.Event","title":"Types"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/#inheritors","text":"Name Summary ButtonClicked data class ButtonClicked : AlertScreen.Event Canceled object Canceled : AlertScreen.Event","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-canceled/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event / Canceled Canceled object Canceled : AlertScreen.Event","title":" canceled"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-canceled/#canceled","text":"object Canceled : AlertScreen.Event","title":"Canceled"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event / ButtonClicked ButtonClicked data class ButtonClicked : AlertScreen.Event Constructors Name Summary init ButtonClicked(button: AlertScreen.Button ) Properties Name Summary button val button: AlertScreen.Button","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/#buttonclicked","text":"data class ButtonClicked : AlertScreen.Event","title":"ButtonClicked"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/#constructors","text":"Name Summary init ButtonClicked(button: AlertScreen.Button )","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/#properties","text":"Name Summary button val button: AlertScreen.Button","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event / ButtonClicked / init init ButtonClicked(button: AlertScreen.Button )","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/-init-/#init","text":"ButtonClicked(button: AlertScreen.Button )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/button/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event / ButtonClicked / button button val button: AlertScreen.Button","title":"Button"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/button/#button","text":"val button: AlertScreen.Button","title":"button"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen BackStackScreen class BackStackScreen StackedT : Any Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty. Constructors Name Summary init BackStackScreen(bottom: StackedT , vararg rest: StackedT ) Creates a screen with elements listed from the bottom to the top. BackStackScreen(backStack: List StackedT , top: StackedT ) Creates a screen with the frames of the given backStack , capped with top . backStack may be empty. BackStackScreen(bottom: StackedT , rest: List StackedT ) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Properties Name Summary backStack val backStack: List StackedT Screens to which we may return. frames val frames: List StackedT top val top: StackedT The active screen. Functions Name Summary equals fun equals(other: Any ?): Boolean get operator fun get(index: Int ): StackedT hashCode fun hashCode(): Int map fun R : Any map(transform: ( StackedT ) - R ): BackStackScreen R mapIndexed fun R : Any mapIndexed(transform: (index: Int , StackedT ) - R ): BackStackScreen R plus operator fun plus(other: BackStackScreen StackedT ?): BackStackScreen StackedT toString fun toString(): String","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/#backstackscreen","text":"class BackStackScreen StackedT : Any Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty.","title":"BackStackScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/#constructors","text":"Name Summary init BackStackScreen(bottom: StackedT , vararg rest: StackedT ) Creates a screen with elements listed from the bottom to the top. BackStackScreen(backStack: List StackedT , top: StackedT ) Creates a screen with the frames of the given backStack , capped with top . backStack may be empty. BackStackScreen(bottom: StackedT , rest: List StackedT ) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/#properties","text":"Name Summary backStack val backStack: List StackedT Screens to which we may return. frames val frames: List StackedT top val top: StackedT The active screen.","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean get operator fun get(index: Int ): StackedT hashCode fun hashCode(): Int map fun R : Any map(transform: ( StackedT ) - R ): BackStackScreen R mapIndexed fun R : Any mapIndexed(transform: (index: Int , StackedT ) - R ): BackStackScreen R plus operator fun plus(other: BackStackScreen StackedT ?): BackStackScreen StackedT toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / init init BackStackScreen(bottom: StackedT , vararg rest: StackedT ) Creates a screen with elements listed from the bottom to the top. BackStackScreen(backStack: List StackedT , top: StackedT ) Creates a screen with the frames of the given backStack , capped with top . backStack may be empty. BackStackScreen(bottom: StackedT , rest: List StackedT ) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty.","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/-init-/#init","text":"BackStackScreen(bottom: StackedT , vararg rest: StackedT ) Creates a screen with elements listed from the bottom to the top. BackStackScreen(backStack: List StackedT , top: StackedT ) Creates a screen with the frames of the given backStack , capped with top . backStack may be empty. BackStackScreen(bottom: StackedT , rest: List StackedT ) Represents an active screen ( top ), and a set of previously visited screens to which we may return ( backStack ). By rendering the entire history we allow the UI to do things like maintain cached view state, implement drag-back gestures without waiting for the workflow, etc. Effectively a list that can never be empty.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/back-stack/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / backStack backStack val backStack: List StackedT Screens to which we may return.","title":"Back stack"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/back-stack/#backstack","text":"val backStack: List StackedT Screens to which we may return.","title":"backStack"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/equals/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/frames/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / frames frames val frames: List StackedT","title":"Frames"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/frames/#frames","text":"val frames: List StackedT","title":"frames"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/get/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / get get operator fun get(index: Int ): StackedT","title":"Get"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/get/#get","text":"operator fun get(index: Int ): StackedT","title":"get"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/hash-code/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/map-indexed/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / mapIndexed mapIndexed fun R : Any mapIndexed(transform: (index: Int , StackedT ) - R ): BackStackScreen R","title":"Map indexed"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/map-indexed/#mapindexed","text":"fun R : Any mapIndexed(transform: (index: Int , StackedT ) - R ): BackStackScreen R","title":"mapIndexed"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/map/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / map map fun R : Any map(transform: ( StackedT ) - R ): BackStackScreen R","title":"Map"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/map/#map","text":"fun R : Any map(transform: ( StackedT ) - R ): BackStackScreen R","title":"map"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/plus/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / plus plus operator fun plus(other: BackStackScreen StackedT ?): BackStackScreen StackedT","title":"Plus"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/plus/#plus","text":"operator fun plus(other: BackStackScreen StackedT ?): BackStackScreen StackedT","title":"plus"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/to-string/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / toString toString fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/top/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / top top val top: StackedT The active screen.","title":"Top"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/top/#top","text":"val top: StackedT The active screen.","title":"top"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/","text":"workflow-ui-core / com.squareup.workflow.ui / Compatible Compatible interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. Renderings that don t implement this interface directly can be distinguished by wrapping them with Named . Properties Name Summary compatibilityKey abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey . Inheritors Name Summary Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/#compatible","text":"interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. Renderings that don t implement this interface directly can be distinguished by wrapping them with Named .","title":"Compatible"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/#properties","text":"Name Summary compatibilityKey abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/#inheritors","text":"Name Summary Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/compatibility-key/","text":"workflow-ui-core / com.squareup.workflow.ui / Compatible / compatibilityKey compatibilityKey abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Compatibility key"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/compatibility-key/#compatibilitykey","text":"abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"compatibilityKey"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/","text":"workflow-ui-core / com.squareup.workflow.ui / HasModals HasModals interface HasModals out B : Any , out M : Any Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. Properties Name Summary baseScreen abstract val baseScreen: B modals abstract val modals: List M Inheritors Name Summary AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen .","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/#hasmodals","text":"interface HasModals out B : Any , out M : Any Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module.","title":"HasModals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/#properties","text":"Name Summary baseScreen abstract val baseScreen: B modals abstract val modals: List M","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/#inheritors","text":"Name Summary AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen .","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/base-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / HasModals / baseScreen baseScreen abstract val baseScreen: B","title":"Base screen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/base-screen/#basescreen","text":"abstract val baseScreen: B","title":"baseScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/modals/","text":"workflow-ui-core / com.squareup.workflow.ui / HasModals / modals modals abstract val modals: List M","title":"Modals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/modals/#modals","text":"abstract val modals: List M","title":"modals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/","text":"workflow-ui-core / com.squareup.workflow.ui / Named Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Constructors Name Summary init Named(wrapped: W , name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Properties Name Summary compatibilityKey val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey . name val name: String wrapped val wrapped: W Functions Name Summary toString fun toString(): String Companion Object Functions Name Summary keyFor fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#named","text":"data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Named"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#constructors","text":"Name Summary init Named(wrapped: W , name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#properties","text":"Name Summary compatibilityKey val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey . name val name: String wrapped val wrapped: W","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#companion-object-functions","text":"Name Summary keyFor fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / init init Named(wrapped: W , name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/-init-/#init","text":"Named(wrapped: W , name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/compatibility-key/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / compatibilityKey compatibilityKey val compatibilityKey: String Overrides Compatible.compatibilityKey Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Compatibility key"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/compatibility-key/#compatibilitykey","text":"val compatibilityKey: String Overrides Compatible.compatibilityKey Instances of the same type are compatible iff they have the same compatibilityKey .","title":"compatibilityKey"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/key-for/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / keyFor keyFor fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"Key for"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/key-for/#keyfor","text":"fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"keyFor"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/name/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / name name val name: String","title":"Name"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/to-string/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / toString toString fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/wrapped/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / wrapped wrapped val wrapped: W","title":"Wrapped"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/wrapped/#wrapped","text":"val wrapped: W","title":"wrapped"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/kotlin.collections.-list/","text":"workflow-ui-core / com.squareup.workflow.ui / kotlin.collections.List Extensions for kotlin.collections.List Name Summary goTo fun T : Any List T .goTo(next: T ): List T Helper for List s that are used as back-stacks, where the last element is considered to be the top / current value of the stack.","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/kotlin.collections.-list/#extensions-for-kotlincollectionslist","text":"Name Summary goTo fun T : Any List T .goTo(next: T ): List T Helper for List s that are used as back-stacks, where the last element is considered to be the top / current value of the stack.","title":"Extensions for kotlin.collections.List"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/kotlin.collections.-list/go-to/","text":"workflow-ui-core / com.squareup.workflow.ui / kotlin.collections.List / goTo goTo fun T : Any List T .goTo(next: T ): List T Helper for List s that are used as back-stacks, where the last element is considered to be the top / current value of the stack. Returns a transformation of the receiver by popping back to the first element that is compatible with next . If no matching frame is found, adds next to the end.","title":"Go to"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/kotlin.collections.-list/go-to/#goto","text":"fun T : Any List T .goTo(next: T ): List T Helper for List s that are used as back-stacks, where the last element is considered to be the top / current value of the stack. Returns a transformation of the receiver by popping back to the first element that is compatible with next . If no matching frame is found, adds next to the end.","title":"goTo"},{"location":"swift/api/Workflow/","text":"Reference Documentation This Reference Documentation has been generated with SourceDocs . Protocols AnyWorkflowConvertible Worker Workflow WorkflowAction WorkflowDebugger Structs AnyWorkflow AnyWorkflowAction Child Sink WorkflowHierarchyDebugSnapshot WorkflowUpdateDebugInfo Classes RenderContext WorkflowHost Enums Kind Source Extensions AnyWorkflow AnyWorkflowAction AnyWorkflowConvertible RenderContext Worker Workflow WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source","title":"Workflow "},{"location":"swift/api/Workflow/#reference-documentation","text":"This Reference Documentation has been generated with SourceDocs .","title":"Reference Documentation"},{"location":"swift/api/Workflow/#protocols","text":"AnyWorkflowConvertible Worker Workflow WorkflowAction WorkflowDebugger","title":"Protocols"},{"location":"swift/api/Workflow/#structs","text":"AnyWorkflow AnyWorkflowAction Child Sink WorkflowHierarchyDebugSnapshot WorkflowUpdateDebugInfo","title":"Structs"},{"location":"swift/api/Workflow/#classes","text":"RenderContext WorkflowHost","title":"Classes"},{"location":"swift/api/Workflow/#enums","text":"Kind Source","title":"Enums"},{"location":"swift/api/Workflow/#extensions","text":"AnyWorkflow AnyWorkflowAction AnyWorkflowConvertible RenderContext Worker Workflow WorkflowUpdateDebugInfo.Kind WorkflowUpdateDebugInfo.Source","title":"Extensions"},{"location":"swift/api/Workflow/classes/RenderContext/","text":"CLASS RenderContext 1 public class RenderContext WorkflowType : Workflow : RenderContextType RenderContext is the composition point for the workflow tree. During a render pass, a workflow may want to defer to a child workflow to render some portion of its content. For example, a workflow that renders to a split-screen view model might delegate to child A for the left side, and child B for the right side view models. Nesting allows for a fractal tree that is constructed out of many small parts. If a parent wants to delegate to a child workflow, it must first create an instance of that workflow. This can be thought of as the model of the child workflow. It does not contain any active state, it simply contains the data necessary to create or update a workflow node. The parent then calls render(workflow:outputMap:) with two values: - The child workflow. - A closure that transforms the child s output events into the parent s Event type so that the parent can respond to events generated by the child. If the parent had previously rendered a child of the same type, the existing child workflow node is updated. If the parent had not rendered a child of the same type in the previous render pass, a new child workflow node is generated. The infrastructure then performs a render pass on the child to obtain its Rendering value, which is then returned to the caller. Methods render(workflow:key:outputMap:) 1 public func render Child , Action ( workflow : Child , key : String , outputMap : @ escaping ( Child . Output ) - Action ) - Child . Rendering where Child : Workflow , Action : WorkflowAction , WorkflowType == Action . WorkflowType Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter workflow: The child workflow to be rendered. Parameter outputMap: A closure that transforms the child s output type into Action . Parameter key: A string that uniquely identifies this child. Returns: The Rendering result of the child s render method. Parameters Name Description workflow The child workflow to be rendered. outputMap A closure that transforms the child\u2019s output type into Action . key A string that uniquely identifies this child. makeSink(of:) 1 public func makeSink Action ( of actionType : Action . Type ) - Sink Action where Action : WorkflowAction , Action . WorkflowType == WorkflowType subscribe(signal:) 1 public func subscribe Action ( signal : Signal Action , Never ) where Action : WorkflowAction , WorkflowType == Action . WorkflowType awaitResult(for:outputMap:) 1 public func awaitResult W , Action ( for worker : W , outputMap : @ escaping ( W . Output ) - Action ) where W : Worker , Action : WorkflowAction , WorkflowType == Action . WorkflowType","title":"RenderContext"},{"location":"swift/api/Workflow/classes/RenderContext/#rendercontext","text":"1 public class RenderContext WorkflowType : Workflow : RenderContextType RenderContext is the composition point for the workflow tree. During a render pass, a workflow may want to defer to a child workflow to render some portion of its content. For example, a workflow that renders to a split-screen view model might delegate to child A for the left side, and child B for the right side view models. Nesting allows for a fractal tree that is constructed out of many small parts. If a parent wants to delegate to a child workflow, it must first create an instance of that workflow. This can be thought of as the model of the child workflow. It does not contain any active state, it simply contains the data necessary to create or update a workflow node. The parent then calls render(workflow:outputMap:) with two values: - The child workflow. - A closure that transforms the child s output events into the parent s Event type so that the parent can respond to events generated by the child. If the parent had previously rendered a child of the same type, the existing child workflow node is updated. If the parent had not rendered a child of the same type in the previous render pass, a new child workflow node is generated. The infrastructure then performs a render pass on the child to obtain its Rendering value, which is then returned to the caller.","title":"RenderContext"},{"location":"swift/api/Workflow/classes/RenderContext/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/classes/RenderContext/#renderworkflowkeyoutputmap","text":"1 public func render Child , Action ( workflow : Child , key : String , outputMap : @ escaping ( Child . Output ) - Action ) - Child . Rendering where Child : Workflow , Action : WorkflowAction , WorkflowType == Action . WorkflowType Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter workflow: The child workflow to be rendered. Parameter outputMap: A closure that transforms the child s output type into Action . Parameter key: A string that uniquely identifies this child. Returns: The Rendering result of the child s render method.","title":"render(workflow:key:outputMap:)"},{"location":"swift/api/Workflow/classes/RenderContext/#parameters","text":"Name Description workflow The child workflow to be rendered. outputMap A closure that transforms the child\u2019s output type into Action . key A string that uniquely identifies this child.","title":"Parameters"},{"location":"swift/api/Workflow/classes/RenderContext/#makesinkof","text":"1 public func makeSink Action ( of actionType : Action . Type ) - Sink Action where Action : WorkflowAction , Action . WorkflowType == WorkflowType","title":"makeSink(of:)"},{"location":"swift/api/Workflow/classes/RenderContext/#subscribesignal","text":"1 public func subscribe Action ( signal : Signal Action , Never ) where Action : WorkflowAction , WorkflowType == Action . WorkflowType","title":"subscribe(signal:)"},{"location":"swift/api/Workflow/classes/RenderContext/#awaitresultforoutputmap","text":"1 public func awaitResult W , Action ( for worker : W , outputMap : @ escaping ( W . Output ) - Action ) where W : Worker , Action : WorkflowAction , WorkflowType == Action . WorkflowType","title":"awaitResult(for:outputMap:)"},{"location":"swift/api/Workflow/classes/WorkflowHost/","text":"CLASS WorkflowHost 1 public final class WorkflowHost WorkflowType : Workflow Manages an active workflow hierarchy. Properties rendering 1 public let rendering : Property WorkflowType . Rendering Represents the Rendering produced by the root workflow in the hierarchy. New Rendering values are produced as state transitions occur within the hierarchy. output 1 public var output : Signal WorkflowType . Output , Never A signal containing output events emitted by the root workflow in the hierarchy. Methods init(workflow:debugger:) 1 public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) Initializes a new host with the given workflow at the root. Parameter workflow: The root workflow in the hierarchy Parameter debugger: An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur. Parameters Name Description workflow The root workflow in the hierarchy debugger An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur. update(workflow:) 1 public func update ( workflow : WorkflowType ) Update the input for the workflow. Will cause a render pass.","title":"WorkflowHost"},{"location":"swift/api/Workflow/classes/WorkflowHost/#workflowhost","text":"1 public final class WorkflowHost WorkflowType : Workflow Manages an active workflow hierarchy.","title":"WorkflowHost"},{"location":"swift/api/Workflow/classes/WorkflowHost/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/classes/WorkflowHost/#rendering","text":"1 public let rendering : Property WorkflowType . Rendering Represents the Rendering produced by the root workflow in the hierarchy. New Rendering values are produced as state transitions occur within the hierarchy.","title":"rendering"},{"location":"swift/api/Workflow/classes/WorkflowHost/#output","text":"1 public var output : Signal WorkflowType . Output , Never A signal containing output events emitted by the root workflow in the hierarchy.","title":"output"},{"location":"swift/api/Workflow/classes/WorkflowHost/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/classes/WorkflowHost/#initworkflowdebugger","text":"1 public init ( workflow : WorkflowType , debugger : WorkflowDebugger ? = nil ) Initializes a new host with the given workflow at the root. Parameter workflow: The root workflow in the hierarchy Parameter debugger: An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur.","title":"init(workflow:debugger:)"},{"location":"swift/api/Workflow/classes/WorkflowHost/#parameters","text":"Name Description workflow The root workflow in the hierarchy debugger An optional debugger. If provided, the host will notify the debugger of updates to the workflow hierarchy as state transitions occur.","title":"Parameters"},{"location":"swift/api/Workflow/classes/WorkflowHost/#updateworkflow","text":"1 public func update ( workflow : WorkflowType ) Update the input for the workflow. Will cause a render pass.","title":"update(workflow:)"},{"location":"swift/api/Workflow/enums/Kind/","text":"ENUM Kind 1 public indirect enum Kind : Equatable Cases didUpdate(source:) 1 case didUpdate ( source : Source ) childDidUpdate(_:) 1 case childDidUpdate ( WorkflowUpdateDebugInfo )","title":"Kind"},{"location":"swift/api/Workflow/enums/Kind/#kind","text":"1 public indirect enum Kind : Equatable","title":"Kind"},{"location":"swift/api/Workflow/enums/Kind/#cases","text":"","title":"Cases"},{"location":"swift/api/Workflow/enums/Kind/#didupdatesource","text":"1 case didUpdate ( source : Source )","title":"didUpdate(source:)"},{"location":"swift/api/Workflow/enums/Kind/#childdidupdate_","text":"1 case childDidUpdate ( WorkflowUpdateDebugInfo )","title":"childDidUpdate(_:)"},{"location":"swift/api/Workflow/enums/Source/","text":"ENUM Source 1 public indirect enum Source : Equatable Cases external 1 case external worker 1 case worker subtree(_:) 1 case subtree ( WorkflowUpdateDebugInfo )","title":"Source"},{"location":"swift/api/Workflow/enums/Source/#source","text":"1 public indirect enum Source : Equatable","title":"Source"},{"location":"swift/api/Workflow/enums/Source/#cases","text":"","title":"Cases"},{"location":"swift/api/Workflow/enums/Source/#external","text":"1 case external","title":"external"},{"location":"swift/api/Workflow/enums/Source/#worker","text":"1 case worker","title":"worker"},{"location":"swift/api/Workflow/enums/Source/#subtree_","text":"1 case subtree ( WorkflowUpdateDebugInfo )","title":"subtree(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/","text":"EXTENSION AnyWorkflow Methods asAnyWorkflow() 1 public func asAnyWorkflow () - AnyWorkflow Rendering , Output mapOutput(_:) 1 public func mapOutput NewOutput ( _ transform : @ escaping ( Output ) - NewOutput ) - AnyWorkflow Rendering , NewOutput Returns a new AnyWorkflow whose Output type has been transformed into the given type. Parameter transform: An escaping closure that maps the original output type into the new output type. Returns: A type erased workflow with the new output type (the rendering type remains unchanged). Parameters Name Description transform An escaping closure that maps the original output type into the new output type. mapRendering(_:) 1 public func mapRendering NewRendering ( _ transform : @ escaping ( Rendering ) - NewRendering ) - AnyWorkflow NewRendering , Output Returns a new AnyWorkflow whose Rendering type has been transformed into the given type. Parameter transform: An escaping closure that maps the original rendering type into the new rendering type. Returns: A type erased workflow with the new rendering type (the output type remains unchanged). Parameters Name Description transform An escaping closure that maps the original rendering type into the new rendering type.","title":"AnyWorkflow"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#anyworkflow","text":"","title":"AnyWorkflow"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#asanyworkflow","text":"1 public func asAnyWorkflow () - AnyWorkflow Rendering , Output","title":"asAnyWorkflow()"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#mapoutput_","text":"1 public func mapOutput NewOutput ( _ transform : @ escaping ( Output ) - NewOutput ) - AnyWorkflow Rendering , NewOutput Returns a new AnyWorkflow whose Output type has been transformed into the given type. Parameter transform: An escaping closure that maps the original output type into the new output type. Returns: A type erased workflow with the new output type (the rendering type remains unchanged).","title":"mapOutput(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#parameters","text":"Name Description transform An escaping closure that maps the original output type into the new output type.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#maprendering_","text":"1 public func mapRendering NewRendering ( _ transform : @ escaping ( Rendering ) - NewRendering ) - AnyWorkflow NewRendering , Output Returns a new AnyWorkflow whose Rendering type has been transformed into the given type. Parameter transform: An escaping closure that maps the original rendering type into the new rendering type. Returns: A type erased workflow with the new rendering type (the output type remains unchanged).","title":"mapRendering(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflow/#parameters_1","text":"Name Description transform An escaping closure that maps the original rendering type into the new rendering type.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/","text":"EXTENSION AnyWorkflowAction Methods init(sendingOutput:) 1 public init ( sendingOutput output : WorkflowType . Output ) Creates a type-erased workflow action that simply sends the given output event. Parameter output: The output event to send when this action is applied. Parameters Name Description output The output event to send when this action is applied.","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#anyworkflowaction","text":"","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#initsendingoutput","text":"1 public init ( sendingOutput output : WorkflowType . Output ) Creates a type-erased workflow action that simply sends the given output event. Parameter output: The output event to send when this action is applied.","title":"init(sendingOutput:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowAction/#parameters","text":"Name Description output The output event to send when this action is applied.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/","text":"EXTENSION AnyWorkflowConvertible Methods mapOutput(_:) 1 public func mapOutput NewOutput ( _ transform : @ escaping ( Output ) - NewOutput ) - AnyWorkflow Rendering , NewOutput mapRendering(_:) 1 public func mapRendering NewRendering ( _ transform : @ escaping ( Rendering ) - NewRendering ) - AnyWorkflow NewRendering , Output rendered(with:key:) 1 public func rendered Parent ( with context : RenderContext Parent , key : String = ) - Rendering where Output : WorkflowAction , Output . WorkflowType == Parent Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow. Parameters Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow. rendered(with:key:) 1 public func rendered Parent ( with context : RenderContext Parent , key : String = ) - Rendering where Output == AnyWorkflowAction Parent rendered(with:key:) 1 public func rendered T ( with context : RenderContext T , key : String = ) - Rendering Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow. Parameters Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow.","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#anyworkflowconvertible","text":"","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#mapoutput_","text":"1 public func mapOutput NewOutput ( _ transform : @ escaping ( Output ) - NewOutput ) - AnyWorkflow Rendering , NewOutput","title":"mapOutput(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#maprendering_","text":"1 public func mapRendering NewRendering ( _ transform : @ escaping ( Rendering ) - NewRendering ) - AnyWorkflow NewRendering , Output","title":"mapRendering(_:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedwithkey","text":"1 public func rendered Parent ( with context : RenderContext Parent , key : String = ) - Rendering where Output : WorkflowAction , Output . WorkflowType == Parent Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow.","title":"rendered(with:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#parameters","text":"Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedwithkey_1","text":"1 public func rendered Parent ( with context : RenderContext Parent , key : String = ) - Rendering where Output == AnyWorkflowAction Parent","title":"rendered(with:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#renderedwithkey_2","text":"1 public func rendered T ( with context : RenderContext T , key : String = ) - Rendering Creates or updates a child workflow of the given type, performs a render pass, and returns the result. Note that it is a programmer error to render two instances of a given workflow type with the same key during the same render pass. Parameter context: The context with which the workflow will be rendered. Parameter key: A string that uniquely identifies this workflow. Returns: The Rendering generated by the workflow.","title":"rendered(with:key:)"},{"location":"swift/api/Workflow/extensions/AnyWorkflowConvertible/#parameters_1","text":"Name Description context The context with which the workflow will be rendered. key A string that uniquely identifies this workflow.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/RenderContext/","text":"EXTENSION RenderContext Methods makeSink(of:onEvent:) 1 public func makeSink Event ( of eventType : Event . Type , onEvent : @ escaping ( Event , inout WorkflowType . State ) - WorkflowType . Output ?) - Sink Event awaitResult(for:) 1 public func awaitResult W ( for worker : W ) where W : Worker , W . Output : WorkflowAction , WorkflowType == W . Output . WorkflowType awaitResult(for:onOutput:) 1 public func awaitResult W ( for worker : W , onOutput : @ escaping ( W . Output , inout WorkflowType . State ) - WorkflowType . Output ?) where W : Worker","title":"RenderContext"},{"location":"swift/api/Workflow/extensions/RenderContext/#rendercontext","text":"","title":"RenderContext"},{"location":"swift/api/Workflow/extensions/RenderContext/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/RenderContext/#makesinkofonevent","text":"1 public func makeSink Event ( of eventType : Event . Type , onEvent : @ escaping ( Event , inout WorkflowType . State ) - WorkflowType . Output ?) - Sink Event","title":"makeSink(of:onEvent:)"},{"location":"swift/api/Workflow/extensions/RenderContext/#awaitresultfor","text":"1 public func awaitResult W ( for worker : W ) where W : Worker , W . Output : WorkflowAction , WorkflowType == W . Output . WorkflowType","title":"awaitResult(for:)"},{"location":"swift/api/Workflow/extensions/RenderContext/#awaitresultforonoutput","text":"1 public func awaitResult W ( for worker : W , onOutput : @ escaping ( W . Output , inout WorkflowType . State ) - WorkflowType . Output ?) where W : Worker","title":"awaitResult(for:onOutput:)"},{"location":"swift/api/Workflow/extensions/Worker/","text":"EXTENSION Worker Methods isEquivalent(to:) 1 public func isEquivalent ( to otherWorker : Self ) - Bool","title":"Worker"},{"location":"swift/api/Workflow/extensions/Worker/#worker","text":"","title":"Worker"},{"location":"swift/api/Workflow/extensions/Worker/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/Worker/#isequivalentto","text":"1 public func isEquivalent ( to otherWorker : Self ) - Bool","title":"isEquivalent(to:)"},{"location":"swift/api/Workflow/extensions/Workflow/","text":"EXTENSION Workflow Methods asAnyWorkflow() 1 public func asAnyWorkflow () - AnyWorkflow Rendering , Output","title":"Workflow"},{"location":"swift/api/Workflow/extensions/Workflow/#workflow","text":"","title":"Workflow"},{"location":"swift/api/Workflow/extensions/Workflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/Workflow/#asanyworkflow","text":"1 public func asAnyWorkflow () - AnyWorkflow Rendering , Output","title":"asAnyWorkflow()"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/","text":"EXTENSION WorkflowUpdateDebugInfo.Kind Methods encode(to:) 1 public func encode ( to encoder : Encoder ) throws Parameters Name Description encoder The encoder to write data to. init(from:) 1 public init ( from decoder : Decoder ) throws Parameters Name Description decoder The decoder to read data from.","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#workflowupdatedebuginfokind","text":"","title":"WorkflowUpdateDebugInfo.Kind"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#encodeto","text":"1 public func encode ( to encoder : Encoder ) throws","title":"encode(to:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#parameters","text":"Name Description encoder The encoder to write data to.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#initfrom","text":"1 public init ( from decoder : Decoder ) throws","title":"init(from:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Kind/#parameters_1","text":"Name Description decoder The decoder to read data from.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/","text":"EXTENSION WorkflowUpdateDebugInfo.Source Methods encode(to:) 1 public func encode ( to encoder : Encoder ) throws Parameters Name Description encoder The encoder to write data to. init(from:) 1 public init ( from decoder : Decoder ) throws Parameters Name Description decoder The decoder to read data from.","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#workflowupdatedebuginfosource","text":"","title":"WorkflowUpdateDebugInfo.Source"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#encodeto","text":"1 public func encode ( to encoder : Encoder ) throws","title":"encode(to:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#parameters","text":"Name Description encoder The encoder to write data to.","title":"Parameters"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#initfrom","text":"1 public init ( from decoder : Decoder ) throws","title":"init(from:)"},{"location":"swift/api/Workflow/extensions/WorkflowUpdateDebugInfo.Source/#parameters_1","text":"Name Description decoder The decoder to read data from.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/","text":"PROTOCOL AnyWorkflowConvertible 1 public protocol AnyWorkflowConvertible Conforming types can be converted into AnyWorkflow values, allowing them to participate in a workflow hierarchy. Methods asAnyWorkflow() 1 func asAnyWorkflow () - AnyWorkflow Rendering , Output Returns an AnyWorkflow representing this value.","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/#anyworkflowconvertible","text":"1 public protocol AnyWorkflowConvertible Conforming types can be converted into AnyWorkflow values, allowing them to participate in a workflow hierarchy.","title":"AnyWorkflowConvertible"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/AnyWorkflowConvertible/#asanyworkflow","text":"1 func asAnyWorkflow () - AnyWorkflow Rendering , Output Returns an AnyWorkflow representing this value.","title":"asAnyWorkflow()"},{"location":"swift/api/Workflow/protocols/Worker/","text":"PROTOCOL Worker 1 public protocol Worker Workers define a unit of asynchronous work. During a render pass, a workflow can ask the context to await the result of a worker. When this occurs, the context checks to see if there is already a running worker of the same type. If there is, and if the workers are equivalent , the context leaves the existing worker running. If there is not an existing worker of this type, the context will kick off the new worker (via run ). Methods run() 1 func run () - SignalProducer Output , Never Returns a signal producer to execute the work represented by this worker. isEquivalent(to:) 1 func isEquivalent ( to otherWorker : Self ) - Bool Returns true if the other worker should be considered equivalent to self . Equivalence should take into account whatever data is meaninful to the task. For example, a worker that loads a user account from a server would not be equivalent to another worker with a different user ID.","title":"Worker"},{"location":"swift/api/Workflow/protocols/Worker/#worker","text":"1 public protocol Worker Workers define a unit of asynchronous work. During a render pass, a workflow can ask the context to await the result of a worker. When this occurs, the context checks to see if there is already a running worker of the same type. If there is, and if the workers are equivalent , the context leaves the existing worker running. If there is not an existing worker of this type, the context will kick off the new worker (via run ).","title":"Worker"},{"location":"swift/api/Workflow/protocols/Worker/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/Worker/#run","text":"1 func run () - SignalProducer Output , Never Returns a signal producer to execute the work represented by this worker.","title":"run()"},{"location":"swift/api/Workflow/protocols/Worker/#isequivalentto","text":"1 func isEquivalent ( to otherWorker : Self ) - Bool Returns true if the other worker should be considered equivalent to self . Equivalence should take into account whatever data is meaninful to the task. For example, a worker that loads a user account from a server would not be equivalent to another worker with a different user ID.","title":"isEquivalent(to:)"},{"location":"swift/api/Workflow/protocols/Workflow/","text":"PROTOCOL Workflow 1 public protocol Workflow : AnyWorkflowConvertible Defines a node in the workflow tree. Initialization and Updating A workflow node comes into existence after its parent produces an instance of that workflow and uses it during a render pass (see the render method for more details). If this is the first time the parent has rendered a child of this type, a new workflow node is created. The workflow passed in from the parent will be used to invoke initialState() to obtain an initial state. If the parent had previously rendered a child of this type, the existing workflow node will be updated. workflowDidChange(from:state:) will be invoked to allow the workflow to respond to the change. Render After a workflow node has been created, or any time its state changes, a render pass occurs. The render pass takes the workflow that was passed down from the parent along with the current state and generates a value of type Rendering . In a common case, a workflow might render to a screen model for display. 1 2 3 func render(state: State, context: RenderContext Self ) - MyScreenModel { return MyScreenModel() } Methods makeInitialState() 1 func makeInitialState () - State This method is invoked once when a workflow node comes into existence. Returns: The initial state for the workflow. workflowDidChange(from:state:) 1 func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Called when a new workflow is passed down from the parent to an existing workflow node. Parameter previousWorkflow: The workflow before the update. Parameter state: The current state. Parameters Name Description previousWorkflow The workflow before the update. state The current state. render(state:context:) 1 func render ( state : State , context : RenderContext Self ) - Rendering Called to render the current state into Rendering . A workflow s Rendering type is commonly a view or screen model. Parameter state: The current state. Parameter context: The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state. The newly instantiated workflow is then used to invoke context.render(_ workflow:) , which returns the child s Rendering type after creating or updating the nested workflow. Parameters Name Description state The current state. context The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state. The newly instantiated workflow is then used to invoke context.render(_ workflow:) , which returns the child\u2019s Rendering type after creating or updating the nested workflow.","title":"Workflow"},{"location":"swift/api/Workflow/protocols/Workflow/#workflow","text":"1 public protocol Workflow : AnyWorkflowConvertible Defines a node in the workflow tree. Initialization and Updating A workflow node comes into existence after its parent produces an instance of that workflow and uses it during a render pass (see the render method for more details). If this is the first time the parent has rendered a child of this type, a new workflow node is created. The workflow passed in from the parent will be used to invoke initialState() to obtain an initial state. If the parent had previously rendered a child of this type, the existing workflow node will be updated. workflowDidChange(from:state:) will be invoked to allow the workflow to respond to the change. Render After a workflow node has been created, or any time its state changes, a render pass occurs. The render pass takes the workflow that was passed down from the parent along with the current state and generates a value of type Rendering . In a common case, a workflow might render to a screen model for display. 1 2 3 func render(state: State, context: RenderContext Self ) - MyScreenModel { return MyScreenModel() }","title":"Workflow"},{"location":"swift/api/Workflow/protocols/Workflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/Workflow/#makeinitialstate","text":"1 func makeInitialState () - State This method is invoked once when a workflow node comes into existence. Returns: The initial state for the workflow.","title":"makeInitialState()"},{"location":"swift/api/Workflow/protocols/Workflow/#workflowdidchangefromstate","text":"1 func workflowDidChange ( from previousWorkflow : Self , state : inout State ) Called when a new workflow is passed down from the parent to an existing workflow node. Parameter previousWorkflow: The workflow before the update. Parameter state: The current state.","title":"workflowDidChange(from:state:)"},{"location":"swift/api/Workflow/protocols/Workflow/#parameters","text":"Name Description previousWorkflow The workflow before the update. state The current state.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/Workflow/#renderstatecontext","text":"1 func render ( state : State , context : RenderContext Self ) - Rendering Called to render the current state into Rendering . A workflow s Rendering type is commonly a view or screen model. Parameter state: The current state. Parameter context: The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state. The newly instantiated workflow is then used to invoke context.render(_ workflow:) , which returns the child s Rendering type after creating or updating the nested workflow.","title":"render(state:context:)"},{"location":"swift/api/Workflow/protocols/Workflow/#parameters_1","text":"Name Description state The current state. context The workflow context is the composition point for the workflow tree. To use a nested workflow, instantiate it based on the current state. The newly instantiated workflow is then used to invoke context.render(_ workflow:) , which returns the child\u2019s Rendering type after creating or updating the nested workflow.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/WorkflowAction/","text":"PROTOCOL WorkflowAction 1 public protocol WorkflowAction Conforming types represent an action that advances a workflow. When applied, an action emits the next state and / or output for the workflow. Methods apply(toState:) 1 func apply ( toState state : inout WorkflowType . State ) - WorkflowType . Output ? Applies this action to a given state of the workflow, optionally returning an output event. Parameter state: The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application. Returns: An optional output event for the workflow. If an output event is returned, it will be passed up the workflow hierarchy to this workflow s parent. Parameters Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"WorkflowAction"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#workflowaction","text":"1 public protocol WorkflowAction Conforming types represent an action that advances a workflow. When applied, an action emits the next state and / or output for the workflow.","title":"WorkflowAction"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#applytostate","text":"1 func apply ( toState state : inout WorkflowType . State ) - WorkflowType . Output ? Applies this action to a given state of the workflow, optionally returning an output event. Parameter state: The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application. Returns: An optional output event for the workflow. If an output event is returned, it will be passed up the workflow hierarchy to this workflow s parent.","title":"apply(toState:)"},{"location":"swift/api/Workflow/protocols/WorkflowAction/#parameters","text":"Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/","text":"PROTOCOL WorkflowDebugger 1 public protocol WorkflowDebugger Defines a type that receives debug information about a running workflow hierarchy. Methods didEnterInitialState(snapshot:) 1 func didEnterInitialState ( snapshot : WorkflowHierarchyDebugSnapshot ) Called once when the workflow hierarchy initializes. Parameter snapshot: Debug information about the workflow hierarchy. Parameters Name Description snapshot Debug information about the workflow hierarchy. didUpdate(snapshot:updateInfo:) 1 func didUpdate ( snapshot : WorkflowHierarchyDebugSnapshot , updateInfo : WorkflowUpdateDebugInfo ) Called when an update occurs anywhere within the workflow hierarchy. Parameter snapshot: Debug information about the workflow hierarchy after the update. Parameter updateInfo: Information about the update. Parameters Name Description snapshot Debug information about the workflow hierarchy the update. updateInfo Information about the update.","title":"WorkflowDebugger"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#workflowdebugger","text":"1 public protocol WorkflowDebugger Defines a type that receives debug information about a running workflow hierarchy.","title":"WorkflowDebugger"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#didenterinitialstatesnapshot","text":"1 func didEnterInitialState ( snapshot : WorkflowHierarchyDebugSnapshot ) Called once when the workflow hierarchy initializes. Parameter snapshot: Debug information about the workflow hierarchy.","title":"didEnterInitialState(snapshot:)"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#parameters","text":"Name Description snapshot Debug information about the workflow hierarchy.","title":"Parameters"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#didupdatesnapshotupdateinfo","text":"1 func didUpdate ( snapshot : WorkflowHierarchyDebugSnapshot , updateInfo : WorkflowUpdateDebugInfo ) Called when an update occurs anywhere within the workflow hierarchy. Parameter snapshot: Debug information about the workflow hierarchy after the update. Parameter updateInfo: Information about the update.","title":"didUpdate(snapshot:updateInfo:)"},{"location":"swift/api/Workflow/protocols/WorkflowDebugger/#parameters_1","text":"Name Description snapshot Debug information about the workflow hierarchy the update. updateInfo Information about the update.","title":"Parameters"},{"location":"swift/api/Workflow/structs/AnyWorkflow/","text":"STRUCT AnyWorkflow 1 public struct AnyWorkflow Rendering , Output A type-erased wrapper that contains a workflow with the given Rendering and Output types. Properties workflowType 1 public var workflowType : Any . Type The underlying workflow s implementation type. Methods init(_:) 1 public init T : Workflow ( _ workflow : T ) where T . Rendering == Rendering , T . Output == Output Initializes a new type-erased wrapper for the given workflow.","title":"AnyWorkflow"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#anyworkflow","text":"1 public struct AnyWorkflow Rendering , Output A type-erased wrapper that contains a workflow with the given Rendering and Output types.","title":"AnyWorkflow"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#workflowtype","text":"1 public var workflowType : Any . Type The underlying workflow s implementation type.","title":"workflowType"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/structs/AnyWorkflow/#init_","text":"1 public init T : Workflow ( _ workflow : T ) where T . Rendering == Rendering , T . Output == Output Initializes a new type-erased wrapper for the given workflow.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/","text":"STRUCT AnyWorkflowAction 1 public struct AnyWorkflowAction WorkflowType : Workflow : WorkflowAction A type-erased workflow action. The AnyWorkflowAction type forwards apply to an underlying workflow action, hiding its specific underlying type, or to a closure that implements the apply logic. Methods init(_:) 1 public init E ( _ base : E ) where E : WorkflowAction , E . WorkflowType == WorkflowType Creates a type-erased workflow action that wraps the given instance. Parameter base: A workflow action to wrap. Parameters Name Description base A workflow action to wrap. init(_:) 1 public init ( _ apply : @ escaping ( inout WorkflowType . State ) - WorkflowType . Output ?) Creates a type-erased workflow action with the given apply implementation. Parameter apply: the apply function for the resulting action. Parameters Name Description apply the apply function for the resulting action. apply(toState:) 1 public func apply ( toState state : inout WorkflowType . State ) - WorkflowType . Output ? Parameters Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#anyworkflowaction","text":"1 public struct AnyWorkflowAction WorkflowType : Workflow : WorkflowAction A type-erased workflow action. The AnyWorkflowAction type forwards apply to an underlying workflow action, hiding its specific underlying type, or to a closure that implements the apply logic.","title":"AnyWorkflowAction"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#init_","text":"1 public init E ( _ base : E ) where E : WorkflowAction , E . WorkflowType == WorkflowType Creates a type-erased workflow action that wraps the given instance. Parameter base: A workflow action to wrap.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#parameters","text":"Name Description base A workflow action to wrap.","title":"Parameters"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#init__1","text":"1 public init ( _ apply : @ escaping ( inout WorkflowType . State ) - WorkflowType . Output ?) Creates a type-erased workflow action with the given apply implementation. Parameter apply: the apply function for the resulting action.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#parameters_1","text":"Name Description apply the apply function for the resulting action.","title":"Parameters"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#applytostate","text":"1 public func apply ( toState state : inout WorkflowType . State ) - WorkflowType . Output ?","title":"apply(toState:)"},{"location":"swift/api/Workflow/structs/AnyWorkflowAction/#parameters_2","text":"Name Description state The current state of the workflow. The state is passed as an inout param, allowing actions to modify state during application.","title":"Parameters"},{"location":"swift/api/Workflow/structs/Child/","text":"STRUCT Child 1 public struct Child : Codable , Equatable Properties key 1 public var key : String snapshot 1 public var snapshot : WorkflowHierarchyDebugSnapshot","title":"Child"},{"location":"swift/api/Workflow/structs/Child/#child","text":"1 public struct Child : Codable , Equatable","title":"Child"},{"location":"swift/api/Workflow/structs/Child/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/Child/#key","text":"1 public var key : String","title":"key"},{"location":"swift/api/Workflow/structs/Child/#snapshot","text":"1 public var snapshot : WorkflowHierarchyDebugSnapshot","title":"snapshot"},{"location":"swift/api/Workflow/structs/Sink/","text":"STRUCT Sink 1 public struct Sink Value Sink is a type that receives incoming values (commonly events or WorkflowAction ) Use RenderContext.makeSink to create instances. Methods init(_:) 1 public init ( _ onValue : @ escaping ( Value ) - Void ) Initializes a new sink with the given closure. send(_:) 1 public func send ( _ value : Value ) Sends a new event into the sink. Parameter event: The value to send into the sink. Parameters Name Description event The value to send into the sink. contraMap(_:) 1 public func contraMap NewValue ( _ transform : @ escaping ( NewValue ) - Value ) - Sink NewValue Generates a new sink of type NewValue. Given a transform closure, the following code is functionally equivalent: 1 sink.send(transform(value)) 1 sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type T into Type U via (T)- U . - contraMap turns Type T into Type U via (U)- T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API. Parameter transform: An escaping closure that transforms T into Event . Parameters Name Description transform An escaping closure that transforms T into Event .","title":"Sink"},{"location":"swift/api/Workflow/structs/Sink/#sink","text":"1 public struct Sink Value Sink is a type that receives incoming values (commonly events or WorkflowAction ) Use RenderContext.makeSink to create instances.","title":"Sink"},{"location":"swift/api/Workflow/structs/Sink/#methods","text":"","title":"Methods"},{"location":"swift/api/Workflow/structs/Sink/#init_","text":"1 public init ( _ onValue : @ escaping ( Value ) - Void ) Initializes a new sink with the given closure.","title":"init(_:)"},{"location":"swift/api/Workflow/structs/Sink/#send_","text":"1 public func send ( _ value : Value ) Sends a new event into the sink. Parameter event: The value to send into the sink.","title":"send(_:)"},{"location":"swift/api/Workflow/structs/Sink/#parameters","text":"Name Description event The value to send into the sink.","title":"Parameters"},{"location":"swift/api/Workflow/structs/Sink/#contramap_","text":"1 public func contraMap NewValue ( _ transform : @ escaping ( NewValue ) - Value ) - Sink NewValue Generates a new sink of type NewValue. Given a transform closure, the following code is functionally equivalent: 1 sink.send(transform(value)) 1 sink.contraMap(transform).send(value) Trivia : Why is this called contraMap ? - map turns Type T into Type U via (T)- U . - contraMap turns Type T into Type U via (U)- T Another way to think about this is: map transforms a type by changing the output types of its API, while contraMap transforms a type by changing the input types of its API. Parameter transform: An escaping closure that transforms T into Event .","title":"contraMap(_:)"},{"location":"swift/api/Workflow/structs/Sink/#parameters_1","text":"Name Description transform An escaping closure that transforms T into Event .","title":"Parameters"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/","text":"STRUCT WorkflowHierarchyDebugSnapshot 1 public struct WorkflowHierarchyDebugSnapshot : Codable , Equatable Properties workflowType 1 public var workflowType : String stateDescription 1 public var stateDescription : String children 1 public var children : [ Child ]","title":"WorkflowHierarchyDebugSnapshot"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#workflowhierarchydebugsnapshot","text":"1 public struct WorkflowHierarchyDebugSnapshot : Codable , Equatable","title":"WorkflowHierarchyDebugSnapshot"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#workflowtype","text":"1 public var workflowType : String","title":"workflowType"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#statedescription","text":"1 public var stateDescription : String","title":"stateDescription"},{"location":"swift/api/Workflow/structs/WorkflowHierarchyDebugSnapshot/#children","text":"1 public var children : [ Child ]","title":"children"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/","text":"STRUCT WorkflowUpdateDebugInfo 1 public struct WorkflowUpdateDebugInfo : Codable , Equatable Properties workflowType 1 public var workflowType : String kind 1 public var kind : Kind","title":"WorkflowUpdateDebugInfo"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#workflowupdatedebuginfo","text":"1 public struct WorkflowUpdateDebugInfo : Codable , Equatable","title":"WorkflowUpdateDebugInfo"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#properties","text":"","title":"Properties"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#workflowtype","text":"1 public var workflowType : String","title":"workflowType"},{"location":"swift/api/Workflow/structs/WorkflowUpdateDebugInfo/#kind","text":"1 public var kind : Kind","title":"kind"},{"location":"swift/api/WorkflowTesting/","text":"Reference Documentation This Reference Documentation has been generated with SourceDocs . Structs ExpectedOutput ExpectedState ExpectedWorker ExpectedWorkflow RenderExpectations WorkflowActionTester Classes RenderTester Extensions Workflow WorkflowAction","title":"WorkflowTesting "},{"location":"swift/api/WorkflowTesting/#reference-documentation","text":"This Reference Documentation has been generated with SourceDocs .","title":"Reference Documentation"},{"location":"swift/api/WorkflowTesting/#structs","text":"ExpectedOutput ExpectedState ExpectedWorker ExpectedWorkflow RenderExpectations WorkflowActionTester","title":"Structs"},{"location":"swift/api/WorkflowTesting/#classes","text":"RenderTester","title":"Classes"},{"location":"swift/api/WorkflowTesting/#extensions","text":"Workflow WorkflowAction","title":"Extensions"},{"location":"swift/api/WorkflowTesting/classes/RenderTester/","text":"CLASS RenderTester 1 public final class RenderTester WorkflowType : Workflow Testing helper for validating the behavior of calls to render . Usage: Set up a set of RenderExpectations and then validate with a call to render . Side-effects may be performed against the rendering to validate the behavior of actions. There is also a convenience render method where each expectation is an individual parameter. Child workflows will always be rendered based upon their initial state. To directly test actions and their effects, use the WorkflowActionTester . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 workflow .renderTester(initialState: TestWorkflow.State()) .render( with: RenderExpectations( expectedState: ExpectedState(state: TestWorkflow.State()), expectedOutput: ExpectedOutput(output: TestWorkflow.Output.finished), expectedWorkers: [ ExpectedWorker( worker: TestWorker(), output: TestWorker.Output.success), ..., ] expectedWorkflows: [ ExpectedWorkflow( type: ChildWorkflow.self, key: key , rendering: rendering , output: ChildWorkflow.Output.success), ..., ]), assertions: { rendering in XCTAssertEqual( expected text on rendering , rendering.text) } .render(...) // continue testing. The state will be updated based on actions or outputs. Using the convenience API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 workflow .renderTester(initialState: TestWorkflow.State()) .render( expectedState: ExpectedState(state: TestWorkflow.State()), expectedOutput: ExpectedOutput(output: TestWorkflow.Output.finished), expectedWorkers: [ ExpectedWorker( worker: TestWorker(), output: TestWorker.Output.success), ..., ] expectedWorkflows: [ ExpectedWorkflow( type: ChildWorkflow.self, key: key , rendering: rendering , output: ChildWorkflow.Output.success) ..., ], assertions: { rendering in XCTAssertEqual( expected text on rendering , rendering.text) } .render(...) // continue testing. The state will be updated based on actions or outputs. Validating the rendering only from the initial state provided by the workflow: 1 2 3 4 5 6 7 workflow .renderTester() .render( with: RenderExpectations(), assertions: { rendering in XCTAssertEqual( expected text on rendering , rendering.text) } Validate the state was updated from a callback on the rendering: 1 2 3 4 5 6 7 8 9 workflow .renderTester() .render( with: RenderExpectations( expectedState: ExpectedState(state: TestWorkflow.State(text: updated )), assertions: { rendering in XCTAssertEqual( expected text on rendering , rendering.text) rendering.updateText( updated ) } Validate an output was received from the workflow. The action() on the rendering will cause an action that will return an output. 1 2 3 4 5 6 7 8 workflow .renderTester() .render( with: RenderExpectations( expectedState: ExpectedOutput(output: .success) assertions: { rendering in rendering.action() } Validate a worker is running, and simulate the effect of its output: 1 2 3 4 5 6 7 8 9 10 11 12 workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .render( with: RenderExpectations( expectedState: ExpectedState(state: TestWorkflow.State(loadingState: .idle)), expectedWorkers: [ ExpectedWorker( worker: TestWorker(), output: TestWorker.Output.success), ..., ]), assertions: {} Validate a child workflow is run, and simulate the effect of its output: 1 2 3 4 5 6 7 8 9 10 11 12 workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .render( with: RenderExpectations( expectedState: ExpectedState(state: TestWorkflow.State(loadingState: .idle)), expectedWorkflows: [ ExpectedWorkflow( type: ChildWorkflow.self, rendering: rendering , output: ChildWorkflow.Output.success ]), assertions: {} Methods render(with:assertions:file:line:) 1 public func render ( with expectations : RenderExpectations WorkflowType , assertions : ( WorkflowType . Rendering ) - Void , file : StaticString = #file , line : UInt = #line ) - RenderTester WorkflowType Call render with a set of expectations. If the expectations have not been fulfilled, the test will fail. render(expectedState:expectedOutput:expectedWorkers:expectedWorkflows:assertions:file:line:) 1 2 3 4 5 6 7 8 public func render ( expectedState : ExpectedState WorkflowType ? = nil , expectedOutput : ExpectedOutput WorkflowType ? = nil , expectedWorkers : [ ExpectedWorker ] = [], expectedWorkflows : [ ExpectedWorkflow ] = [], assertions : ( WorkflowType . Rendering ) - Void , file : StaticString = #file , line : UInt = #line ) - RenderTester WorkflowType Convenience method for testing without creating an explicit RenderExpectation. assert(state:) 1 public func assert ( state assertions : ( WorkflowType . State ) - Void ) - RenderTester WorkflowType Assert the internal state.","title":"RenderTester"},{"location":"swift/api/WorkflowTesting/classes/RenderTester/#rendertester","text":"1 public final class RenderTester WorkflowType : Workflow Testing helper for validating the behavior of calls to render . Usage: Set up a set of RenderExpectations and then validate with a call to render . Side-effects may be performed against the rendering to validate the behavior of actions. There is also a convenience render method where each expectation is an individual parameter. Child workflows will always be rendered based upon their initial state. To directly test actions and their effects, use the WorkflowActionTester . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 workflow .renderTester(initialState: TestWorkflow.State()) .render( with: RenderExpectations( expectedState: ExpectedState(state: TestWorkflow.State()), expectedOutput: ExpectedOutput(output: TestWorkflow.Output.finished), expectedWorkers: [ ExpectedWorker( worker: TestWorker(), output: TestWorker.Output.success), ..., ] expectedWorkflows: [ ExpectedWorkflow( type: ChildWorkflow.self, key: key , rendering: rendering , output: ChildWorkflow.Output.success), ..., ]), assertions: { rendering in XCTAssertEqual( expected text on rendering , rendering.text) } .render(...) // continue testing. The state will be updated based on actions or outputs. Using the convenience API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 workflow .renderTester(initialState: TestWorkflow.State()) .render( expectedState: ExpectedState(state: TestWorkflow.State()), expectedOutput: ExpectedOutput(output: TestWorkflow.Output.finished), expectedWorkers: [ ExpectedWorker( worker: TestWorker(), output: TestWorker.Output.success), ..., ] expectedWorkflows: [ ExpectedWorkflow( type: ChildWorkflow.self, key: key , rendering: rendering , output: ChildWorkflow.Output.success) ..., ], assertions: { rendering in XCTAssertEqual( expected text on rendering , rendering.text) } .render(...) // continue testing. The state will be updated based on actions or outputs. Validating the rendering only from the initial state provided by the workflow: 1 2 3 4 5 6 7 workflow .renderTester() .render( with: RenderExpectations(), assertions: { rendering in XCTAssertEqual( expected text on rendering , rendering.text) } Validate the state was updated from a callback on the rendering: 1 2 3 4 5 6 7 8 9 workflow .renderTester() .render( with: RenderExpectations( expectedState: ExpectedState(state: TestWorkflow.State(text: updated )), assertions: { rendering in XCTAssertEqual( expected text on rendering , rendering.text) rendering.updateText( updated ) } Validate an output was received from the workflow. The action() on the rendering will cause an action that will return an output. 1 2 3 4 5 6 7 8 workflow .renderTester() .render( with: RenderExpectations( expectedState: ExpectedOutput(output: .success) assertions: { rendering in rendering.action() } Validate a worker is running, and simulate the effect of its output: 1 2 3 4 5 6 7 8 9 10 11 12 workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .render( with: RenderExpectations( expectedState: ExpectedState(state: TestWorkflow.State(loadingState: .idle)), expectedWorkers: [ ExpectedWorker( worker: TestWorker(), output: TestWorker.Output.success), ..., ]), assertions: {} Validate a child workflow is run, and simulate the effect of its output: 1 2 3 4 5 6 7 8 9 10 11 12 workflow .renderTester(initialState: TestWorkflow.State(loadingState: .loading)) .render( with: RenderExpectations( expectedState: ExpectedState(state: TestWorkflow.State(loadingState: .idle)), expectedWorkflows: [ ExpectedWorkflow( type: ChildWorkflow.self, rendering: rendering , output: ChildWorkflow.Output.success ]), assertions: {}","title":"RenderTester"},{"location":"swift/api/WorkflowTesting/classes/RenderTester/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/classes/RenderTester/#renderwithassertionsfileline","text":"1 public func render ( with expectations : RenderExpectations WorkflowType , assertions : ( WorkflowType . Rendering ) - Void , file : StaticString = #file , line : UInt = #line ) - RenderTester WorkflowType Call render with a set of expectations. If the expectations have not been fulfilled, the test will fail.","title":"render(with:assertions:file:line:)"},{"location":"swift/api/WorkflowTesting/classes/RenderTester/#renderexpectedstateexpectedoutputexpectedworkersexpectedworkflowsassertionsfileline","text":"1 2 3 4 5 6 7 8 public func render ( expectedState : ExpectedState WorkflowType ? = nil , expectedOutput : ExpectedOutput WorkflowType ? = nil , expectedWorkers : [ ExpectedWorker ] = [], expectedWorkflows : [ ExpectedWorkflow ] = [], assertions : ( WorkflowType . Rendering ) - Void , file : StaticString = #file , line : UInt = #line ) - RenderTester WorkflowType Convenience method for testing without creating an explicit RenderExpectation.","title":"render(expectedState:expectedOutput:expectedWorkers:expectedWorkflows:assertions:file:line:)"},{"location":"swift/api/WorkflowTesting/classes/RenderTester/#assertstate","text":"1 public func assert ( state assertions : ( WorkflowType . State ) - Void ) - RenderTester WorkflowType Assert the internal state.","title":"assert(state:)"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/","text":"EXTENSION Workflow Methods renderTester(initialState:) 1 public func renderTester ( initialState : Self . State ) - RenderTester Self Returns a RenderTester with a specified initial state. renderTester() 1 public func renderTester () - RenderTester Self Returns a RenderTester with an initial state provided by self.makeInitialState()","title":"Workflow"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#workflow","text":"","title":"Workflow"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#rendertesterinitialstate","text":"1 public func renderTester ( initialState : Self . State ) - RenderTester Self Returns a RenderTester with a specified initial state.","title":"renderTester(initialState:)"},{"location":"swift/api/WorkflowTesting/extensions/Workflow/#rendertester","text":"1 public func renderTester () - RenderTester Self Returns a RenderTester with an initial state provided by self.makeInitialState()","title":"renderTester()"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/","text":"EXTENSION WorkflowAction Methods tester(withState:) 1 public static func tester ( withState state : WorkflowType . State ) - WorkflowActionTester WorkflowType , Self Returns a state tester containing self .","title":"WorkflowAction"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/#workflowaction","text":"","title":"WorkflowAction"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/extensions/WorkflowAction/#testerwithstate","text":"1 public static func tester ( withState state : WorkflowType . State ) - WorkflowActionTester WorkflowType , Self Returns a state tester containing self .","title":"tester(withState:)"},{"location":"swift/api/WorkflowTesting/structs/ExpectedOutput/","text":"STRUCT ExpectedOutput 1 public struct ExpectedOutput WorkflowType : Workflow Methods init(output:isEquivalent:) 1 public init Output ( output : Output , isEquivalent : @ escaping ( Output , Output ) - Bool ) where Output == WorkflowType . Output init(output:) 1 public init Output ( output : Output ) where Output == WorkflowType . Output , Output : Equatable","title":"ExpectedOutput"},{"location":"swift/api/WorkflowTesting/structs/ExpectedOutput/#expectedoutput","text":"1 public struct ExpectedOutput WorkflowType : Workflow","title":"ExpectedOutput"},{"location":"swift/api/WorkflowTesting/structs/ExpectedOutput/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/ExpectedOutput/#initoutputisequivalent","text":"1 public init Output ( output : Output , isEquivalent : @ escaping ( Output , Output ) - Bool ) where Output == WorkflowType . Output","title":"init(output:isEquivalent:)"},{"location":"swift/api/WorkflowTesting/structs/ExpectedOutput/#initoutput","text":"1 public init Output ( output : Output ) where Output == WorkflowType . Output , Output : Equatable","title":"init(output:)"},{"location":"swift/api/WorkflowTesting/structs/ExpectedState/","text":"STRUCT ExpectedState 1 public struct ExpectedState WorkflowType : Workflow Methods init(state:isEquivalent:) 1 public init State ( state : State , isEquivalent : @ escaping ( State , State ) - Bool ) where State == WorkflowType . State Create a new expected state from a state with an equivalence block. isEquivalent will be called to validate that the expected state matches the actual state after a render pass. init(state:) 1 public init State ( state : State ) where WorkflowType . State == State , State : Equatable","title":"ExpectedState"},{"location":"swift/api/WorkflowTesting/structs/ExpectedState/#expectedstate","text":"1 public struct ExpectedState WorkflowType : Workflow","title":"ExpectedState"},{"location":"swift/api/WorkflowTesting/structs/ExpectedState/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/ExpectedState/#initstateisequivalent","text":"1 public init State ( state : State , isEquivalent : @ escaping ( State , State ) - Bool ) where State == WorkflowType . State Create a new expected state from a state with an equivalence block. isEquivalent will be called to validate that the expected state matches the actual state after a render pass.","title":"init(state:isEquivalent:)"},{"location":"swift/api/WorkflowTesting/structs/ExpectedState/#initstate","text":"1 public init State ( state : State ) where WorkflowType . State == State , State : Equatable","title":"init(state:)"},{"location":"swift/api/WorkflowTesting/structs/ExpectedWorker/","text":"STRUCT ExpectedWorker 1 public struct ExpectedWorker Methods init(worker:output:) 1 public init WorkerType : Worker ( worker : WorkerType , output : WorkerType . Output ? = nil ) Create a new expected worker with an optional output. If output is not nil, it will be emitted when this worker is declared in the render pass.","title":"ExpectedWorker"},{"location":"swift/api/WorkflowTesting/structs/ExpectedWorker/#expectedworker","text":"1 public struct ExpectedWorker","title":"ExpectedWorker"},{"location":"swift/api/WorkflowTesting/structs/ExpectedWorker/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/ExpectedWorker/#initworkeroutput","text":"1 public init WorkerType : Worker ( worker : WorkerType , output : WorkerType . Output ? = nil ) Create a new expected worker with an optional output. If output is not nil, it will be emitted when this worker is declared in the render pass.","title":"init(worker:output:)"},{"location":"swift/api/WorkflowTesting/structs/ExpectedWorkflow/","text":"STRUCT ExpectedWorkflow 1 public struct ExpectedWorkflow Methods init(type:key:rendering:output:) 1 public init WorkflowType : Workflow ( type : WorkflowType . Type , key : String = , rendering : WorkflowType . Rendering , output : WorkflowType . Output ? = nil )","title":"ExpectedWorkflow"},{"location":"swift/api/WorkflowTesting/structs/ExpectedWorkflow/#expectedworkflow","text":"1 public struct ExpectedWorkflow","title":"ExpectedWorkflow"},{"location":"swift/api/WorkflowTesting/structs/ExpectedWorkflow/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/ExpectedWorkflow/#inittypekeyrenderingoutput","text":"1 public init WorkflowType : Workflow ( type : WorkflowType . Type , key : String = , rendering : WorkflowType . Rendering , output : WorkflowType . Output ? = nil )","title":"init(type:key:rendering:output:)"},{"location":"swift/api/WorkflowTesting/structs/RenderExpectations/","text":"STRUCT RenderExpectations 1 public struct RenderExpectations WorkflowType : Workflow A set of expectations for use with the WorkflowRenderTester . All of the expectations must be fulfilled for a render test to pass. Methods init(expectedState:expectedOutput:expectedWorkers:expectedWorkflows:) 1 2 3 4 5 public init ( expectedState : ExpectedState WorkflowType ? = nil , expectedOutput : ExpectedOutput WorkflowType ? = nil , expectedWorkers : [ ExpectedWorker ] = [], expectedWorkflows : [ ExpectedWorkflow ] = [])","title":"RenderExpectations"},{"location":"swift/api/WorkflowTesting/structs/RenderExpectations/#renderexpectations","text":"1 public struct RenderExpectations WorkflowType : Workflow A set of expectations for use with the WorkflowRenderTester . All of the expectations must be fulfilled for a render test to pass.","title":"RenderExpectations"},{"location":"swift/api/WorkflowTesting/structs/RenderExpectations/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/RenderExpectations/#initexpectedstateexpectedoutputexpectedworkersexpectedworkflows","text":"1 2 3 4 5 public init ( expectedState : ExpectedState WorkflowType ? = nil , expectedOutput : ExpectedOutput WorkflowType ? = nil , expectedWorkers : [ ExpectedWorker ] = [], expectedWorkflows : [ ExpectedWorkflow ] = [])","title":"init(expectedState:expectedOutput:expectedWorkers:expectedWorkflows:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/","text":"STRUCT WorkflowActionTester 1 public struct WorkflowActionTester WorkflowType , Action where Action : WorkflowAction , Action . WorkflowType == WorkflowType Testing helper that chains event sending and state/output assertions to make tests easier to write. 1 2 3 4 5 6 7 8 9 10 11 reducer .tester(withState: .firstState) .assertState { state in XCTAssertEqual(.firstState, state) } .send(event: .exampleEvent) { output in XCTAssertEqual(.finished, output) } .assertState { state in XCTAssertEqual(.differentState, state) } Methods send(action:outputAssertions:) 1 public func send ( action : Action , outputAssertions : ( WorkflowType . Output ?) - Void = { _ in }) - WorkflowActionTester WorkflowType , Action Sends an event to the reducer. parameter event: The event to send. parameter outputAssertions: An optional closure that runs validations on the output generated by the reducer. returns: A new state tester containing the state after the update. Parameters Name Description event The event to send. outputAssertions An optional closure that runs validations on the output generated by the reducer. assertState(_:) 1 public func assertState ( _ assertions : ( WorkflowType . State ) - Void ) - WorkflowActionTester WorkflowType , Action Invokes the given closure (which is intended to contain test assertions) with the current state. parameter assertions: A closure that accepts a single state value. returns: A tester containing the current state. Parameters Name Description assertions A closure that accepts a single state value.","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#workflowactiontester","text":"1 public struct WorkflowActionTester WorkflowType , Action where Action : WorkflowAction , Action . WorkflowType == WorkflowType Testing helper that chains event sending and state/output assertions to make tests easier to write. 1 2 3 4 5 6 7 8 9 10 11 reducer .tester(withState: .firstState) .assertState { state in XCTAssertEqual(.firstState, state) } .send(event: .exampleEvent) { output in XCTAssertEqual(.finished, output) } .assertState { state in XCTAssertEqual(.differentState, state) }","title":"WorkflowActionTester"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#sendactionoutputassertions","text":"1 public func send ( action : Action , outputAssertions : ( WorkflowType . Output ?) - Void = { _ in }) - WorkflowActionTester WorkflowType , Action Sends an event to the reducer. parameter event: The event to send. parameter outputAssertions: An optional closure that runs validations on the output generated by the reducer. returns: A new state tester containing the state after the update.","title":"send(action:outputAssertions:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#parameters","text":"Name Description event The event to send. outputAssertions An optional closure that runs validations on the output generated by the reducer.","title":"Parameters"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#assertstate_","text":"1 public func assertState ( _ assertions : ( WorkflowType . State ) - Void ) - WorkflowActionTester WorkflowType , Action Invokes the given closure (which is intended to contain test assertions) with the current state. parameter assertions: A closure that accepts a single state value. returns: A tester containing the current state.","title":"assertState(_:)"},{"location":"swift/api/WorkflowTesting/structs/WorkflowActionTester/#parameters_1","text":"Name Description assertions A closure that accepts a single state value.","title":"Parameters"},{"location":"swift/api/WorkflowUI/","text":"Reference Documentation This Reference Documentation has been generated with SourceDocs . Protocols Screen Structs AnyScreen ViewRegistry Classes ContainerViewController","title":"WorkflowUI "},{"location":"swift/api/WorkflowUI/#reference-documentation","text":"This Reference Documentation has been generated with SourceDocs .","title":"Reference Documentation"},{"location":"swift/api/WorkflowUI/#protocols","text":"Screen","title":"Protocols"},{"location":"swift/api/WorkflowUI/#structs","text":"AnyScreen ViewRegistry","title":"Structs"},{"location":"swift/api/WorkflowUI/#classes","text":"ContainerViewController","title":"Classes"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/","text":"CLASS ContainerViewController 1 public final class ContainerViewController Output , ScreenType : UIViewController where ScreenType : Screen Drives view controllers from a root Workflow. Properties output 1 public let output : Signal Output , Never Emits output events from the bound workflow. childForStatusBarStyle 1 public override var childForStatusBarStyle : UIViewController ? childForStatusBarHidden 1 public override var childForStatusBarHidden : UIViewController ? childForHomeIndicatorAutoHidden 1 public override var childForHomeIndicatorAutoHidden : UIViewController ? childForScreenEdgesDeferringSystemGestures 1 public override var childForScreenEdgesDeferringSystemGestures : UIViewController ? supportedInterfaceOrientations 1 public override var supportedInterfaceOrientations : UIInterfaceOrientationMask Methods init(workflow:viewRegistry:) 1 public convenience init W : Workflow ( workflow : W , viewRegistry : ViewRegistry ) where W . Rendering == ScreenType , W . Output == Output init(coder:) 1 required public init ?( coder aDecoder : NSCoder ) viewDidLoad() 1 override public func viewDidLoad () viewDidLayoutSubviews() 1 override public func viewDidLayoutSubviews ()","title":"ContainerViewController"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#containerviewcontroller","text":"1 public final class ContainerViewController Output , ScreenType : UIViewController where ScreenType : Screen Drives view controllers from a root Workflow.","title":"ContainerViewController"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#properties","text":"","title":"Properties"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#output","text":"1 public let output : Signal Output , Never Emits output events from the bound workflow.","title":"output"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforstatusbarstyle","text":"1 public override var childForStatusBarStyle : UIViewController ?","title":"childForStatusBarStyle"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforstatusbarhidden","text":"1 public override var childForStatusBarHidden : UIViewController ?","title":"childForStatusBarHidden"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforhomeindicatorautohidden","text":"1 public override var childForHomeIndicatorAutoHidden : UIViewController ?","title":"childForHomeIndicatorAutoHidden"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#childforscreenedgesdeferringsystemgestures","text":"1 public override var childForScreenEdgesDeferringSystemGestures : UIViewController ?","title":"childForScreenEdgesDeferringSystemGestures"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#supportedinterfaceorientations","text":"1 public override var supportedInterfaceOrientations : UIInterfaceOrientationMask","title":"supportedInterfaceOrientations"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#initworkflowviewregistry","text":"1 public convenience init W : Workflow ( workflow : W , viewRegistry : ViewRegistry ) where W . Rendering == ScreenType , W . Output == Output","title":"init(workflow:viewRegistry:)"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#initcoder","text":"1 required public init ?( coder aDecoder : NSCoder )","title":"init(coder:)"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#viewdidload","text":"1 override public func viewDidLoad ()","title":"viewDidLoad()"},{"location":"swift/api/WorkflowUI/classes/ContainerViewController/#viewdidlayoutsubviews","text":"1 override public func viewDidLayoutSubviews ()","title":"viewDidLayoutSubviews()"},{"location":"swift/api/WorkflowUI/protocols/Screen/","text":"PROTOCOL Screen 1 public protocol Screen Screens are the building blocks of an interactive application. Conforming types contain any information needed to populate a screen: data, styling, event handlers, etc.","title":"Screen"},{"location":"swift/api/WorkflowUI/protocols/Screen/#screen","text":"1 public protocol Screen Screens are the building blocks of an interactive application. Conforming types contain any information needed to populate a screen: data, styling, event handlers, etc.","title":"Screen"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/","text":"STRUCT AnyScreen 1 public struct AnyScreen : Screen Methods init(_:) 1 public init T : Screen ( _ screen : T )","title":"AnyScreen"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#anyscreen","text":"1 public struct AnyScreen : Screen","title":"AnyScreen"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/structs/AnyScreen/#init_","text":"1 public init T : Screen ( _ screen : T )","title":"init(_:)"},{"location":"swift/api/WorkflowUI/structs/ViewRegistry/","text":"STRUCT ViewRegistry 1 public struct ViewRegistry Maps screen models into live views. In order for the registry to handle a given screen type, a view factory must first be registered using register(screenType:factory:) , where the factory is a simple closure that is responsible for instantiating a view. Methods init() 1 public init () Initializes an empty registry. register(screenViewControllerType:) 1 public mutating func register ViewControllerType , ScreenType ( screenViewControllerType : ViewControllerType . Type ) where ViewControllerType : ScreenViewController ScreenType Convenience registration method that wraps a simple UIViewController in a ScreenViewController to provide convenient update methods. canProvideView(for:) 1 public func canProvideView T ( for screenType : T . Type ) - Bool where T : Screen Returns true is a factory block has previously been registered for the screen type T . provideView(for:) 1 public func provideView T ( for screen : T ) - ScreenViewController T where T : Screen Instantiates and returns a view instance for the given screen model. Note that you must check canProvideView(for:) before calling this method. Calling provideView(for:) with a screen type that was not previously registered is a programmer error, and the application will crash. merge(with:) 1 public mutating func merge ( with otherRegistry : ViewRegistry ) Merges from another registry. If a screen type is registered with both, the definition from the other registry will replace the original in self . merged(with:) 1 public func merged ( with otherRegistry : ViewRegistry ) - ViewRegistry The returned value is identical to the result of calling merge(from:) on self .","title":"ViewRegistry"},{"location":"swift/api/WorkflowUI/structs/ViewRegistry/#viewregistry","text":"1 public struct ViewRegistry Maps screen models into live views. In order for the registry to handle a given screen type, a view factory must first be registered using register(screenType:factory:) , where the factory is a simple closure that is responsible for instantiating a view.","title":"ViewRegistry"},{"location":"swift/api/WorkflowUI/structs/ViewRegistry/#methods","text":"","title":"Methods"},{"location":"swift/api/WorkflowUI/structs/ViewRegistry/#init","text":"1 public init () Initializes an empty registry.","title":"init()"},{"location":"swift/api/WorkflowUI/structs/ViewRegistry/#registerscreenviewcontrollertype","text":"1 public mutating func register ViewControllerType , ScreenType ( screenViewControllerType : ViewControllerType . Type ) where ViewControllerType : ScreenViewController ScreenType Convenience registration method that wraps a simple UIViewController in a ScreenViewController to provide convenient update methods.","title":"register(screenViewControllerType:)"},{"location":"swift/api/WorkflowUI/structs/ViewRegistry/#canprovideviewfor","text":"1 public func canProvideView T ( for screenType : T . Type ) - Bool where T : Screen Returns true is a factory block has previously been registered for the screen type T .","title":"canProvideView(for:)"},{"location":"swift/api/WorkflowUI/structs/ViewRegistry/#provideviewfor","text":"1 public func provideView T ( for screen : T ) - ScreenViewController T where T : Screen Instantiates and returns a view instance for the given screen model. Note that you must check canProvideView(for:) before calling this method. Calling provideView(for:) with a screen type that was not previously registered is a programmer error, and the application will crash.","title":"provideView(for:)"},{"location":"swift/api/WorkflowUI/structs/ViewRegistry/#mergewith","text":"1 public mutating func merge ( with otherRegistry : ViewRegistry ) Merges from another registry. If a screen type is registered with both, the definition from the other registry will replace the original in self .","title":"merge(with:)"},{"location":"swift/api/WorkflowUI/structs/ViewRegistry/#mergedwith","text":"1 public func merged ( with otherRegistry : ViewRegistry ) - ViewRegistry The returned value is identical to the result of calling merge(from:) on self .","title":"merged(with:)"},{"location":"tutorial/","text":"Swift Tip For a comprehensive tutorial with code that you can build and follow along with, see the Tutorials in the repo. This section will be restructured soon to incorporate that and Kotlin tutorials. The Workflow infrastructure is split into several modules. Workflow The Workflow library contains the core types that are used to implement state-driven workflows, including the Workflow protocol and related indrastructure. WorkflowUI Contains the basic infrastructure required to build a Workflow-based application that uses UIKit . Workflow for iOS makes extensive use of ReactiveSwift . If you are new to reactive programming, you may want to familiarize yourself with some of the basics. Workflow takes care of a lot of the reactive plumbing in a typical application, but you will have a better time if you understand what the framework is doing. Core Reactive Primitives Basic Operators How does ReactiveSwift relate to RxSwift? Next Steps Tooling Adding Workflow to a Project Building a Workflow Building a View Controller from a Screen Using a Workflow to Show UI","title":"Overview"},{"location":"tutorial/#swift","text":"Tip For a comprehensive tutorial with code that you can build and follow along with, see the Tutorials in the repo. This section will be restructured soon to incorporate that and Kotlin tutorials. The Workflow infrastructure is split into several modules.","title":"Swift"},{"location":"tutorial/#workflow","text":"The Workflow library contains the core types that are used to implement state-driven workflows, including the Workflow protocol and related indrastructure.","title":"Workflow"},{"location":"tutorial/#workflowui","text":"Contains the basic infrastructure required to build a Workflow-based application that uses UIKit . Workflow for iOS makes extensive use of ReactiveSwift . If you are new to reactive programming, you may want to familiarize yourself with some of the basics. Workflow takes care of a lot of the reactive plumbing in a typical application, but you will have a better time if you understand what the framework is doing. Core Reactive Primitives Basic Operators How does ReactiveSwift relate to RxSwift?","title":"WorkflowUI"},{"location":"tutorial/#next-steps","text":"Tooling Adding Workflow to a Project Building a Workflow Building a View Controller from a Screen Using a Workflow to Show UI","title":"Next Steps"},{"location":"tutorial/adding-workflow-to-a-project/","text":"Adding Workflow to a project This document will guide you through the process of adding Workflow to an iOS project. Libraries You ll need the following four libraries: 1 2 3 import Workflow import WorkflowUI import ReactiveSwift The easiest way to integrate these libraries is via Cocoapods. If you are using Cocoapods, you can simply add the dependencies to your .podspec . 1 2 3 4 5 6 7 8 9 10 # MySoftware.podspec Pod :: Spec . new do | s | # ... s . dependency Workflow s . dependency WorkflowUI s . dependency ReactiveSwift # ... end","title":"Adding Workflow to a project"},{"location":"tutorial/adding-workflow-to-a-project/#adding-workflow-to-a-project","text":"This document will guide you through the process of adding Workflow to an iOS project.","title":"Adding Workflow to a project"},{"location":"tutorial/adding-workflow-to-a-project/#libraries","text":"You ll need the following four libraries: 1 2 3 import Workflow import WorkflowUI import ReactiveSwift The easiest way to integrate these libraries is via Cocoapods. If you are using Cocoapods, you can simply add the dependencies to your .podspec . 1 2 3 4 5 6 7 8 9 10 # MySoftware.podspec Pod :: Spec . new do | s | # ... s . dependency Workflow s . dependency WorkflowUI s . dependency ReactiveSwift # ... end","title":"Libraries"},{"location":"tutorial/building-a-view-controller-from-screen/","text":"Building a View Controller from a Screen Now that we have a workflow, we need a way to map our screen to an actual view controller. ScreenViewController The ScreenViewController provides a base class that hides the plumbing of updating a view controller from a view model update. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 struct DemoScreen : Screen { let title : String let onTap : () - Void } class DemoScreenViewController : ScreenViewController DemoScreen { private let button : UIButton required init ( screen : DemoScreen , viewRegistry : ViewRegistry ) { button = UIButton () super . init ( screen : screen , viewRegistry : viewRegistry ) update ( screen : screen ) } override func viewDidLoad () { super . viewDidLoad () button . addTarget ( self , action : #selector ( buttonPressed ( sender :)), for : . touchUpInside ) view . addSubview ( button ) } override func viewWillLayoutSubviews () { super . viewWillLayoutSubviews () button . frame = view . bounds } override func screenDidChange ( from previousScreen : DemoScreen ) { super . screenDidChange ( from : previousScreen ) update ( screen : screen ) } private func update ( screen : DemoScreen ) { button . setTitle ( screen . title , for : . normal ) } @objc private func buttonPressed ( sender : UIButton ) { screen . onTap () } } Lifecycle When the view controller is first created, it is given the initial screen value. In the example, we create the button and set the title for it via the update method. The view loads as normal, adding the button the hierarchy and setting up the target:action for the button being pressed. The button is tapped. When the callback is called, we call the onTap closure passed into the screen. The workflow will handle this event, update its state, and a new screen will be rendered. The updated screen is passed to the view controller via the screenDidChange(from previousScreen:) method. Again, the view controller updates the title of the button based on what was passed in the screen.","title":"Building a View Controller from a Screen"},{"location":"tutorial/building-a-view-controller-from-screen/#building-a-view-controller-from-a-screen","text":"Now that we have a workflow, we need a way to map our screen to an actual view controller.","title":"Building a View Controller from a Screen"},{"location":"tutorial/building-a-view-controller-from-screen/#screenviewcontroller","text":"The ScreenViewController provides a base class that hides the plumbing of updating a view controller from a view model update. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 struct DemoScreen : Screen { let title : String let onTap : () - Void } class DemoScreenViewController : ScreenViewController DemoScreen { private let button : UIButton required init ( screen : DemoScreen , viewRegistry : ViewRegistry ) { button = UIButton () super . init ( screen : screen , viewRegistry : viewRegistry ) update ( screen : screen ) } override func viewDidLoad () { super . viewDidLoad () button . addTarget ( self , action : #selector ( buttonPressed ( sender :)), for : . touchUpInside ) view . addSubview ( button ) } override func viewWillLayoutSubviews () { super . viewWillLayoutSubviews () button . frame = view . bounds } override func screenDidChange ( from previousScreen : DemoScreen ) { super . screenDidChange ( from : previousScreen ) update ( screen : screen ) } private func update ( screen : DemoScreen ) { button . setTitle ( screen . title , for : . normal ) } @objc private func buttonPressed ( sender : UIButton ) { screen . onTap () } }","title":"ScreenViewController"},{"location":"tutorial/building-a-view-controller-from-screen/#lifecycle","text":"When the view controller is first created, it is given the initial screen value. In the example, we create the button and set the title for it via the update method. The view loads as normal, adding the button the hierarchy and setting up the target:action for the button being pressed. The button is tapped. When the callback is called, we call the onTap closure passed into the screen. The workflow will handle this event, update its state, and a new screen will be rendered. The updated screen is passed to the view controller via the screenDidChange(from previousScreen:) method. Again, the view controller updates the title of the button based on what was passed in the screen.","title":"Lifecycle"},{"location":"tutorial/building-a-workflow/","text":"Building a Workflow Introduction A simple workflow looks something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 struct DemoWorkflow : Workflow { var name : String init ( name : String ) { self . name = name } } extension DemoWorkflow { struct State {} func makeInitialState () - State { return State () } func workflowDidChange ( from previousWorkflow : DemoWorkflow , state : inout State ) { } func render ( state : State , context : RenderContext DemoWorkflow ) - String { return Hello, \\( name ) } } A type conforming to Workflow represents a single node in the workflow tree. It should contain any values that must be provided by its parent (who is generally responsible for creating child workflows). Configuration parameters, strings, network services\u2026 If your workflow needs access to a value or object that it cannot create itself, they should be passed into the workflow s initializer. Every workflow defines its own State type to contain any data that should persist through subsequent render passes. Render Workflows are only useful when they render a value for use by their parent (or, if they are the root workflow, for display). This type is very commonly a view model, or Screen . The render(state:context:) method has a couple of parameters, so we\u2019ll work through them one by one. 1 func render ( state : State , context : RenderContext DemoWorkflow ) - Rendering state Contains a value of type State to provide access to the current state. Any time the state of workflow changes, render is called again to take into account the change in state. context The render context: provides a way for a workflow to defer to nested (child) workflows to generate some or all of its rendered output. We\u2019ll walk through that process later on when we cover composition. allows a workflow to request the execution of asynchronous tasks ( Worker s) generates event handlers for use in constructing view models. In order for us to see the anything in our app, we ll need to return a Screen that can be turned into a view controller: 1 2 3 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { return DemoScreen ( title : A nice title ) } Actions, or \u201cThings that advance a workflow\u201d So far we have only covered workflows that perform simple tasks like generate strings or simple screens with no actions. If our workflows take on a complicated roles like generating view models, however, they will inevitably be required to handle events of some kind \u2013 some from UI events such as button taps, others from infrastructure events such as network responses. In conventional UIKit code, it is common to deal with each of those event types differently. The common pattern is to implement a method like handleButtonTap(sender:) . Workflows are more strict about events, however. Workflows require that all events be expressed as Workflow Actions. These actions should be thought of as the entry point to your workflow. If any action of any kind happens (that your workflow cares about), it should be modeled as an action. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct DemoWorkflow : Workflow { /// ... } enum Action : WorkflowAction { typealias WorkflowType = DemoWorkflow case refreshButtonTapped /// UI event case refreshRequestFinished ( RefreshResponse ) /// Network event func apply ( toState state : inout DemoWorkflow . State ) - DemoWorkflow . Output ? { /// ... } } The Update Cycle Every time a new action is received, it is applied to the current state of the workflow. If your workflow does more than simply render values, the action s apply is the method where the logic lives. There are two things that the apply(toState:) method is responsible for: Transitioning state (Optionally) emitting an output event Note that the render(state:context:) method is called after every state change, so you can be sure that any state changes will be reflected. Since we have a way of expressing an event from our UI, we can now use the callback on our view model to send that event back to the workflow: 1 2 3 4 5 6 7 8 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : A nice title , onTap : { sink . send ( Action . refreshButtonTapped ) } } State Some workflows do not need state at all \u2013 they simply render values based on the values they were initialized with. But for more complicated workflows, state management is critical. For example, a multi-screen flow only functions if we are able to define all of the possible steps (model the state), remember which one we are currently on (persist state), and move to other steps in the future (transition state). To define your workflow s state, simply implement the associatedtype State via an enum or struct. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct WelcomeFlowWorkflow : Workflow { enum State { case splashScreen case loginFlow case signupFlow } enum Action : WorkflowAction { case back /// ... } /// ... } Note Workflows (and their State ) should always be implemented through value types (structs and enums) due to the way the framework handles state changes. This means that you can never capture references to self , but the consistent flow of data pays dividends \u2013 try this architecture for a while and we are confident that you will see the benefits. Workers, or Asynchronous work the workflow needs done A workflow may need to do some amount of asynchronous work (such as a network request, reading from a sqlite database, etc). Workers provide a declarative interface to units of asynchronous work. To do something asynchronously, we define a worker that has an Output type and defines a run method that that returns a Reactive Swift SignalProducer . When this worker will be run, the SignalProducer is subscribed to starting the async task. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct RefreshWorker : Worker { enum Output { case success ( String ) case error ( Error ) } func run () - SignalProducer RefreshWorker . Output , Never { return SignalProducer ( value : . success ( We did it! )) . delay ( 1.0 , on : QueueScheduler . main ) } func isEquivalent ( to otherWorker : RefreshWorker ) - Bool { return true } } Because a Worker is a declarative representation of work, it also needs to define an isEquivalent to guarantee that we are not running more than one at the same time. For the simple example above, it is always considered equivalent as we want only one of this type of worker running at a time. In order to start asynchronous work, the workflow requests it in the render method, looking something like: 1 2 3 4 5 6 7 8 9 10 11 12 public func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { context . awaitResult ( for : RefreshWorker ()) { output - Action in switch output { case . success ( let result ): return Action . refreshComplete ( result ) case . error ( let error ): return Action . refreshError ( error ) } } } When the context is told to await a result from a worker, the context will do the following: Check if there is already a worker running of the same type: If there is not, or isEquivalent is false, call run on the worker and subscribe to the SignalProducer If there is already a worker running and isEquivalent is true, continue to wait for it to produce an output. When the SignalProducer from the Worker returns an output, it is mapped to an Action and handled the same way as any other action. Output Events The last role of the update cycle is to emit output events. As workflows form a hierarchy, it is common for children to send events up the tree. This may happen when a child workflow finishes or cancels, for example. Workflows can define an output type, which may then be returned by Actions. Composition Composition is the primary tool that we can use to manage complexity in a growing application. Workflows should always be kept small enough to be understandable \u2013 less than 150 lines is a good target. By composing together multiple workflows, complex problems can be broken down into individual pieces that can be quickly understood by other developers (including future you). The context provided to the render(state:context:) method defines the API through which composition is made possible. The Render Context The useful role of children is ultimately to provide rendered values (typically screen models) via their render(state:context:) implementation. To obtain that value from a child workflow, the rendered(with context:key:) method is invoked on the child workflow. When a workflow is rendered with the context, the context will do the following: Check if the child workflow is new or existing: If a workflow with the same type was used during the last render pass, the existing child workflow will be updated with the new workflow. Otherwise, a new child workflow node will be initialized. The child workflow s render(state:context:) method is called. The rendered value is returned. In practice, this looks something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct ParentWorkflow : Workflow { func render ( state : State , context : RenderContext ParentWorkflow ) - String { let childWorkflow = ChildWorkflow ( text : Hello, World ) return childWorkflow . rendered ( with : context ) } } struct ChildWorkflow : Workflow { var text : String // ... func render ( state : State , context : RenderContext ChildWorkflow ) - String { return String ( text . reversed ()) } }","title":"Building a Workflow"},{"location":"tutorial/building-a-workflow/#building-a-workflow","text":"","title":"Building a Workflow"},{"location":"tutorial/building-a-workflow/#introduction","text":"A simple workflow looks something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 struct DemoWorkflow : Workflow { var name : String init ( name : String ) { self . name = name } } extension DemoWorkflow { struct State {} func makeInitialState () - State { return State () } func workflowDidChange ( from previousWorkflow : DemoWorkflow , state : inout State ) { } func render ( state : State , context : RenderContext DemoWorkflow ) - String { return Hello, \\( name ) } } A type conforming to Workflow represents a single node in the workflow tree. It should contain any values that must be provided by its parent (who is generally responsible for creating child workflows). Configuration parameters, strings, network services\u2026 If your workflow needs access to a value or object that it cannot create itself, they should be passed into the workflow s initializer. Every workflow defines its own State type to contain any data that should persist through subsequent render passes.","title":"Introduction"},{"location":"tutorial/building-a-workflow/#render","text":"Workflows are only useful when they render a value for use by their parent (or, if they are the root workflow, for display). This type is very commonly a view model, or Screen . The render(state:context:) method has a couple of parameters, so we\u2019ll work through them one by one. 1 func render ( state : State , context : RenderContext DemoWorkflow ) - Rendering","title":"Render"},{"location":"tutorial/building-a-workflow/#state","text":"Contains a value of type State to provide access to the current state. Any time the state of workflow changes, render is called again to take into account the change in state.","title":"state"},{"location":"tutorial/building-a-workflow/#context","text":"The render context: provides a way for a workflow to defer to nested (child) workflows to generate some or all of its rendered output. We\u2019ll walk through that process later on when we cover composition. allows a workflow to request the execution of asynchronous tasks ( Worker s) generates event handlers for use in constructing view models. In order for us to see the anything in our app, we ll need to return a Screen that can be turned into a view controller: 1 2 3 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { return DemoScreen ( title : A nice title ) }","title":"context"},{"location":"tutorial/building-a-workflow/#actions-or-things-that-advance-a-workflow","text":"So far we have only covered workflows that perform simple tasks like generate strings or simple screens with no actions. If our workflows take on a complicated roles like generating view models, however, they will inevitably be required to handle events of some kind \u2013 some from UI events such as button taps, others from infrastructure events such as network responses. In conventional UIKit code, it is common to deal with each of those event types differently. The common pattern is to implement a method like handleButtonTap(sender:) . Workflows are more strict about events, however. Workflows require that all events be expressed as Workflow Actions. These actions should be thought of as the entry point to your workflow. If any action of any kind happens (that your workflow cares about), it should be modeled as an action. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct DemoWorkflow : Workflow { /// ... } enum Action : WorkflowAction { typealias WorkflowType = DemoWorkflow case refreshButtonTapped /// UI event case refreshRequestFinished ( RefreshResponse ) /// Network event func apply ( toState state : inout DemoWorkflow . State ) - DemoWorkflow . Output ? { /// ... } }","title":"Actions, or \u201cThings that advance a workflow\u201d"},{"location":"tutorial/building-a-workflow/#the-update-cycle","text":"Every time a new action is received, it is applied to the current state of the workflow. If your workflow does more than simply render values, the action s apply is the method where the logic lives. There are two things that the apply(toState:) method is responsible for: Transitioning state (Optionally) emitting an output event Note that the render(state:context:) method is called after every state change, so you can be sure that any state changes will be reflected. Since we have a way of expressing an event from our UI, we can now use the callback on our view model to send that event back to the workflow: 1 2 3 4 5 6 7 8 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : A nice title , onTap : { sink . send ( Action . refreshButtonTapped ) } }","title":"The Update Cycle"},{"location":"tutorial/building-a-workflow/#state_1","text":"Some workflows do not need state at all \u2013 they simply render values based on the values they were initialized with. But for more complicated workflows, state management is critical. For example, a multi-screen flow only functions if we are able to define all of the possible steps (model the state), remember which one we are currently on (persist state), and move to other steps in the future (transition state). To define your workflow s state, simply implement the associatedtype State via an enum or struct. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct WelcomeFlowWorkflow : Workflow { enum State { case splashScreen case loginFlow case signupFlow } enum Action : WorkflowAction { case back /// ... } /// ... } Note Workflows (and their State ) should always be implemented through value types (structs and enums) due to the way the framework handles state changes. This means that you can never capture references to self , but the consistent flow of data pays dividends \u2013 try this architecture for a while and we are confident that you will see the benefits.","title":"State"},{"location":"tutorial/building-a-workflow/#workers-or-asynchronous-work-the-workflow-needs-done","text":"A workflow may need to do some amount of asynchronous work (such as a network request, reading from a sqlite database, etc). Workers provide a declarative interface to units of asynchronous work. To do something asynchronously, we define a worker that has an Output type and defines a run method that that returns a Reactive Swift SignalProducer . When this worker will be run, the SignalProducer is subscribed to starting the async task. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct RefreshWorker : Worker { enum Output { case success ( String ) case error ( Error ) } func run () - SignalProducer RefreshWorker . Output , Never { return SignalProducer ( value : . success ( We did it! )) . delay ( 1.0 , on : QueueScheduler . main ) } func isEquivalent ( to otherWorker : RefreshWorker ) - Bool { return true } } Because a Worker is a declarative representation of work, it also needs to define an isEquivalent to guarantee that we are not running more than one at the same time. For the simple example above, it is always considered equivalent as we want only one of this type of worker running at a time. In order to start asynchronous work, the workflow requests it in the render method, looking something like: 1 2 3 4 5 6 7 8 9 10 11 12 public func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { context . awaitResult ( for : RefreshWorker ()) { output - Action in switch output { case . success ( let result ): return Action . refreshComplete ( result ) case . error ( let error ): return Action . refreshError ( error ) } } } When the context is told to await a result from a worker, the context will do the following: Check if there is already a worker running of the same type: If there is not, or isEquivalent is false, call run on the worker and subscribe to the SignalProducer If there is already a worker running and isEquivalent is true, continue to wait for it to produce an output. When the SignalProducer from the Worker returns an output, it is mapped to an Action and handled the same way as any other action.","title":"Workers, or \"Asynchronous work the workflow needs done\""},{"location":"tutorial/building-a-workflow/#output-events","text":"The last role of the update cycle is to emit output events. As workflows form a hierarchy, it is common for children to send events up the tree. This may happen when a child workflow finishes or cancels, for example. Workflows can define an output type, which may then be returned by Actions.","title":"Output Events"},{"location":"tutorial/building-a-workflow/#composition","text":"Composition is the primary tool that we can use to manage complexity in a growing application. Workflows should always be kept small enough to be understandable \u2013 less than 150 lines is a good target. By composing together multiple workflows, complex problems can be broken down into individual pieces that can be quickly understood by other developers (including future you). The context provided to the render(state:context:) method defines the API through which composition is made possible.","title":"Composition"},{"location":"tutorial/building-a-workflow/#the-render-context","text":"The useful role of children is ultimately to provide rendered values (typically screen models) via their render(state:context:) implementation. To obtain that value from a child workflow, the rendered(with context:key:) method is invoked on the child workflow. When a workflow is rendered with the context, the context will do the following: Check if the child workflow is new or existing: If a workflow with the same type was used during the last render pass, the existing child workflow will be updated with the new workflow. Otherwise, a new child workflow node will be initialized. The child workflow s render(state:context:) method is called. The rendered value is returned. In practice, this looks something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct ParentWorkflow : Workflow { func render ( state : State , context : RenderContext ParentWorkflow ) - String { let childWorkflow = ChildWorkflow ( text : Hello, World ) return childWorkflow . rendered ( with : context ) } } struct ChildWorkflow : Workflow { var text : String // ... func render ( state : State , context : RenderContext ChildWorkflow ) - String { return String ( text . reversed ()) } }","title":"The Render Context"},{"location":"tutorial/tooling/","text":"Tooling Xcode templates Workflow comes with a set of file templates to simplify the process of building features. After installation, these templates can be found via File New New File... in Xcode. Launch terminal and navigate to the Workflow source directory. Run ./Tooling/Templates/install-xcode-templates.sh . Restart Xcode.","title":"Tooling"},{"location":"tutorial/tooling/#tooling","text":"","title":"Tooling"},{"location":"tutorial/tooling/#xcode-templates","text":"Workflow comes with a set of file templates to simplify the process of building features. After installation, these templates can be found via File New New File... in Xcode. Launch terminal and navigate to the Workflow source directory. Run ./Tooling/Templates/install-xcode-templates.sh . Restart Xcode.","title":"Xcode templates"},{"location":"tutorial/using-a-workflow-for-ui/","text":"Using a workflow to show UI ContainerViewController In the Workflow architecture, the container acts as the glue between the state-driven world of Workflows and the UI that is ultimately displayed. On iOS, the container is implemented as ContainerViewController . 1 2 3 4 5 6 7 8 /// Drives view controllers from a root Workflow. public final class ContainerViewController Output , ScreenType : UIViewController where ScreenType : Screen { /// Emits output events from the bound workflow. public let output : Signal Output , Never public convenience init W : Workflow ( workflow : W , viewRegistry : ViewRegistry ) where W . Rendering == ScreenType , W . Output == Output } The first initializer argument is the workflow that will drive your application. The second initializer argument is the view registry. The view registry acts as a mapping between the view models ( Screen s) that your workflow emits and the concrete UI implementations that should be used to display them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import UIKit import Workflow import WorkflowUI @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) - Bool { let window = UIWindow ( frame : UIScreen . main . bounds ) var viewRegistry = ViewRegistry () let container = ContainerViewController ( workflow : DemoWorkflow (), viewRegistry : viewRegistry ) window . rootViewController = container self . window = window window . makeKeyAndVisible () return true } } Your project should compile at this point. It will crash as soon as the workflow emits a screen, however, because we have not registered any UI implementations with the view registry. Let s fix that: 1 2 3 4 5 6 7 8 var viewRegistry = ViewRegistry () // Register the DemoScreenViewController to be responsible for DemoScreen. viewRegistry . register ( screenViewControllerType : DemoScreenViewController . self ) let container = ContainerViewController ( workflow : DemoWorkflow (), viewRegistry : viewRegistry ) Now, when the ContainerViewController is shown, it will start the workflow and render will be called returning the DemoScreen . The container will use the view registry to map the DemoScreen to a DemoScreenViewController and add it to the view hierarchy to display.","title":"Using a Workflow to Show UI"},{"location":"tutorial/using-a-workflow-for-ui/#using-a-workflow-to-show-ui","text":"","title":"Using a workflow to show UI"},{"location":"tutorial/using-a-workflow-for-ui/#containerviewcontroller","text":"In the Workflow architecture, the container acts as the glue between the state-driven world of Workflows and the UI that is ultimately displayed. On iOS, the container is implemented as ContainerViewController . 1 2 3 4 5 6 7 8 /// Drives view controllers from a root Workflow. public final class ContainerViewController Output , ScreenType : UIViewController where ScreenType : Screen { /// Emits output events from the bound workflow. public let output : Signal Output , Never public convenience init W : Workflow ( workflow : W , viewRegistry : ViewRegistry ) where W . Rendering == ScreenType , W . Output == Output } The first initializer argument is the workflow that will drive your application. The second initializer argument is the view registry. The view registry acts as a mapping between the view models ( Screen s) that your workflow emits and the concrete UI implementations that should be used to display them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import UIKit import Workflow import WorkflowUI @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) - Bool { let window = UIWindow ( frame : UIScreen . main . bounds ) var viewRegistry = ViewRegistry () let container = ContainerViewController ( workflow : DemoWorkflow (), viewRegistry : viewRegistry ) window . rootViewController = container self . window = window window . makeKeyAndVisible () return true } } Your project should compile at this point. It will crash as soon as the workflow emits a screen, however, because we have not registered any UI implementations with the view registry. Let s fix that: 1 2 3 4 5 6 7 8 var viewRegistry = ViewRegistry () // Register the DemoScreenViewController to be responsible for DemoScreen. viewRegistry . register ( screenViewControllerType : DemoScreenViewController . self ) let container = ContainerViewController ( workflow : DemoWorkflow (), viewRegistry : viewRegistry ) Now, when the ContainerViewController is shown, it will start the workflow and render will be called returning the DemoScreen . The container will use the view registry to map the DemoScreen to a DemoScreenViewController and add it to the view hierarchy to display.","title":"ContainerViewController"},{"location":"userguide/comparison/","text":"Comparison with other frameworks Coming soon!","title":"Comparison with other frameworks"},{"location":"userguide/comparison/#comparison-with-other-frameworks","text":"Coming soon!","title":"Comparison with other frameworks"},{"location":"userguide/concepts/","text":"Core Concepts Architectural Concepts Unidirectional Data Flow There is a wealth of information on the web about Unidirectional Data Flow , but it very simply means that there is a single path along which data travel from your business logic to your UI, and events travel to your business logic from your UI, and they always and only travel in one direction along that path. For Workflow, this also implies that the UI is (almost) stateless, and that the interesting state for your app is centralized and not duplicated. In practice, this makes program flow much easier to reason about because anytime something happens in an app, it removes the questions of where the state came from that caused it, which components got which events, and which sequences of cause and effect actually occurred. It makes unit testing easier because state and events are explicit, and always live in the same place and flow through the same APIs, so unit tests only need to test state transitions, for the most part. Declarative vs Imperative Traditionally, most mobile code is \u201cimperative\u201d \u2013 it consists of instructions for how to build and display the UI. These instructions can include control flow like loops. Imperative code is usually stateful, state is usually sprinkled all over the place, and tends to care about instances and identity. When reading imperative code, you almost have to run an interpreter and keep all the pieces of state in your head to figure out what it does. Web UI is traditionally declarative \u2013 it describes what to render, and some aspects of how to render it (style), but doesn\u2019t say how to actually draw it. Declarative code is usually easier to read than imperative code. It describes what it produces, not how to generate it. Declarative code usually cares more about pure values than instance identities. However, since computers still need actual instructions at some point, declarative code requires something else, usually imperative, either a compiler or interpreter, to actually do something with it. Workflow code is written in regular Kotlin or Swift, which are both imperative languages, but the library encourages you to write your logic in a declarative and functional style. The library manages state and wiring up event handling for you, so the only code you need to write is code that is actually interesting for your particular problem. A note about functional programming Kotlin and Swift are not strictly functional programming languages, but both have features that allow you to write functional -style code. Functional code discourages side effects and is generally much easier to test than object-oriented code. Functional and declarative programming go very well together, and Workflow encourages you to write such code. Core Components Workflows The Workflows at the left of the diagram contain all state and business logic for the application. This is where network requests happen, navigation decisions are made, models are saved to or loaded from disk \u2013 if it s not UI, it s in this box. For more information, see Workflow Core Concepts . View Models The primary job of the Workflows is to emit an observable stream of view models representing the current state of the application s UI. You will sometimes hear these view models referred to as screens , which is just another way to refer to a view model that contains the data for an entire screen in the app. For more information, see Workflow UI Concepts . Container The container is responsible for plumbing together the two separate halves of the application. It subscribes to the stream of view models that the workflows provide, then implements the logic to update the live UI whenever a new view model is emitted. For more information, see Workflow UI Concepts . UI This is typically conventional platform-specific UI code. One important note is that UI code should never attempt to navigate using system components (navigation controller pushes, modal presentation, etc). In this architecture the workflows are in charge \u2013 any navigation that happens outside of the workflow will be disregarded and stomped on during the next update cycle. For more information, see Workflow UI Concepts . Events In order for the application to actually do anything, the workflow needs to receive events from the UI. When the user interacts with the application by, for example, tapping a button, the workflow receives that event \u2013 which may trigger a simple state transition, or more complex behavior such as a network request. For more information, see Workflow Core Concepts . Info While the core shape of the libraries is shared by Swift and Kotlin implementations, some of the naming and types differ slightly to accommodate each language\u2019s particular type system and naming conventions. Where those differences occur in this document, they are noted in Swift vs Kotlin blurbs. See Where Swift and Kotlin Libraries Differ for an overall summary. In general, any time a generic type is referred to as Foo , in source code the Swift associated type is called Foo and the Kotlin type parameter is called FooT .","title":"Core Concepts"},{"location":"userguide/concepts/#core-concepts","text":"","title":"Core Concepts"},{"location":"userguide/concepts/#architectural-concepts","text":"","title":"Architectural Concepts"},{"location":"userguide/concepts/#unidirectional-data-flow","text":"There is a wealth of information on the web about Unidirectional Data Flow , but it very simply means that there is a single path along which data travel from your business logic to your UI, and events travel to your business logic from your UI, and they always and only travel in one direction along that path. For Workflow, this also implies that the UI is (almost) stateless, and that the interesting state for your app is centralized and not duplicated. In practice, this makes program flow much easier to reason about because anytime something happens in an app, it removes the questions of where the state came from that caused it, which components got which events, and which sequences of cause and effect actually occurred. It makes unit testing easier because state and events are explicit, and always live in the same place and flow through the same APIs, so unit tests only need to test state transitions, for the most part.","title":"Unidirectional Data Flow"},{"location":"userguide/concepts/#declarative-vs-imperative","text":"Traditionally, most mobile code is \u201cimperative\u201d \u2013 it consists of instructions for how to build and display the UI. These instructions can include control flow like loops. Imperative code is usually stateful, state is usually sprinkled all over the place, and tends to care about instances and identity. When reading imperative code, you almost have to run an interpreter and keep all the pieces of state in your head to figure out what it does. Web UI is traditionally declarative \u2013 it describes what to render, and some aspects of how to render it (style), but doesn\u2019t say how to actually draw it. Declarative code is usually easier to read than imperative code. It describes what it produces, not how to generate it. Declarative code usually cares more about pure values than instance identities. However, since computers still need actual instructions at some point, declarative code requires something else, usually imperative, either a compiler or interpreter, to actually do something with it. Workflow code is written in regular Kotlin or Swift, which are both imperative languages, but the library encourages you to write your logic in a declarative and functional style. The library manages state and wiring up event handling for you, so the only code you need to write is code that is actually interesting for your particular problem.","title":"Declarative vs Imperative"},{"location":"userguide/concepts/#a-note-about-functional-programming","text":"Kotlin and Swift are not strictly functional programming languages, but both have features that allow you to write functional -style code. Functional code discourages side effects and is generally much easier to test than object-oriented code. Functional and declarative programming go very well together, and Workflow encourages you to write such code.","title":"A note about functional programming"},{"location":"userguide/concepts/#core-components","text":"","title":"Core Components"},{"location":"userguide/concepts/#workflows","text":"The Workflows at the left of the diagram contain all state and business logic for the application. This is where network requests happen, navigation decisions are made, models are saved to or loaded from disk \u2013 if it s not UI, it s in this box. For more information, see Workflow Core Concepts .","title":"Workflows"},{"location":"userguide/concepts/#view-models","text":"The primary job of the Workflows is to emit an observable stream of view models representing the current state of the application s UI. You will sometimes hear these view models referred to as screens , which is just another way to refer to a view model that contains the data for an entire screen in the app. For more information, see Workflow UI Concepts .","title":"View Models"},{"location":"userguide/concepts/#container","text":"The container is responsible for plumbing together the two separate halves of the application. It subscribes to the stream of view models that the workflows provide, then implements the logic to update the live UI whenever a new view model is emitted. For more information, see Workflow UI Concepts .","title":"Container"},{"location":"userguide/concepts/#ui","text":"This is typically conventional platform-specific UI code. One important note is that UI code should never attempt to navigate using system components (navigation controller pushes, modal presentation, etc). In this architecture the workflows are in charge \u2013 any navigation that happens outside of the workflow will be disregarded and stomped on during the next update cycle. For more information, see Workflow UI Concepts .","title":"UI"},{"location":"userguide/concepts/#events","text":"In order for the application to actually do anything, the workflow needs to receive events from the UI. When the user interacts with the application by, for example, tapping a button, the workflow receives that event \u2013 which may trigger a simple state transition, or more complex behavior such as a network request. For more information, see Workflow Core Concepts . Info While the core shape of the libraries is shared by Swift and Kotlin implementations, some of the naming and types differ slightly to accommodate each language\u2019s particular type system and naming conventions. Where those differences occur in this document, they are noted in Swift vs Kotlin blurbs. See Where Swift and Kotlin Libraries Differ for an overall summary. In general, any time a generic type is referred to as Foo , in source code the Swift associated type is called Foo and the Kotlin type parameter is called FooT .","title":"Events"},{"location":"userguide/core-patterns/","text":"Workflow Core: Patterns/Variations There are a lot associated/generic types in workflow code \u2013 that doesn t mean you always need to use all of them. Here are some common configurations we ve seen. Stateless Workflows Remember that workflow state is made up of public and private parts. When a workflow s state consists entirely of public state (i.e. it s initializer arguments in Swift or PropsT in Kotlin), it can ignore all the machinery for private state. In Swift, the State type can be Void , and in Kotlin it can be Unit \u2013 such workflows are often referred to as stateless , since they have no state of their own. Props-less Workflows Some workflows manage all of their state internally, and have no public state (aka props). In Swift, this just means the workflow implementation has no parameters (although this is rare, see Injecting Dependencies below). In Kotlin, the PropsT type can be Unit . RenderContext has convenience overloads of most of its functions to implicitly pass Unit for these workflows. Outputless Workflows Workflows that only talk to their parent via their Rendering , and never emit any output, are encouraged to indicate that by using the bottom type as their Output type. In addition to documenting the fact that the workflow will never output, using the bottom type also lets the compiler enforce it \u2013 code that tries to emit outputs will not compile. In Swift, the Output type is specified as Never . In Kotlin, use Nothing . Composite Workflows Composition is a powerful tool for working with Workflows. A workflow can often accomplish a lot simply by rendering various children. It may just combine the renderings of multiple children, or use its props to determine which of a set of children to render. Such workflows can often be stateless. Props values v. Injected Dependencies Dependency injection is a technique for making code less coupled and more testable. In short, it s better for classes/structs to accept their dependencies when they re created instead of hard-coding them. Workflows typically have dependencies like specific Workers they need to perform some tasks, child workflows to delegate rendering to, or helpers for things like network requests, formatting and logging. Swift A Swift workflow typically receives its dependencies as initializer arguments, just like its input values, and is normally instantiated anew by its parent in each call to the parent\u2019s render method. The factory pattern can be employed to keep knowledge of children\u2019s implementation details from leaking into their parents. Kotlin Kotlin workflows make a more formal distinction between dependencies and props, via the PropsT parameter type on the Kotlin Workflow interface. Dependencies (e.g. a network service) are typically provided as constructor parameters, while props values (e.g. a record locator) are provided by the parent as an argument to the RenderContext.renderChild method. This works seamlessly with DI libraries like Dagger . The careful reader will note that this is technically storing state in the workflow instance \u2013 something that is generally discouraged. However, since this state is never changed, we can make an exception for this case. If a workflow has properties, they should only be used to store injected dependencies or dependencies derived from injected ones (e.g. Worker s created from Observable s). Info This difference between Swift and Kotlin practices is a side effect of Kotlin\u2019s lack of a parallel to Swift\u2019s Self type. Kotlin has no practical way to provide a method like Swift\u2019s Workflow.workflowDidChange , which accepts a strongly typed reference to the instance from the previous run of a parent\u2019s Render method. Kotlin\u2019s alternative, StatefulWorkflow.onPropsChanged , requires the extra PropsT type parameter.","title":"Patterns"},{"location":"userguide/core-patterns/#workflow-core-patternsvariations","text":"There are a lot associated/generic types in workflow code \u2013 that doesn t mean you always need to use all of them. Here are some common configurations we ve seen.","title":"Workflow Core: Patterns/Variations"},{"location":"userguide/core-patterns/#stateless-workflows","text":"Remember that workflow state is made up of public and private parts. When a workflow s state consists entirely of public state (i.e. it s initializer arguments in Swift or PropsT in Kotlin), it can ignore all the machinery for private state. In Swift, the State type can be Void , and in Kotlin it can be Unit \u2013 such workflows are often referred to as stateless , since they have no state of their own.","title":"Stateless Workflows"},{"location":"userguide/core-patterns/#props-less-workflows","text":"Some workflows manage all of their state internally, and have no public state (aka props). In Swift, this just means the workflow implementation has no parameters (although this is rare, see Injecting Dependencies below). In Kotlin, the PropsT type can be Unit . RenderContext has convenience overloads of most of its functions to implicitly pass Unit for these workflows.","title":"Props-less Workflows"},{"location":"userguide/core-patterns/#outputless-workflows","text":"Workflows that only talk to their parent via their Rendering , and never emit any output, are encouraged to indicate that by using the bottom type as their Output type. In addition to documenting the fact that the workflow will never output, using the bottom type also lets the compiler enforce it \u2013 code that tries to emit outputs will not compile. In Swift, the Output type is specified as Never . In Kotlin, use Nothing .","title":"Outputless Workflows"},{"location":"userguide/core-patterns/#composite-workflows","text":"Composition is a powerful tool for working with Workflows. A workflow can often accomplish a lot simply by rendering various children. It may just combine the renderings of multiple children, or use its props to determine which of a set of children to render. Such workflows can often be stateless.","title":"Composite Workflows"},{"location":"userguide/core-patterns/#props-values-v-injected-dependencies","text":"Dependency injection is a technique for making code less coupled and more testable. In short, it s better for classes/structs to accept their dependencies when they re created instead of hard-coding them. Workflows typically have dependencies like specific Workers they need to perform some tasks, child workflows to delegate rendering to, or helpers for things like network requests, formatting and logging.","title":"Props values v. Injected Dependencies"},{"location":"userguide/core-patterns/#swift","text":"A Swift workflow typically receives its dependencies as initializer arguments, just like its input values, and is normally instantiated anew by its parent in each call to the parent\u2019s render method. The factory pattern can be employed to keep knowledge of children\u2019s implementation details from leaking into their parents.","title":"Swift"},{"location":"userguide/core-patterns/#kotlin","text":"Kotlin workflows make a more formal distinction between dependencies and props, via the PropsT parameter type on the Kotlin Workflow interface. Dependencies (e.g. a network service) are typically provided as constructor parameters, while props values (e.g. a record locator) are provided by the parent as an argument to the RenderContext.renderChild method. This works seamlessly with DI libraries like Dagger . The careful reader will note that this is technically storing state in the workflow instance \u2013 something that is generally discouraged. However, since this state is never changed, we can make an exception for this case. If a workflow has properties, they should only be used to store injected dependencies or dependencies derived from injected ones (e.g. Worker s created from Observable s). Info This difference between Swift and Kotlin practices is a side effect of Kotlin\u2019s lack of a parallel to Swift\u2019s Self type. Kotlin has no practical way to provide a method like Swift\u2019s Workflow.workflowDidChange , which accepts a strongly typed reference to the instance from the previous run of a parent\u2019s Render method. Kotlin\u2019s alternative, StatefulWorkflow.onPropsChanged , requires the extra PropsT type parameter.","title":"Kotlin"},{"location":"userguide/core-worker/","text":"Workflow Core: Worker The Role of a Worker Worker is a protocol (in Swift) and interface (in Kotlin) that defines an asynchronous task that can be performed by a Workflow . Worker s only emit outputs, they do not have a Rendering type. They are similar to child workflows with Void / Unit rendering types. A workflow can ask the infrastructure to await the result of a worker by passing that worker to the RenderContext.runningWorker method within a call to the render method. A workflow can handle outputs from a Worker . Workers provide a declarative window into the imperative world As nice as it is to write declarative code, real apps need to interact with imperative APIs. Workers allow wrapping imperative APIs so that Workflows can interact with them in a declarative fashion. Instead of making imperative start this, do that, now stop calls, a Workflow can say I declare that this task should now be running and let the infrastructure worry about ensuring the task is actually started when necessary, continues running if it was already in flight, and torn down when it s not needed anymore. Workers can perform side effects Unlike workflows render method, which can be called many times and must be idempotent, workers are started and then ran until completion (or cancellation) \u2013 independently of how many times the workflow running them is actually rendered. This means that side effects that should be performed only once when a workflow enters a particular state, for example, should be placed into a Worker that the workflow runs while in that state. Workers are cold reactive streams Workers are effectively simple wrappers around asynchronous streams with explicit equivalence. In Swift, workers are backed by ReactiveSwift SignalProducer s . In Kotlin, they re backed by Kotlin Flow s . They are also easily derived from Reactive Streams Publishers , including RxJava Observable , Flowable , or Single instances. Worker subscriptions are managed automatically While Workers are backed by reactive streams with library-specific subscription APIs, you never actually subscribe directly to a worker yourself. Instead, a Workflow asks the infrastructure to run a worker, and the infrastructure will take care of initializing and tearing down the subscription as appropriate \u2013 much like how child workflows lifetimes are automatically managed by the runtime. This makes it impossible to accidentally leak a subscription to a worker. Workers manage their own internal state Unlike Workflows, which are effectively collections of functions defining state transitions, Workers represent long-running tasks. For example, Workers commonly execute network requests. The worker s stream will open a socket and, either blocking on a background thread or asynchronously, read from that socket and eventually emit data to the workflow that is running it. Workers define their own equivalence Since Workers represent ongoing tasks, the infrastructure needs to be able to tell when two workers represent the same task (so it doesn t perform the task twice), or when a worker has changed between render passes such that it needs to be torn down and re-started for the new work. For these reasons, any time a workflow requests that a worker be run in sequential render passes, it is asked to compare itself with its last instance and determine if they are equivalent. In Swift, this is determined by the Worker isEquivalent:to: method. Worker s that conform to Equatable will automatically get an isEquivalent:to: method based on the Equatable implementation. In Kotlin, the Worker interface defines the doesSameWorkAs method which is passed the previous worker. Kotlin: Why don t Workers use equals ? Worker equivalence is a key part of the Worker API. The default implementation of equals , which just compares object identity, is almost always incorrect for workers. Defining a separate method forces implementers to think about how equivalence is defined. Workers are lifecycle-aware Workers are aware of when they re started (just like Workflows), but they are also aware of when they are torn down. This makes them handy for managing resources as well.","title":"Worker"},{"location":"userguide/core-worker/#workflow-core-worker","text":"","title":"Workflow Core: Worker"},{"location":"userguide/core-worker/#the-role-of-a-worker","text":"Worker is a protocol (in Swift) and interface (in Kotlin) that defines an asynchronous task that can be performed by a Workflow . Worker s only emit outputs, they do not have a Rendering type. They are similar to child workflows with Void / Unit rendering types. A workflow can ask the infrastructure to await the result of a worker by passing that worker to the RenderContext.runningWorker method within a call to the render method. A workflow can handle outputs from a Worker .","title":"The Role of a Worker"},{"location":"userguide/core-worker/#workers-provide-a-declarative-window-into-the-imperative-world","text":"As nice as it is to write declarative code, real apps need to interact with imperative APIs. Workers allow wrapping imperative APIs so that Workflows can interact with them in a declarative fashion. Instead of making imperative start this, do that, now stop calls, a Workflow can say I declare that this task should now be running and let the infrastructure worry about ensuring the task is actually started when necessary, continues running if it was already in flight, and torn down when it s not needed anymore.","title":"Workers provide a declarative window into the imperative world"},{"location":"userguide/core-worker/#workers-can-perform-side-effects","text":"Unlike workflows render method, which can be called many times and must be idempotent, workers are started and then ran until completion (or cancellation) \u2013 independently of how many times the workflow running them is actually rendered. This means that side effects that should be performed only once when a workflow enters a particular state, for example, should be placed into a Worker that the workflow runs while in that state.","title":"Workers can perform side effects"},{"location":"userguide/core-worker/#workers-are-cold-reactive-streams","text":"Workers are effectively simple wrappers around asynchronous streams with explicit equivalence. In Swift, workers are backed by ReactiveSwift SignalProducer s . In Kotlin, they re backed by Kotlin Flow s . They are also easily derived from Reactive Streams Publishers , including RxJava Observable , Flowable , or Single instances.","title":"Workers are cold reactive streams"},{"location":"userguide/core-worker/#worker-subscriptions-are-managed-automatically","text":"While Workers are backed by reactive streams with library-specific subscription APIs, you never actually subscribe directly to a worker yourself. Instead, a Workflow asks the infrastructure to run a worker, and the infrastructure will take care of initializing and tearing down the subscription as appropriate \u2013 much like how child workflows lifetimes are automatically managed by the runtime. This makes it impossible to accidentally leak a subscription to a worker.","title":"Worker subscriptions are managed automatically"},{"location":"userguide/core-worker/#workers-manage-their-own-internal-state","text":"Unlike Workflows, which are effectively collections of functions defining state transitions, Workers represent long-running tasks. For example, Workers commonly execute network requests. The worker s stream will open a socket and, either blocking on a background thread or asynchronously, read from that socket and eventually emit data to the workflow that is running it.","title":"Workers manage their own internal state"},{"location":"userguide/core-worker/#workers-define-their-own-equivalence","text":"Since Workers represent ongoing tasks, the infrastructure needs to be able to tell when two workers represent the same task (so it doesn t perform the task twice), or when a worker has changed between render passes such that it needs to be torn down and re-started for the new work. For these reasons, any time a workflow requests that a worker be run in sequential render passes, it is asked to compare itself with its last instance and determine if they are equivalent. In Swift, this is determined by the Worker isEquivalent:to: method. Worker s that conform to Equatable will automatically get an isEquivalent:to: method based on the Equatable implementation. In Kotlin, the Worker interface defines the doesSameWorkAs method which is passed the previous worker. Kotlin: Why don t Workers use equals ? Worker equivalence is a key part of the Worker API. The default implementation of equals , which just compares object identity, is almost always incorrect for workers. Defining a separate method forces implementers to think about how equivalence is defined.","title":"Workers define their own equivalence"},{"location":"userguide/core-worker/#workers-are-lifecycle-aware","text":"Workers are aware of when they re started (just like Workflows), but they are also aware of when they are torn down. This makes them handy for managing resources as well.","title":"Workers are lifecycle-aware"},{"location":"userguide/core-workflow/","text":"Workflow Core: Workflow The Role of a Workflow Workflow is a protocol (in Swift) and interface (in Kotlin) that defines the contract for a single node in the workflow hierarchy. Swift 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public protocol Workflow : AnyWorkflowConvertible { associatedtype State associatedtype Output = Never associatedtype Rendering func makeInitialState () - State func workflowDidChange ( from previousWorkflow : Self , state : inout State ) func render ( state : State , context : RenderContext Self ) - Rendering } Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 abstract class StatefulWorkflow in PropsT , StateT , out OutputT : Any , out RenderingT : Workflow PropsT , OutputT , RenderingT { abstract fun initialState ( props : PropsT , initialSnapshot : Snapshot ? ): StateT open fun onPropsChanged ( old : PropsT , new : PropsT , state : StateT ): StateT = state abstract fun render ( props : PropsT , state : StateT , context : RenderContext StateT , OutputT ): RenderingT abstract fun snapshotState ( state : StateT ): Snapshot } Swift: What is AnyWorkflowConvertible ? When a protocol has an associated Self type, Swift requires the use of a type-erasing wrapper to store references to instances of that protocol. AnyWorkflow is such a wrapper for Workflow . AnyWorkflowConvertible is a protocol with a single method that returns an AnyWorkflow . It is useful as a base type because it allows instances of Workflow to be used directly by any code that requires the type-erased AnyWorkflow . Kotlin: StatefulWorkflow vs Workflow It is a common practice in Kotlin to divide types into two parts: an interface for public API, and a class for private implementation. The Workflow library defines a Workflow interface, which should be used as the type of properties and parameters by code that needs to refer to a particular Workflow interface. The Workflow interface contains a single method, which simply returns a StatefulWorkflow \u2013 a Workflow can be described as \u201canything that can be expressed as a StatefulWorkflow .\u201d The library also defines two abstract classes which define the contract for workflows and should be subclassed to implement your workflows: StatefulWorkflow should be subclassed to implement Workflows that have private state . StatelessWorkflow should be subclassed to implement Workflows that don t have any private state. See Stateless Workflows . Workflows have several responsibilities: Workflows have state Once a Workflow has been started, it always operates in the context of some state. This state is divided into two parts: private state, which only the Workflow implementation itself knows about, which is defined by the State type, and properties (or props ), which is passed to the Workflow from its parent (more on hierarchical workflows below). Private state Every Workflow implementation defines a State type to maintain any necessary state while the workflow is running. For example, a tic-tac-toe game might have a state like this: Swift 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct State { enum Player { case x case o } enum Space { case unfilled filled ( Player ) } // 3 rows * 3 columns = 9 spaces var spaces : [ Space ] = Array ( repeating : . unfilled , count : 9 ) var currentTurn : Player = . x } Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 data class State ( // 3 rows * 3 columns = 9 spaces val spaces : List Space = List ( 9 ) { Unfilled }, val currentTurn : Player = X ) { enum class Player { X , O } sealed class Space { object Unfilled : Space () data class Filled ( val player : Player ) : Space () } } When the workflow is first started, it is queried for an initial state value. From that point forward, the workflow may advance to a new state as the result of events occurring from various sources (which will be covered below). Stateless Workflows If a workflow does not have any private state, it is often referred to as a stateless workflow . A stateless Workflow is simply a Workflow that has a Void or Unit State type. See more below . Props Every Workflow implementation also defines data that is passed into it. The Workflow is not able to modify this state itself, but it may change between render passes. This public state is called Props . In Swift, the props are simply defined as properties of the struct implementing Workflow itself. In Kotlin, the Workflow interface defines a separate PropsT type parameter. (This additional type parameter is necessary due to Kotlin\u2019s lack of the Self type that Swift workflow\u2019s workflowDidChange method relies upon.) Swift 1 TK Kotlin 1 2 3 4 data class Props ( val playerXName : String val playerOName : String ) Workflows are advanced by WorkflowAction s Any time something happens that should advance a workflow \u2013 a UI event, a network response, a child s output event \u2013 actions are used to perform the update. For example, a workflow may respond to UI events by mapping those events into a type conforming to/implementing WorkflowAction . These types implement the logic to advance a workflow by: Advancing to a new state (Optionally) emitting an output event up the tree. WorkflowAction s are typically defined as enums with associated types (Swift) or sealed classes (Kotlin), and can include data from the event \u2013 for example, the ID of the item in the list that was clicked. Side effects such as logging button clicks to an analytics framework are also typically performed in actions. If you re familiar with React/Redux, WorkflowAction s are essentially reducers. Workflows can emit output events up the hierarchy to their parent When a workflow is advanced by an action, an optional output event can be sent up the workflow hierarchy. This is the opportunity for a workflow to notify its parent that something has happened (and the parent s opportunity to respond to that event by dispatching its own action, continuing up the tree as long as output events are emitted). Workflows produce an external representation of their state via Rendering Immediately after starting up, or after a state transition occurs, a workflow will have its render method called. This method is responsible for creating and returning a value of type Rendering . You can think of Rendering as the external published state of the workflow, and the render function as a map of ( Props + State + childrens Rendering s) - Rendering . While a workflow s internal state may contain more detailed or comprehensive state, the Rendering (external state) is a type that is useful outside of the workflow. Because a workflow\u2019s render method may be called by infrastructure for a variety of reasons, it\u2019s important to not perform side effects when rendering \u2014 render methods must be idempotent. Event-based side effects should use Actions and state-based side effects should use Workers. When building an interactive application, the Rendering type is commonly (but not always) a view model that will drive the UI layer. Workflows can respond to UI events The RenderContext that is passed into render as the last parameter provides some useful tools to assist in creating the Rendering value. If a workflow is producing a view model, it is common to need an event handler to respond to UI events. The RenderContext has API to create an event handler, called a Sink , that when called will advance the workflow by dispatching an action back to the workflow (for more on actions, see below ). Swift 1 2 3 4 5 6 7 8 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : A nice title , onTap : { sink . send ( Action . refreshButtonTapped ) } } Kotlin 1 TK Workflows form a hierarchy (they may have children) As they produce a Rendering value, it is common for workflows to delegate some portion of that work to a child workflow . This is done via the RenderContext that is passed into the render method. In order to delegate to a child, the parent calls renderChild on the context, with the child workflow as the single argument. The infrastructure will spin up the child workflow (including initializing its initial state) if this is the first time this child has been used, or, if the child was also used on the previous render pass, the existing child will be updated. Either way, render will immediately be called on the child (by the Workflow infrastructure), and the resulting child s Rendering value will be returned to the parent. This allows a parent to return complex Rendering types (such as a view model representing the entire UI state of an application) without needing to model all of that complexity within a single workflow. Workflow Identity The Workflow infrastructure automatically detects the first time and the last subsequent time you ve asked to render a child workflow, and will automatically initialize the child and clean it up. In both Swift and Kotlin, this is done using the workflow s concrete type. Both languages use reflection to do this comparison (e.g. in Kotlin, the workflows KClass es are compared). It is an error to render workflows of the same type more than once in the same render pass. Since type is used for workflow identity, the child rendering APIs take an optional string key to differentiate between multiple child workflows of the same type. Workflows can subscribe to external event sources If a workflow needs to respond to some external event source (e.g. push notifications), the workflow can ask the context to listen to those events from within the render method. Swift vs Kotlin In the Swift library, there is a special API for subscribing to hot streams ( Signal in ReactiveSwift). The Kotlin library does not have any special API for subscribing to hot streams (channels), though it does have extension methods to convert ReceiveChannel s , and RxJava Flowable s and Observables , to Worker s . The reason for this discrepancy is simply that we don t have any uses of channels yet in production, and so we ve decided to keep the API simpler. If we start using channels in the future, it may make sense to make subscribing to them a first-class API like in Swift. Workflows can perform asynchronous tasks (Workers) Workers are very similar in concept to child workflows. Unlike child workflows, however, workers do not have a Rendering type; they only exist to perform a single asynchronous task before sending zero or more output events back up the tree to their parent. For more information about workers, see the Worker section below. Workflows can be saved to and restored from a snapshot (Kotlin only) On every render pass, each workflow is asked to create a snapshot of its state \u2013 a lazily-produced serialization of the workflow s State as a binary blob. These Snapshot s are aggregated into a single Snapshot for the entire workflow tree and emitted along with the root workflow s Rendering . When the workflow runtime is started, it can be passed an optional Snapshot to restore the tree from. When non-null, the root workflow s snapshot is extracted and passed to the root workflow s initialState . The workflow can choose to either ignore the snapshot or use it to restore its State . On the first render pass, if the root workflow renders any children that were also being rendered when the snapshot was taken, those children s snapshots are also extracted from the aggregate and used to initialize their states. !!! faq Why don t Swift Workflows support snapshotting? Snapshotting was built into Kotlin workflows specifically to support Android s app lifecycle, which requires apps to serialize their current state before being backgrounded so that they can be restored in case the system needs to kill the hosting process. iOS apps don t have this requirement, so the Swift library doesn t need to support it.","title":"Workflow"},{"location":"userguide/core-workflow/#workflow-core-workflow","text":"","title":"Workflow Core: Workflow"},{"location":"userguide/core-workflow/#the-role-of-a-workflow","text":"Workflow is a protocol (in Swift) and interface (in Kotlin) that defines the contract for a single node in the workflow hierarchy. Swift 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public protocol Workflow : AnyWorkflowConvertible { associatedtype State associatedtype Output = Never associatedtype Rendering func makeInitialState () - State func workflowDidChange ( from previousWorkflow : Self , state : inout State ) func render ( state : State , context : RenderContext Self ) - Rendering } Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 abstract class StatefulWorkflow in PropsT , StateT , out OutputT : Any , out RenderingT : Workflow PropsT , OutputT , RenderingT { abstract fun initialState ( props : PropsT , initialSnapshot : Snapshot ? ): StateT open fun onPropsChanged ( old : PropsT , new : PropsT , state : StateT ): StateT = state abstract fun render ( props : PropsT , state : StateT , context : RenderContext StateT , OutputT ): RenderingT abstract fun snapshotState ( state : StateT ): Snapshot } Swift: What is AnyWorkflowConvertible ? When a protocol has an associated Self type, Swift requires the use of a type-erasing wrapper to store references to instances of that protocol. AnyWorkflow is such a wrapper for Workflow . AnyWorkflowConvertible is a protocol with a single method that returns an AnyWorkflow . It is useful as a base type because it allows instances of Workflow to be used directly by any code that requires the type-erased AnyWorkflow . Kotlin: StatefulWorkflow vs Workflow It is a common practice in Kotlin to divide types into two parts: an interface for public API, and a class for private implementation. The Workflow library defines a Workflow interface, which should be used as the type of properties and parameters by code that needs to refer to a particular Workflow interface. The Workflow interface contains a single method, which simply returns a StatefulWorkflow \u2013 a Workflow can be described as \u201canything that can be expressed as a StatefulWorkflow .\u201d The library also defines two abstract classes which define the contract for workflows and should be subclassed to implement your workflows: StatefulWorkflow should be subclassed to implement Workflows that have private state . StatelessWorkflow should be subclassed to implement Workflows that don t have any private state. See Stateless Workflows . Workflows have several responsibilities:","title":"The Role of a Workflow"},{"location":"userguide/core-workflow/#workflows-have-state","text":"Once a Workflow has been started, it always operates in the context of some state. This state is divided into two parts: private state, which only the Workflow implementation itself knows about, which is defined by the State type, and properties (or props ), which is passed to the Workflow from its parent (more on hierarchical workflows below).","title":"Workflows have state"},{"location":"userguide/core-workflow/#private-state","text":"Every Workflow implementation defines a State type to maintain any necessary state while the workflow is running. For example, a tic-tac-toe game might have a state like this: Swift 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct State { enum Player { case x case o } enum Space { case unfilled filled ( Player ) } // 3 rows * 3 columns = 9 spaces var spaces : [ Space ] = Array ( repeating : . unfilled , count : 9 ) var currentTurn : Player = . x } Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 data class State ( // 3 rows * 3 columns = 9 spaces val spaces : List Space = List ( 9 ) { Unfilled }, val currentTurn : Player = X ) { enum class Player { X , O } sealed class Space { object Unfilled : Space () data class Filled ( val player : Player ) : Space () } } When the workflow is first started, it is queried for an initial state value. From that point forward, the workflow may advance to a new state as the result of events occurring from various sources (which will be covered below). Stateless Workflows If a workflow does not have any private state, it is often referred to as a stateless workflow . A stateless Workflow is simply a Workflow that has a Void or Unit State type. See more below .","title":"Private state"},{"location":"userguide/core-workflow/#props","text":"Every Workflow implementation also defines data that is passed into it. The Workflow is not able to modify this state itself, but it may change between render passes. This public state is called Props . In Swift, the props are simply defined as properties of the struct implementing Workflow itself. In Kotlin, the Workflow interface defines a separate PropsT type parameter. (This additional type parameter is necessary due to Kotlin\u2019s lack of the Self type that Swift workflow\u2019s workflowDidChange method relies upon.) Swift 1 TK Kotlin 1 2 3 4 data class Props ( val playerXName : String val playerOName : String )","title":"Props"},{"location":"userguide/core-workflow/#workflows-are-advanced-by-workflowactions","text":"Any time something happens that should advance a workflow \u2013 a UI event, a network response, a child s output event \u2013 actions are used to perform the update. For example, a workflow may respond to UI events by mapping those events into a type conforming to/implementing WorkflowAction . These types implement the logic to advance a workflow by: Advancing to a new state (Optionally) emitting an output event up the tree. WorkflowAction s are typically defined as enums with associated types (Swift) or sealed classes (Kotlin), and can include data from the event \u2013 for example, the ID of the item in the list that was clicked. Side effects such as logging button clicks to an analytics framework are also typically performed in actions. If you re familiar with React/Redux, WorkflowAction s are essentially reducers.","title":"Workflows are advanced by WorkflowActions"},{"location":"userguide/core-workflow/#workflows-can-emit-output-events-up-the-hierarchy-to-their-parent","text":"When a workflow is advanced by an action, an optional output event can be sent up the workflow hierarchy. This is the opportunity for a workflow to notify its parent that something has happened (and the parent s opportunity to respond to that event by dispatching its own action, continuing up the tree as long as output events are emitted).","title":"Workflows can emit output events up the hierarchy to their parent"},{"location":"userguide/core-workflow/#workflows-produce-an-external-representation-of-their-state-via-rendering","text":"Immediately after starting up, or after a state transition occurs, a workflow will have its render method called. This method is responsible for creating and returning a value of type Rendering . You can think of Rendering as the external published state of the workflow, and the render function as a map of ( Props + State + childrens Rendering s) - Rendering . While a workflow s internal state may contain more detailed or comprehensive state, the Rendering (external state) is a type that is useful outside of the workflow. Because a workflow\u2019s render method may be called by infrastructure for a variety of reasons, it\u2019s important to not perform side effects when rendering \u2014 render methods must be idempotent. Event-based side effects should use Actions and state-based side effects should use Workers. When building an interactive application, the Rendering type is commonly (but not always) a view model that will drive the UI layer.","title":"Workflows produce an external representation of their state via Rendering"},{"location":"userguide/core-workflow/#workflows-can-respond-to-ui-events","text":"The RenderContext that is passed into render as the last parameter provides some useful tools to assist in creating the Rendering value. If a workflow is producing a view model, it is common to need an event handler to respond to UI events. The RenderContext has API to create an event handler, called a Sink , that when called will advance the workflow by dispatching an action back to the workflow (for more on actions, see below ). Swift 1 2 3 4 5 6 7 8 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : A nice title , onTap : { sink . send ( Action . refreshButtonTapped ) } } Kotlin 1 TK","title":"Workflows can respond to UI events"},{"location":"userguide/core-workflow/#workflows-form-a-hierarchy-they-may-have-children","text":"As they produce a Rendering value, it is common for workflows to delegate some portion of that work to a child workflow . This is done via the RenderContext that is passed into the render method. In order to delegate to a child, the parent calls renderChild on the context, with the child workflow as the single argument. The infrastructure will spin up the child workflow (including initializing its initial state) if this is the first time this child has been used, or, if the child was also used on the previous render pass, the existing child will be updated. Either way, render will immediately be called on the child (by the Workflow infrastructure), and the resulting child s Rendering value will be returned to the parent. This allows a parent to return complex Rendering types (such as a view model representing the entire UI state of an application) without needing to model all of that complexity within a single workflow. Workflow Identity The Workflow infrastructure automatically detects the first time and the last subsequent time you ve asked to render a child workflow, and will automatically initialize the child and clean it up. In both Swift and Kotlin, this is done using the workflow s concrete type. Both languages use reflection to do this comparison (e.g. in Kotlin, the workflows KClass es are compared). It is an error to render workflows of the same type more than once in the same render pass. Since type is used for workflow identity, the child rendering APIs take an optional string key to differentiate between multiple child workflows of the same type.","title":"Workflows form a hierarchy (they may have children)"},{"location":"userguide/core-workflow/#workflows-can-subscribe-to-external-event-sources","text":"If a workflow needs to respond to some external event source (e.g. push notifications), the workflow can ask the context to listen to those events from within the render method. Swift vs Kotlin In the Swift library, there is a special API for subscribing to hot streams ( Signal in ReactiveSwift). The Kotlin library does not have any special API for subscribing to hot streams (channels), though it does have extension methods to convert ReceiveChannel s , and RxJava Flowable s and Observables , to Worker s . The reason for this discrepancy is simply that we don t have any uses of channels yet in production, and so we ve decided to keep the API simpler. If we start using channels in the future, it may make sense to make subscribing to them a first-class API like in Swift.","title":"Workflows can subscribe to external event sources"},{"location":"userguide/core-workflow/#workflows-can-perform-asynchronous-tasks-workers","text":"Workers are very similar in concept to child workflows. Unlike child workflows, however, workers do not have a Rendering type; they only exist to perform a single asynchronous task before sending zero or more output events back up the tree to their parent. For more information about workers, see the Worker section below.","title":"Workflows can perform asynchronous tasks (Workers)"},{"location":"userguide/core-workflow/#workflows-can-be-saved-to-and-restored-from-a-snapshot-kotlin-only","text":"On every render pass, each workflow is asked to create a snapshot of its state \u2013 a lazily-produced serialization of the workflow s State as a binary blob. These Snapshot s are aggregated into a single Snapshot for the entire workflow tree and emitted along with the root workflow s Rendering . When the workflow runtime is started, it can be passed an optional Snapshot to restore the tree from. When non-null, the root workflow s snapshot is extracted and passed to the root workflow s initialState . The workflow can choose to either ignore the snapshot or use it to restore its State . On the first render pass, if the root workflow renders any children that were also being rendered when the snapshot was taken, those children s snapshots are also extracted from the aggregate and used to initialize their states. !!! faq Why don t Swift Workflows support snapshotting? Snapshotting was built into Kotlin workflows specifically to support Android s app lifecycle, which requires apps to serialize their current state before being backgrounded so that they can be restored in case the system needs to kill the hosting process. iOS apps don t have this requirement, so the Swift library doesn t need to support it.","title":"Workflows can be saved to and restored from a snapshot (Kotlin only)"},{"location":"userguide/implementation/","text":"Implementation Notes Coming soon!","title":"Under the Hood: Implementation Notes"},{"location":"userguide/implementation/#implementation-notes","text":"Coming soon!","title":"Implementation Notes"},{"location":"userguide/motivation/","text":"Motivation Architectural Concepts Coming soon!","title":"Motivation & Architectural Concepts"},{"location":"userguide/motivation/#motivation-architectural-concepts","text":"Coming soon!","title":"Motivation &amp; Architectural Concepts"},{"location":"userguide/testing-concepts/","text":"Workflow Testing Coming soon!","title":"Workflow Testing"},{"location":"userguide/testing-concepts/#workflow-testing","text":"Coming soon!","title":"Workflow Testing"},{"location":"userguide/ui-concepts/","text":"Workflow UI Coming soon!","title":"Workflow UI"},{"location":"userguide/ui-concepts/#workflow-ui","text":"Coming soon!","title":"Workflow UI"}]}