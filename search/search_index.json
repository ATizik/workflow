{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"workflow An architecture that allows composable state machines to drive UI navigation and content, where the state machines are cleanly separated from UI code. This project is currently experimental and the API subject to breaking changes without notice. Follow Square s engineering blog, The Corner , to see when this project becomes stable. Workflow is a library for making composable state machines, and UIs driven by those state machines. This project is under active development. The workflow code is being piloted in production apps. The view code is not (yet). More documentation and samples will be coming soon! Using Workflows in your project Swift If you use CocoaPods to manage your dependencies, simply add Workflow and WorkflowUI to your Podfile: 1 2 pod Workflow pod WorkflowUI Kotlin Artifacts are hosted on Maven Central. If you re using Gradle, ensure mavenCentral() appears in your repositories block, and then add dependencies on the following artifacts: Maven Coordinates Depend on this if\u2026 com.squareup.workflow:workflow-core-jvm:x.y.z You are writing a library module/project that uses Workflows, but you don't need to interact with the runtime from the outside. com.squareup.workflow:workflow-rx2:x.y.z You need to interact with RxJava2 from your Workflows. com.squareup.workflow:workflow-testing-jvm:x.y.z You are writing tests. This should only be included as a test dependency. com.squareup.workflow:workflow-ui-android:x.y.z You're writing an Android app that uses Workflows. Lower-level Artifacts Most code shouldn t need to depend on these directly. They should generally only be used to build higher-level integrations with UI frameworks. Maven Coordinates Depend on this if\u2026 com.squareup.workflow:workflow-runtime-jvm:x.y.z You need to interact directly with the runtime, i.e. streams of renderings and outputs. com.squareup.workflow:workflow-ui-core-jvm:x.y.z You are writing workflow-ui-android for another UI framework. Defines the core types used by that artifact. Resources SF Android GDG @ Square 2019 - Hello Workflow (live coding) Android Dialogs 5-part Coding Series 1 , 2 , 3 , 4 , 5 Reactive Workflows a Year Later \u2013 Droidcon NYC 2018 The Reactive Workflow Pattern \u2013 Fragmented Podcast The Reactive Workflow Pattern Update \u2013 Droidcon SF 2017 The Rx Workflow Pattern \u2013 Droidcon NYC 2017 ( slides ) Releasing and Deploying See RELEASING.md . License Copyright 2019 Square Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#workflow","text":"An architecture that allows composable state machines to drive UI navigation and content, where the state machines are cleanly separated from UI code. This project is currently experimental and the API subject to breaking changes without notice. Follow Square s engineering blog, The Corner , to see when this project becomes stable. Workflow is a library for making composable state machines, and UIs driven by those state machines. This project is under active development. The workflow code is being piloted in production apps. The view code is not (yet). More documentation and samples will be coming soon!","title":"workflow"},{"location":"#using-workflows-in-your-project","text":"","title":"Using Workflows in your project"},{"location":"#swift","text":"If you use CocoaPods to manage your dependencies, simply add Workflow and WorkflowUI to your Podfile: 1 2 pod Workflow pod WorkflowUI","title":"Swift"},{"location":"#kotlin","text":"Artifacts are hosted on Maven Central. If you re using Gradle, ensure mavenCentral() appears in your repositories block, and then add dependencies on the following artifacts: Maven Coordinates Depend on this if\u2026 com.squareup.workflow:workflow-core-jvm:x.y.z You are writing a library module/project that uses Workflows, but you don't need to interact with the runtime from the outside. com.squareup.workflow:workflow-rx2:x.y.z You need to interact with RxJava2 from your Workflows. com.squareup.workflow:workflow-testing-jvm:x.y.z You are writing tests. This should only be included as a test dependency. com.squareup.workflow:workflow-ui-android:x.y.z You're writing an Android app that uses Workflows.","title":"Kotlin"},{"location":"#lower-level-artifacts","text":"Most code shouldn t need to depend on these directly. They should generally only be used to build higher-level integrations with UI frameworks. Maven Coordinates Depend on this if\u2026 com.squareup.workflow:workflow-runtime-jvm:x.y.z You need to interact directly with the runtime, i.e. streams of renderings and outputs. com.squareup.workflow:workflow-ui-core-jvm:x.y.z You are writing workflow-ui-android for another UI framework. Defines the core types used by that artifact.","title":"Lower-level Artifacts"},{"location":"#resources","text":"SF Android GDG @ Square 2019 - Hello Workflow (live coding) Android Dialogs 5-part Coding Series 1 , 2 , 3 , 4 , 5 Reactive Workflows a Year Later \u2013 Droidcon NYC 2018 The Reactive Workflow Pattern \u2013 Fragmented Podcast The Reactive Workflow Pattern Update \u2013 Droidcon SF 2017 The Rx Workflow Pattern \u2013 Droidcon NYC 2017 ( slides )","title":"Resources"},{"location":"#releasing-and-deploying","text":"See RELEASING.md .","title":"Releasing and Deploying"},{"location":"#license","text":"Copyright 2019 Square Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"CHANGELOG/","text":"","title":"Change Log \u23cf"},{"location":"CODE_OF_CONDUCT/","text":"Open Source Code of Conduct At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure ourcommunity continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure ourcommunity continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"CODE_OF_CONDUCT/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"CODE_OF_CONDUCT/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"CODE_OF_CONDUCT/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"CODE_OF_CONDUCT/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"CONTRIBUTING/","text":"Contributing If you would like to contribute code to Workflow you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . If you re using IntelliJ IDEA, we use Square s code style definitions . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"If you would like to contribute code to Workflow you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running ./gradlew clean build . If you re using IntelliJ IDEA, we use Square s code style definitions . Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"RELEASING/","text":"Releasing workflow Production Releases Before you begin: Please make sure you are set up with pod trunk and your CocoaPods account is a contributor to both the Workflow and WorkflowUI pods. If you need to be added as a contributor, please open a ticket requesting access , and assign it to @apgar or @timdonnelly. Merge an update of the change log with the changes since the last release. Make sure you re on the master branch (or fix branch, e.g. v0.1-fixes ). Confirm that the kotlin build is green before committing any changes 1 ( cd kotlin ./gradlew build connectedCheck ) In kotlin/gradle.properties , remove the -SNAPSHOT prefix from the VERSION_NAME property. E.g. VERSION_NAME=0.1.0 Create a commit and tag the commit with the version number: 1 2 git commit -am Releasing v0.1.0. git tag v0.1.0 Upload the kotlin artifacts: 1 ( cd kotlin ./gradlew clean build ./gradlew uploadArchives --no-parallel --no-daemon ) Disabling parallelism and daemon sharing is required by the vanniktech maven publish plugin. Without those, the artifacts will be split across multiple (invalid) staging repositories. Publish to CocoaPods: 1 2 bundle exec pod trunk push Workflow.podspec bundle exec pod trunk push WorkflowUI.podspec Bump the version Kotlin: Update the VERSION_NAME property in kotlin/gradle.properties to the new snapshot version, e.g. VERSION_NAME=0.2.0-SNAPSHOT . Swift: Update s.version in *.podspec to the new version, e.g. 0.2.0 . Commit the new snapshot version: 1 git commit -am Finish releasing v0.1.0. Push your commits and tag: 1 2 3 git push origin master # or git push origin fix-branch git push origin v0.1.0 Create the release on GitHub: Go to the Releases page for the GitHub project. Click Draft a new release . Enter the tag name you just pushed. Title the release with the same name as the tag. Copy paste the changelog entry for this release into the description. If this is a pre-release version, check the pre-release box. Hit Publish release . If this was a fix release, merge changes to the master branch: 1 2 3 4 5 git checkout master git reset --hard origin/master git merge --no-ff v0.1-fixes # Resolve conflicts. Accept master s versions of gradle.properties and podspecs. git push origin master Publish the website. See below. Deploying the documentation website Official Workflow documentation lives at https://squareup.github.io/workflow . The website content consists of three parts: Markdown documentation: Lives in the docs/ folder, and consists of a set of hand-written Markdown files that document high-level concepts. The static site generator mkdocs (with Material theming) is used to convert the Markdown to static, styled HTML. Kotlin API reference: Kdoc embedded in Kotlin source files is converted to GitHub-flavored Markdown by Dokka and then included in the statically-generated website. Swift API reference: Markup comments from Swift files are converted Markdown by Sourcedocs and then included in the statically-generated website. Setting up the site generators If you ve already done this, you can skip to Deploying the website to production below. Kotlin: Dokka Dokka runs as a Gradle plugin, so you need to be able to build the Kotlin source with Gradle, but that s it. To generate the docs manually, run: 1 2 cd kotlin ./gradlew dokka Swift: Sourcedocs Sourcedocs generates a Markdown site from Swift files. You need Ruby, rubygems, bundler (2.x), Xcode 10.2+, CocoaPods, and of course Sourcedocs itself, to run it. Assuming you ve already got Xcode, Ruby, and rubygems set up, install the rest of the dependencies: 1 2 gem install bundler cocoapods brew install sourcedocs If that succeeded, you need to generate an Xcode project before running Sourcedocs: 1 2 3 4 cd swift/Samples/SampleApp/ bundle exec pod install # If this is your first time running CocoaPods, that will fail and you ll need to run this instead: #bundle exec pod install --repo-update You can manually generate the docs to verify everything is working correctly by running: 1 2 3 4 #cd swift/Samples/SampleApp/ sourcedocs generate -- -scheme Workflow -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowUI -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowTesting -workspace SampleApp.xcworkspace mkdocs Mkdocs is written in Python, so you ll need Python and pip in order to run it. Assuming those are set up, run: 1 pip install mkdocs mkdocs-material Generate the site manually with: 1 mkdocs build While you re working on the documentation files, you can run the site locally with: 1 mkdocs serve Deploying the website to production Before deploying the website for real, you need to export our Google Analytics key in an environment variable so that it will get added to the HTML. Get the key from one of the project maintainers, then add the following to your .bashrc and re-source it: 1 export WORKFLOW_GOOGLE_ANALYTICS_KEY = UA-__________-1 Now you re ready to publish the site! Just choose a tag or SHA to deploy from, and run: 1 2 3 ./deploy_website.sh TAG_OR_SHA # For example: #./deploy_website.sh v0.18.0 This will clone the repo to a temporary directory, checkout the right SHA, build Kotlin and Swift API docs, generate HTML, and push the newly-generated content to the gh-pages branch on GitHub. Validating Markdown Since all of our high-level documentation is written in Markdown, we run a linter in CI to ensure we use consistent formatting. Lint errors will fail your PR builds, so to run locally, install markdownlint : 1 gem install mdl Run the linter using the lint_docs.sh : 1 ./lint_docs.sh Rules can be configured by editing .markdownlint.rb . Kotlin Notes Development To build and install the current version to your local Maven repository ( ~/.m2 ), run: 1 ./gradlew clean installArchives Deploying Configuration In order to deploy artifacts to a Maven repository, you ll need to set 4 properties in your private Gradle properties file ( ~/.gradle/gradle.properties ): 1 2 3 4 RELEASE_REPOSITORY_URL= url of release repository SNAPSHOT_REPOSITORY_URL= url of snapshot repository SONATYPE_NEXUS_USERNAME= username SONATYPE_NEXUS_PASSWORD= password Snapshot Releases To deploy a new snapshot release, you don t need to update any properties. Just run: 1 ./gradlew clean uploadArchives","title":"Releasing workflow"},{"location":"RELEASING/#releasing-workflow","text":"","title":"Releasing workflow"},{"location":"RELEASING/#production-releases","text":"Before you begin: Please make sure you are set up with pod trunk and your CocoaPods account is a contributor to both the Workflow and WorkflowUI pods. If you need to be added as a contributor, please open a ticket requesting access , and assign it to @apgar or @timdonnelly. Merge an update of the change log with the changes since the last release. Make sure you re on the master branch (or fix branch, e.g. v0.1-fixes ). Confirm that the kotlin build is green before committing any changes 1 ( cd kotlin ./gradlew build connectedCheck ) In kotlin/gradle.properties , remove the -SNAPSHOT prefix from the VERSION_NAME property. E.g. VERSION_NAME=0.1.0 Create a commit and tag the commit with the version number: 1 2 git commit -am Releasing v0.1.0. git tag v0.1.0 Upload the kotlin artifacts: 1 ( cd kotlin ./gradlew clean build ./gradlew uploadArchives --no-parallel --no-daemon ) Disabling parallelism and daemon sharing is required by the vanniktech maven publish plugin. Without those, the artifacts will be split across multiple (invalid) staging repositories. Publish to CocoaPods: 1 2 bundle exec pod trunk push Workflow.podspec bundle exec pod trunk push WorkflowUI.podspec Bump the version Kotlin: Update the VERSION_NAME property in kotlin/gradle.properties to the new snapshot version, e.g. VERSION_NAME=0.2.0-SNAPSHOT . Swift: Update s.version in *.podspec to the new version, e.g. 0.2.0 . Commit the new snapshot version: 1 git commit -am Finish releasing v0.1.0. Push your commits and tag: 1 2 3 git push origin master # or git push origin fix-branch git push origin v0.1.0 Create the release on GitHub: Go to the Releases page for the GitHub project. Click Draft a new release . Enter the tag name you just pushed. Title the release with the same name as the tag. Copy paste the changelog entry for this release into the description. If this is a pre-release version, check the pre-release box. Hit Publish release . If this was a fix release, merge changes to the master branch: 1 2 3 4 5 git checkout master git reset --hard origin/master git merge --no-ff v0.1-fixes # Resolve conflicts. Accept master s versions of gradle.properties and podspecs. git push origin master Publish the website. See below.","title":"Production Releases"},{"location":"RELEASING/#deploying-the-documentation-website","text":"Official Workflow documentation lives at https://squareup.github.io/workflow . The website content consists of three parts: Markdown documentation: Lives in the docs/ folder, and consists of a set of hand-written Markdown files that document high-level concepts. The static site generator mkdocs (with Material theming) is used to convert the Markdown to static, styled HTML. Kotlin API reference: Kdoc embedded in Kotlin source files is converted to GitHub-flavored Markdown by Dokka and then included in the statically-generated website. Swift API reference: Markup comments from Swift files are converted Markdown by Sourcedocs and then included in the statically-generated website.","title":"Deploying the documentation website"},{"location":"RELEASING/#setting-up-the-site-generators","text":"If you ve already done this, you can skip to Deploying the website to production below.","title":"Setting up the site generators"},{"location":"RELEASING/#kotlin-dokka","text":"Dokka runs as a Gradle plugin, so you need to be able to build the Kotlin source with Gradle, but that s it. To generate the docs manually, run: 1 2 cd kotlin ./gradlew dokka","title":"Kotlin: Dokka"},{"location":"RELEASING/#swift-sourcedocs","text":"Sourcedocs generates a Markdown site from Swift files. You need Ruby, rubygems, bundler (2.x), Xcode 10.2+, CocoaPods, and of course Sourcedocs itself, to run it. Assuming you ve already got Xcode, Ruby, and rubygems set up, install the rest of the dependencies: 1 2 gem install bundler cocoapods brew install sourcedocs If that succeeded, you need to generate an Xcode project before running Sourcedocs: 1 2 3 4 cd swift/Samples/SampleApp/ bundle exec pod install # If this is your first time running CocoaPods, that will fail and you ll need to run this instead: #bundle exec pod install --repo-update You can manually generate the docs to verify everything is working correctly by running: 1 2 3 4 #cd swift/Samples/SampleApp/ sourcedocs generate -- -scheme Workflow -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowUI -workspace SampleApp.xcworkspace sourcedocs generate -- -scheme WorkflowTesting -workspace SampleApp.xcworkspace","title":"Swift: Sourcedocs"},{"location":"RELEASING/#mkdocs","text":"Mkdocs is written in Python, so you ll need Python and pip in order to run it. Assuming those are set up, run: 1 pip install mkdocs mkdocs-material Generate the site manually with: 1 mkdocs build While you re working on the documentation files, you can run the site locally with: 1 mkdocs serve","title":"mkdocs"},{"location":"RELEASING/#deploying-the-website-to-production","text":"Before deploying the website for real, you need to export our Google Analytics key in an environment variable so that it will get added to the HTML. Get the key from one of the project maintainers, then add the following to your .bashrc and re-source it: 1 export WORKFLOW_GOOGLE_ANALYTICS_KEY = UA-__________-1 Now you re ready to publish the site! Just choose a tag or SHA to deploy from, and run: 1 2 3 ./deploy_website.sh TAG_OR_SHA # For example: #./deploy_website.sh v0.18.0 This will clone the repo to a temporary directory, checkout the right SHA, build Kotlin and Swift API docs, generate HTML, and push the newly-generated content to the gh-pages branch on GitHub.","title":"Deploying the website to production"},{"location":"RELEASING/#validating-markdown","text":"Since all of our high-level documentation is written in Markdown, we run a linter in CI to ensure we use consistent formatting. Lint errors will fail your PR builds, so to run locally, install markdownlint : 1 gem install mdl Run the linter using the lint_docs.sh : 1 ./lint_docs.sh Rules can be configured by editing .markdownlint.rb .","title":"Validating Markdown"},{"location":"RELEASING/#kotlin-notes","text":"","title":"Kotlin Notes"},{"location":"RELEASING/#development","text":"To build and install the current version to your local Maven repository ( ~/.m2 ), run: 1 ./gradlew clean installArchives","title":"Development"},{"location":"RELEASING/#deploying","text":"","title":"Deploying"},{"location":"RELEASING/#configuration","text":"In order to deploy artifacts to a Maven repository, you ll need to set 4 properties in your private Gradle properties file ( ~/.gradle/gradle.properties ): 1 2 3 4 RELEASE_REPOSITORY_URL= url of release repository SNAPSHOT_REPOSITORY_URL= url of snapshot repository SONATYPE_NEXUS_USERNAME= username SONATYPE_NEXUS_PASSWORD= password","title":"Configuration"},{"location":"RELEASING/#snapshot-releases","text":"To deploy a new snapshot release, you don t need to update any properties. Just run: 1 ./gradlew clean uploadArchives","title":"Snapshot Releases"},{"location":"concepts/","text":"Concepts Workflows provide a way to build complex applications out of small, isolated pieces with a predictable data flow and a consistent API contract. They are conceptually similar to components in architecture patterns such as React (though they are fully native and type-safe). Note One important difference between workflows and components found in web frontend frameworks comes from the vast differences between the DOM and native UI paradigms (iOS/Android). The DOM is already declarative (meaning that we can always reason about the element tree in a web page). UIKit, for is not \u2013 it very much relies on a procedural programming model where transitions are performed by imperative methods like push , fadeOut , etc. For this reason, workflows do not ever refer directly to views. They are instead responsible for rendering view models. This view model can then be used to update the UI. Workflow is cross-platform While specific APIs differ between Swift and Kotlin, the Workflow library shares all of the same conceptual pieces on both platforms. This is extremely beneficial when building cross-platform software, as the same design (though not the same code) can be used for both Swift and Kotlin. Build a feature on one platform first? That code now serves as an excellent reference when implementing the same functionality on the other platform. The Role of a Workflow Workflow is a protocol (in Swift) and interface (in Kotlin) that defines the contract for a single node in the workflow hierarchy. Swift 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public protocol Workflow : AnyWorkflowConvertible { associatedtype State associatedtype Output = Never associatedtype Rendering func makeInitialState () - State func workflowDidChange ( from previousWorkflow : Self , state : inout State ) func render ( state : State , context : RenderContext Self ) - Rendering } Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 interface Workflow in InputT : Any , StateT : Any , out OutputT : Any , out RenderingT : Any { fun initialState ( input : InputT ): StateT fun onInputChanged ( old : InputT , new : InputT , state : StateT ): StateT = state fun render ( input : InputT , state : StateT , context : RenderContext StateT , OutputT ): RenderingT fun snapshotState ( state : StateT ): Snapshot fun restoreState ( snapshot : Snapshot ): StateT } Workflows have several responsibilities: Workflows have state Every Workflow implementation defines a State type to maintain any necessary state while the workflow is running. For example, a tic-tac-toe game might have a state like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct State { enum Player { case x case o } enum Space { case unfilled filled ( Player ) } // 3 rows * 3 columns = 9 spaces var spaces : [ Space ] = Array ( repeating : . unfilled , count : 9 ) var currentTurn : Player = . x } When the workflow is first started, it is queried for an initial state value. From that point forward, the workflow may advance to a new state as the result of events occurring from various sources (which will be covered below). Workflows produce an external representation of their state via Rendering Immediately after starting up, or after a state transition occurs, a workflow will have its render(state:context:) method called. This method is responsible for creating and returning a value of type Rendering . You can think of Rendering as the external state of the workflow. While a workflow s internal state may contain more detailed or comprehensive state, the Rendering (external state) is a type that is useful outside of the workflow. When building an interactive application, the Rendering type is commonly (but not always) a view model that will drive the UI layer. Workflows form a hierarchy (they may have children) As they produce a Rendering value, it is common for workflows to delegate some portion of that work to a child workflow . This is also done via the RenderContext that is passed into the render method. In order to delegate to a child, the parent workflow instantiates the child within the render method. The parent then calls render on the context, with the child workflow as the single argument. The infrastructure will spin up the child workflow (including initializing its initial state) if this is the first time this child has been used, or, if the child was also used on the previous render pass, the existing child will be updated. Either way, render will ultimately be called on the child (by the Workflow infrastructure), and the resulting Child.Rendering value will be returned to the parent. This allows a parent to return complex Rendering types (such as a view model representing the entire UI state of an application) without needing to model all of that complexity within a single workflow. Workflows can respond to UI events The RenderContext that is passed into render as the second parameter provides some useful tools to assist in creating the Rendering value. If a workflow is producing a view model, it is common to need an event handler to respond to UI events. The RenderContext has API to create an event handler that, when called, will advance the workflow by dispatching an action back to the workflow. Workflows can subscribe to external event sources If a workflow needs to respond to some external event source (e.g. push notifications), the workflow can ask the context to listen to those events from within the render method. Workflows can perform asynchronous tasks (Workers) Workers are very similar in concept to child workflows. Unlike child workflows, however, workers do not have a Rendering type; they only exist to perform a single asynchronous task before sending zero or more output events back up the tree to their parent. A workflow can ask the infrastructure to await the result of a worker by handing that worker to the context within a call to the render method. Workflows are advanced by Action s Any time something happens that should advance a workflow \u2013 a UI event, a network response, a child s output event \u2013 actions are used to perform the update. For example, a workflow may respond to UI events by mapping those events into a type conforming to WorkflowAction . These types implement the logic to advance a workflow by: Advancing to a new state (Optionally) emitting an output event up the tree. Workflows can emit output events up the hierarchy to their parent When a workflow is advanced by an action, an optional output event can be sent up the workflow hierarchy. This is the opportunity for a workflow to notify its parent that something has happened (and the parent s opportunity to respond to that event by dispatching its own action, continuing up the tree as long as output events are emitted).","title":"Concepts"},{"location":"concepts/#concepts","text":"Workflows provide a way to build complex applications out of small, isolated pieces with a predictable data flow and a consistent API contract. They are conceptually similar to components in architecture patterns such as React (though they are fully native and type-safe). Note One important difference between workflows and components found in web frontend frameworks comes from the vast differences between the DOM and native UI paradigms (iOS/Android). The DOM is already declarative (meaning that we can always reason about the element tree in a web page). UIKit, for is not \u2013 it very much relies on a procedural programming model where transitions are performed by imperative methods like push , fadeOut , etc. For this reason, workflows do not ever refer directly to views. They are instead responsible for rendering view models. This view model can then be used to update the UI.","title":"Concepts"},{"location":"concepts/#workflow-is-cross-platform","text":"While specific APIs differ between Swift and Kotlin, the Workflow library shares all of the same conceptual pieces on both platforms. This is extremely beneficial when building cross-platform software, as the same design (though not the same code) can be used for both Swift and Kotlin. Build a feature on one platform first? That code now serves as an excellent reference when implementing the same functionality on the other platform.","title":"Workflow is cross-platform"},{"location":"concepts/#the-role-of-a-workflow","text":"Workflow is a protocol (in Swift) and interface (in Kotlin) that defines the contract for a single node in the workflow hierarchy. Swift 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public protocol Workflow : AnyWorkflowConvertible { associatedtype State associatedtype Output = Never associatedtype Rendering func makeInitialState () - State func workflowDidChange ( from previousWorkflow : Self , state : inout State ) func render ( state : State , context : RenderContext Self ) - Rendering } Kotlin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 interface Workflow in InputT : Any , StateT : Any , out OutputT : Any , out RenderingT : Any { fun initialState ( input : InputT ): StateT fun onInputChanged ( old : InputT , new : InputT , state : StateT ): StateT = state fun render ( input : InputT , state : StateT , context : RenderContext StateT , OutputT ): RenderingT fun snapshotState ( state : StateT ): Snapshot fun restoreState ( snapshot : Snapshot ): StateT } Workflows have several responsibilities:","title":"The Role of a Workflow"},{"location":"concepts/#workflows-have-state","text":"Every Workflow implementation defines a State type to maintain any necessary state while the workflow is running. For example, a tic-tac-toe game might have a state like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct State { enum Player { case x case o } enum Space { case unfilled filled ( Player ) } // 3 rows * 3 columns = 9 spaces var spaces : [ Space ] = Array ( repeating : . unfilled , count : 9 ) var currentTurn : Player = . x } When the workflow is first started, it is queried for an initial state value. From that point forward, the workflow may advance to a new state as the result of events occurring from various sources (which will be covered below).","title":"Workflows have state"},{"location":"concepts/#workflows-produce-an-external-representation-of-their-state-via-rendering","text":"Immediately after starting up, or after a state transition occurs, a workflow will have its render(state:context:) method called. This method is responsible for creating and returning a value of type Rendering . You can think of Rendering as the external state of the workflow. While a workflow s internal state may contain more detailed or comprehensive state, the Rendering (external state) is a type that is useful outside of the workflow. When building an interactive application, the Rendering type is commonly (but not always) a view model that will drive the UI layer.","title":"Workflows produce an external representation of their state via Rendering"},{"location":"concepts/#workflows-form-a-hierarchy-they-may-have-children","text":"As they produce a Rendering value, it is common for workflows to delegate some portion of that work to a child workflow . This is also done via the RenderContext that is passed into the render method. In order to delegate to a child, the parent workflow instantiates the child within the render method. The parent then calls render on the context, with the child workflow as the single argument. The infrastructure will spin up the child workflow (including initializing its initial state) if this is the first time this child has been used, or, if the child was also used on the previous render pass, the existing child will be updated. Either way, render will ultimately be called on the child (by the Workflow infrastructure), and the resulting Child.Rendering value will be returned to the parent. This allows a parent to return complex Rendering types (such as a view model representing the entire UI state of an application) without needing to model all of that complexity within a single workflow.","title":"Workflows form a hierarchy (they may have children)"},{"location":"concepts/#workflows-can-respond-to-ui-events","text":"The RenderContext that is passed into render as the second parameter provides some useful tools to assist in creating the Rendering value. If a workflow is producing a view model, it is common to need an event handler to respond to UI events. The RenderContext has API to create an event handler that, when called, will advance the workflow by dispatching an action back to the workflow.","title":"Workflows can respond to UI events"},{"location":"concepts/#workflows-can-subscribe-to-external-event-sources","text":"If a workflow needs to respond to some external event source (e.g. push notifications), the workflow can ask the context to listen to those events from within the render method.","title":"Workflows can subscribe to external event sources"},{"location":"concepts/#workflows-can-perform-asynchronous-tasks-workers","text":"Workers are very similar in concept to child workflows. Unlike child workflows, however, workers do not have a Rendering type; they only exist to perform a single asynchronous task before sending zero or more output events back up the tree to their parent. A workflow can ask the infrastructure to await the result of a worker by handing that worker to the context within a call to the render method.","title":"Workflows can perform asynchronous tasks (Workers)"},{"location":"concepts/#workflows-are-advanced-by-actions","text":"Any time something happens that should advance a workflow \u2013 a UI event, a network response, a child s output event \u2013 actions are used to perform the update. For example, a workflow may respond to UI events by mapping those events into a type conforming to WorkflowAction . These types implement the logic to advance a workflow by: Advancing to a new state (Optionally) emitting an output event up the tree.","title":"Workflows are advanced by Actions"},{"location":"concepts/#workflows-can-emit-output-events-up-the-hierarchy-to-their-parent","text":"When a workflow is advanced by an action, an optional output event can be sent up the workflow hierarchy. This is the opportunity for a workflow to notify its parent that something has happened (and the parent s opportunity to respond to that event by dispatching its own action, continuing up the tree as long as output events are emitted).","title":"Workflows can emit output events up the hierarchy to their parent"},{"location":"faq/","text":"Frequently Asked Questions Isn t this basically React/Elm? React and the Elm architecture were both strong influences for this library. However both those libraries are written for JavaScript. Workflows are written in and for both Kotlin and Swift, making use of features of those languages, and with usability from those languages as a major design goal. There are also a few architectural differences: React Elm Workflow Modularity Component TK Workflow is analogous to React s Component State Each Component has a state property that is read directly and updated via a setState method. State is called Model in Elm. Workflow s have an associated state type. The state can only be updated when the input changes, or with a WorkflowAction . Views Component s have a render method that returns a tree of elements. Elm applications have a view function that returns a tree of elements. Since workflows are not tied to any particular UI view layer, they can have an arbitrary rendering type. The render() method returns this type. Dependencies React allows parent components to pass props down to their children. TK In Swift, Workflow s are often structs that need to be initialized with their dependencies and configuration data from their parent. In Kotlin, they have a separate type parameter ( InputT ) that is always passed down from the parent. Workflow instances can also inject dependencies, and play nicely with dependency injection frameworks. Composability TK TK TK Event Handling TK TK TK How is this different than MvRx? Besides being very Android and Rx specific, MvRx solves view modeling problems only per screen. Workflow was mainly inspired by the need to manage and compose navigation in apps with dozens or hundreds of screens. How do I get involved and/or contribute? Workflow is open source! See our CONTRIBUTING doc to get started. Stay tuned! We re considering hosting a public Slack channel for open source contributors. This seems clever. Can I stick with a traditional development approach? Of course! Workflow was designed to make complex application architecture predictable and safe for large development teams. We re confident that it brings benefits even to smaller projects, but there is never only one right way to build software. We recommend to follow good practices and use an architecture that makes sense for your project . Why do we need another architecture? Architectural patterns with weak access controls and heavy use of shared mutable state make it incredibly difficult to fully understand the behavior of the code that we are writing. This quickly devolves into an arms race as the codebase grows: if every feature or component in the codebase might change anything at any time, bug fixes turn into a really sad game of whack-a-mole. We have seen this pattern occur repeatedly in traditional mobile applications using patterns like MVC. Workflow defines strong boundaries and contracts between separate parts of the application to ensure that our code remains predictable and maintainable as the size and complexity of the codebase grows.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#isnt-this-basically-reactelm","text":"React and the Elm architecture were both strong influences for this library. However both those libraries are written for JavaScript. Workflows are written in and for both Kotlin and Swift, making use of features of those languages, and with usability from those languages as a major design goal. There are also a few architectural differences: React Elm Workflow Modularity Component TK Workflow is analogous to React s Component State Each Component has a state property that is read directly and updated via a setState method. State is called Model in Elm. Workflow s have an associated state type. The state can only be updated when the input changes, or with a WorkflowAction . Views Component s have a render method that returns a tree of elements. Elm applications have a view function that returns a tree of elements. Since workflows are not tied to any particular UI view layer, they can have an arbitrary rendering type. The render() method returns this type. Dependencies React allows parent components to pass props down to their children. TK In Swift, Workflow s are often structs that need to be initialized with their dependencies and configuration data from their parent. In Kotlin, they have a separate type parameter ( InputT ) that is always passed down from the parent. Workflow instances can also inject dependencies, and play nicely with dependency injection frameworks. Composability TK TK TK Event Handling TK TK TK","title":"Isn't this basically React/Elm?"},{"location":"faq/#how-is-this-different-than-mvrx","text":"Besides being very Android and Rx specific, MvRx solves view modeling problems only per screen. Workflow was mainly inspired by the need to manage and compose navigation in apps with dozens or hundreds of screens.","title":"How is this different than MvRx?"},{"location":"faq/#how-do-i-get-involved-andor-contribute","text":"Workflow is open source! See our CONTRIBUTING doc to get started. Stay tuned! We re considering hosting a public Slack channel for open source contributors.","title":"How do I get involved and/or contribute?"},{"location":"faq/#this-seems-clever-can-i-stick-with-a-traditional-development-approach","text":"Of course! Workflow was designed to make complex application architecture predictable and safe for large development teams. We re confident that it brings benefits even to smaller projects, but there is never only one right way to build software. We recommend to follow good practices and use an architecture that makes sense for your project .","title":"This seems clever. Can I stick with a traditional development approach?"},{"location":"faq/#why-do-we-need-another-architecture","text":"Architectural patterns with weak access controls and heavy use of shared mutable state make it incredibly difficult to fully understand the behavior of the code that we are writing. This quickly devolves into an arms race as the codebase grows: if every feature or component in the codebase might change anything at any time, bug fixes turn into a really sad game of whack-a-mole. We have seen this pattern occur repeatedly in traditional mobile applications using patterns like MVC. Workflow defines strong boundaries and contracts between separate parts of the application to ensure that our code remains predictable and maintainable as the size and complexity of the codebase grows.","title":"Why do we need another architecture?"},{"location":"overview/","text":"Workflow Documentation Workflow is a library for building applications in a simple, consistant shape. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25c0 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Workflows \u2502 \u25c0 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25c0 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2502 UI \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Events \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 View Models \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25b2 \u25bc \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Container \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Workflows The Workflows at the left of the diagram contain all state and business logic for the application. This is where network requests happen, navigation decisions are made, models are saved to or loaded from disk \u2013 if it s not UI, it s in this box. View Models The primary job of the Workflows is to emit an observable stream of view models representing the current state of the application s UI. You will sometimes hear these view models referred to as screens , which is just another way to refer to a view model that contains the data for an entire screen in the app. Container The container is responsible for plumbing together the two separate halves of the application. It subscribes to the stream of view models that the workflows provide, then implements the logic to update the live UI whenever a new view model is emitted. UI This is typically conventional platform-specific UI code. One important note is that UI code should never attempt to navigate using system components (navigation controller pushes, modal presentation, etc). In this architecture the workflows are in charge \u2013 any navigation that happens outside of the workflow will be disregarded and stomped on during the next update cycle. Events In order for the application to actually do anything, the workflow needs to receive events from the UI. When the user interacts with the application by, for example, tapping a button, the workflow receives that event \u2013 which may trigger a simple state transition, or more complex behavior such as a network request.","title":"Documentation"},{"location":"overview/#workflow-documentation","text":"Workflow is a library for building applications in a simple, consistant shape. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25c0 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Workflows \u2502 \u25c0 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25c0 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2500 \u2502 UI \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Events \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 View Models \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25b2 \u25bc \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Container \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Workflow Documentation"},{"location":"overview/#workflows","text":"The Workflows at the left of the diagram contain all state and business logic for the application. This is where network requests happen, navigation decisions are made, models are saved to or loaded from disk \u2013 if it s not UI, it s in this box.","title":"Workflows"},{"location":"overview/#view-models","text":"The primary job of the Workflows is to emit an observable stream of view models representing the current state of the application s UI. You will sometimes hear these view models referred to as screens , which is just another way to refer to a view model that contains the data for an entire screen in the app.","title":"View Models"},{"location":"overview/#container","text":"The container is responsible for plumbing together the two separate halves of the application. It subscribes to the stream of view models that the workflows provide, then implements the logic to update the live UI whenever a new view model is emitted.","title":"Container"},{"location":"overview/#ui","text":"This is typically conventional platform-specific UI code. One important note is that UI code should never attempt to navigate using system components (navigation controller pushes, modal presentation, etc). In this architecture the workflows are in charge \u2013 any navigation that happens outside of the workflow will be disregarded and stomped on during the next update cycle.","title":"UI"},{"location":"overview/#events","text":"In order for the application to actually do anything, the workflow needs to receive events from the UI. When the user interacts with the application by, for example, tapping a button, the workflow receives that event \u2013 which may trigger a simple state transition, or more complex behavior such as a network request.","title":"Events"},{"location":"kotlin/","text":"Kotlin Coming soon","title":"Overview"},{"location":"kotlin/#kotlin","text":"Coming soon","title":"Kotlin"},{"location":"kotlin/api/workflow-core/","text":"workflow-core Packages Name Summary com.squareup.workflow Index All Types","title":"Home"},{"location":"kotlin/api/workflow-core/#packages","text":"Name Summary com.squareup.workflow","title":"Packages"},{"location":"kotlin/api/workflow-core/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-core/alltypes/","text":"All Types Name Summary kotlinx.coroutines.channels.BroadcastChannel (extensions in package com.squareup.workflow) okio.BufferedSink (extensions in package com.squareup.workflow) okio.BufferedSource (extensions in package com.squareup.workflow) okio.ByteString (extensions in package com.squareup.workflow) kotlinx.coroutines.Deferred (extensions in package com.squareup.workflow) com.squareup.workflow.EventHandler Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions. kotlinx.coroutines.flow.Flow (extensions in package com.squareup.workflow) com.squareup.workflow.LifecycleWorker Worker that performs some action when the worker is started and/or cancelled. kotlinx.coroutines.channels.ReceiveChannel (extensions in package com.squareup.workflow) com.squareup.workflow.RenderContext Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. com.squareup.workflow.Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. com.squareup.workflow.StatefulWorkflow A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. com.squareup.workflow.StatelessWorkflow Minimal implementation of Workflow that maintains no state of its own. com.squareup.workflow.VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you. com.squareup.workflow.Worker Represents a unit of asynchronous work that can have zero, one, or multiple outputs. com.squareup.workflow.Workflow A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. com.squareup.workflow.WorkflowAction A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output.","title":"Home"},{"location":"kotlin/api/workflow-core/alltypes/#all-types","text":"Name Summary kotlinx.coroutines.channels.BroadcastChannel (extensions in package com.squareup.workflow) okio.BufferedSink (extensions in package com.squareup.workflow) okio.BufferedSource (extensions in package com.squareup.workflow) okio.ByteString (extensions in package com.squareup.workflow) kotlinx.coroutines.Deferred (extensions in package com.squareup.workflow) com.squareup.workflow.EventHandler Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions. kotlinx.coroutines.flow.Flow (extensions in package com.squareup.workflow) com.squareup.workflow.LifecycleWorker Worker that performs some action when the worker is started and/or cancelled. kotlinx.coroutines.channels.ReceiveChannel (extensions in package com.squareup.workflow) com.squareup.workflow.RenderContext Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. com.squareup.workflow.Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. com.squareup.workflow.StatefulWorkflow A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. com.squareup.workflow.StatelessWorkflow Minimal implementation of Workflow that maintains no state of its own. com.squareup.workflow.VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you. com.squareup.workflow.Worker Represents a unit of asynchronous work that can have zero, one, or multiple outputs. com.squareup.workflow.Workflow A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. com.squareup.workflow.WorkflowAction A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output.","title":"All Types"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/","text":"workflow-core / com.squareup.workflow Package com.squareup.workflow Types Name Summary EventHandler class EventHandler in EventT : ( EventT ) - Unit Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions. LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or cancelled. RenderContext interface RenderContext StateT, in OutputT : Any Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. Snapshot class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. StatefulWorkflow abstract class StatefulWorkflow in InputT, StateT, out OutputT : Any , out RenderingT : Workflow InputT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow abstract class StatelessWorkflow InputT, OutputT : Any , RenderingT : Workflow InputT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own. Worker interface Worker out T Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workflow interface Workflow in InputT, out OutputT : Any , out RenderingT A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. WorkflowAction interface WorkflowAction StateT, out OutputT : Any : ( StateT ) - Pair StateT , OutputT ? A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output. Annotations Name Summary VeryExperimentalWorkflow annotation class VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you. Extensions for External Classes Name Summary kotlinx.coroutines.channels.BroadcastChannel kotlinx.coroutines.channels.ReceiveChannel kotlinx.coroutines.Deferred kotlinx.coroutines.flow.Flow okio.BufferedSink okio.BufferedSource okio.ByteString Functions Name Summary invoke operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument. mapRendering fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , onWorkerOutput fun StateT, OutputT : Any , T RenderContext StateT , OutputT .onWorkerOutput(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun InputT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow InputT , Nothing , ChildRenderingT , input: InputT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output. runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s. Companion Object Functions Name Summary rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing. stateful fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( InputT , Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot , onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( InputT ) - StateT , render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given function. stateless fun InputT, OutputT : Any , RenderingT Workflow.Companion.stateless(render: RenderContext Nothing , OutputT .(input: InputT ) - RenderingT ): Workflow InputT , OutputT , RenderingT Returns a stateless Workflow via the given render function.","title":"workflow-core"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#package-comsquareupworkflow","text":"","title":"Package com.squareup.workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#types","text":"Name Summary EventHandler class EventHandler in EventT : ( EventT ) - Unit Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions. LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or cancelled. RenderContext interface RenderContext StateT, in OutputT : Any Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. Snapshot class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. StatefulWorkflow abstract class StatefulWorkflow in InputT, StateT, out OutputT : Any , out RenderingT : Workflow InputT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow abstract class StatelessWorkflow InputT, OutputT : Any , RenderingT : Workflow InputT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own. Worker interface Worker out T Represents a unit of asynchronous work that can have zero, one, or multiple outputs. Workflow interface Workflow in InputT, out OutputT : Any , out RenderingT A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. WorkflowAction interface WorkflowAction StateT, out OutputT : Any : ( StateT ) - Pair StateT , OutputT ? A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output.","title":"Types"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#annotations","text":"Name Summary VeryExperimentalWorkflow annotation class VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"Annotations"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#extensions-for-external-classes","text":"Name Summary kotlinx.coroutines.channels.BroadcastChannel kotlinx.coroutines.channels.ReceiveChannel kotlinx.coroutines.Deferred kotlinx.coroutines.flow.Flow okio.BufferedSink okio.BufferedSource okio.ByteString","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#functions","text":"Name Summary invoke operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument. mapRendering fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , onWorkerOutput fun StateT, OutputT : Any , T RenderContext StateT , OutputT .onWorkerOutput(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun InputT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow InputT , Nothing , ChildRenderingT , input: InputT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output. runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/#companion-object-functions","text":"Name Summary rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing. stateful fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( InputT , Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot , onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( InputT ) - StateT , render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given function. stateless fun InputT, OutputT : Any , RenderingT Workflow.Companion.stateless(render: RenderContext Nothing , OutputT .(input: InputT ) - RenderingT ): Workflow InputT , OutputT , RenderingT Returns a stateless Workflow via the given render function.","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/invoke/","text":"workflow-core / com.squareup.workflow / invoke invoke operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"Invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/invoke/#invoke","text":"operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/map-rendering/","text":"workflow-core / com.squareup.workflow / mapRendering mapRendering fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Map rendering"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/map-rendering/#maprendering","text":"fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"mapRendering"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/on-worker-output/","text":"workflow-core / com.squareup.workflow / onWorkerOutput onWorkerOutput fun StateT, OutputT : Any , T RenderContext StateT , OutputT .onWorkerOutput(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). Parameters key - An optional string key that is used to distinguish between identical Worker s.","title":"On worker output"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/on-worker-output/#onworkeroutput","text":"fun StateT, OutputT : Any , T RenderContext StateT , OutputT .onWorkerOutput(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered).","title":"onWorkerOutput"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/on-worker-output/#parameters","text":"key - An optional string key that is used to distinguish between identical Worker s.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/render-child/","text":"workflow-core / com.squareup.workflow / renderChild renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun InputT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow InputT , Nothing , ChildRenderingT , input: InputT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output.","title":"Render child"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/render-child/#renderchild","text":"fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun InputT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow InputT , Nothing , ChildRenderingT , input: InputT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output.","title":"renderChild"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/rendering/","text":"workflow-core / com.squareup.workflow / rendering rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing.","title":"Rendering"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/rendering/#rendering","text":"fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing.","title":"rendering"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/running-worker/","text":"workflow-core / com.squareup.workflow / runningWorker runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s. A simple way to create workers that don t output anything is using Worker.createSideEffect . Parameters key - An optional string key that is used to distinguish between identical Worker s.","title":"Running worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/running-worker/#runningworker","text":"fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s. A simple way to create workers that don t output anything is using Worker.createSideEffect .","title":"runningWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/running-worker/#parameters","text":"key - An optional string key that is used to distinguish between identical Worker s.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/stateful/","text":"workflow-core / com.squareup.workflow / stateful stateful inline fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( InputT , Snapshot ?) - StateT , crossinline render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , crossinline snapshot: ( StateT ) - Snapshot , crossinline onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. inline fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( Snapshot ?) - StateT , crossinline render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , crossinline snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given functions. inline fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( InputT ) - StateT , crossinline render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , crossinline onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. This overload does not support snapshotting, but there are other overloads that do. inline fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , crossinline render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given function. This overload does not support snapshotting, but there are other overloads that do.","title":"Stateful"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/stateful/#stateful","text":"inline fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( InputT , Snapshot ?) - StateT , crossinline render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , crossinline snapshot: ( StateT ) - Snapshot , crossinline onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. inline fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( Snapshot ?) - StateT , crossinline render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , crossinline snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given functions. inline fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(crossinline initialState: ( InputT ) - StateT , crossinline render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , crossinline onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. This overload does not support snapshotting, but there are other overloads that do. inline fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , crossinline render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given function. This overload does not support snapshotting, but there are other overloads that do.","title":"stateful"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/stateless/","text":"workflow-core / com.squareup.workflow / stateless stateless inline fun InputT, OutputT : Any , RenderingT Workflow.Companion.stateless(crossinline render: RenderContext Nothing , OutputT .(input: InputT ) - RenderingT ): Workflow InputT , OutputT , RenderingT Returns a stateless Workflow via the given render function. Note that while the returned workflow doesn t have any internal state of its own, it may use input received from its parent, and it may render child workflows that do have their own internal state.","title":"Stateless"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/stateless/#stateless","text":"inline fun InputT, OutputT : Any , RenderingT Workflow.Companion.stateless(crossinline render: RenderContext Nothing , OutputT .(input: InputT ) - RenderingT ): Workflow InputT , OutputT , RenderingT Returns a stateless Workflow via the given render function. Note that while the returned workflow doesn t have any internal state of its own, it may use input received from its parent, and it may render child workflows that do have their own internal state.","title":"stateless"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/","text":"workflow-core / com.squareup.workflow / EventHandler EventHandler class EventHandler in EventT : ( EventT ) - Unit Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions. This type differs from a typical function reference in how it defines equality. All instances of this class are considered equal (and have the same hashcode), which means they can be stored in data classes and the event handlers will be ignored. This makes it much easier to write test assertions for Workflow renderings that include event handlers, since you can compare entire rendering types at once and not field-by-field. Constructors Name Summary init EventHandler(handler: ( EventT ) - Unit ) Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions. Functions Name Summary equals fun equals(other: Any ?): Boolean Returns true iff other is an EventHandler \u2013 all EventHandler s are considered equal. hashCode fun hashCode(): Int All EventHandler s have the same hashcode, since they are all equal. invoke fun invoke(event: EventT ): Unit toString fun toString(): String Extension Functions Name Summary invoke operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/#eventhandler","text":"class EventHandler in EventT : ( EventT ) - Unit Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions. This type differs from a typical function reference in how it defines equality. All instances of this class are considered equal (and have the same hashcode), which means they can be stored in data classes and the event handlers will be ignored. This makes it much easier to write test assertions for Workflow renderings that include event handlers, since you can compare entire rendering types at once and not field-by-field.","title":"EventHandler"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/#constructors","text":"Name Summary init EventHandler(handler: ( EventT ) - Unit ) Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean Returns true iff other is an EventHandler \u2013 all EventHandler s are considered equal. hashCode fun hashCode(): Int All EventHandler s have the same hashcode, since they are all equal. invoke fun invoke(event: EventT ): Unit toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/#extension-functions","text":"Name Summary invoke operator fun EventHandler Unit .invoke(): Unit EventHandler s of type Unit are effectively no-arg functions, so this override lets you invoke them without passing the Unit argument.","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/-init-/","text":"workflow-core / com.squareup.workflow / EventHandler / init init EventHandler(handler: ( EventT ) - Unit ) Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions. This type differs from a typical function reference in how it defines equality. All instances of this class are considered equal (and have the same hashcode), which means they can be stored in data classes and the event handlers will be ignored. This makes it much easier to write test assertions for Workflow renderings that include event handlers, since you can compare entire rendering types at once and not field-by-field.","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/-init-/#init","text":"EventHandler(handler: ( EventT ) - Unit ) Wraps a function that handles an event of type EventT . Implements the raw function type (EventT) - Unit , so instances can be invoked and passed around as functions. This type differs from a typical function reference in how it defines equality. All instances of this class are considered equal (and have the same hashcode), which means they can be stored in data classes and the event handlers will be ignored. This makes it much easier to write test assertions for Workflow renderings that include event handlers, since you can compare entire rendering types at once and not field-by-field.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/equals/","text":"workflow-core / com.squareup.workflow / EventHandler / equals equals fun equals(other: Any ?): Boolean Returns true iff other is an EventHandler \u2013 all EventHandler s are considered equal.","title":"Equals"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/equals/#equals","text":"fun equals(other: Any ?): Boolean Returns true iff other is an EventHandler \u2013 all EventHandler s are considered equal.","title":"equals"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/hash-code/","text":"workflow-core / com.squareup.workflow / EventHandler / hashCode hashCode fun hashCode(): Int All EventHandler s have the same hashcode, since they are all equal.","title":"Hash code"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/hash-code/#hashcode","text":"fun hashCode(): Int All EventHandler s have the same hashcode, since they are all equal.","title":"hashCode"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/invoke/","text":"workflow-core / com.squareup.workflow / EventHandler / invoke invoke fun invoke(event: EventT ): Unit","title":"Invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/invoke/#invoke","text":"fun invoke(event: EventT ): Unit","title":"invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/to-string/","text":"workflow-core / com.squareup.workflow / EventHandler / toString toString fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-event-handler/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/","text":"workflow-core / com.squareup.workflow / LifecycleWorker LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or cancelled. Constructors Name Summary init LifecycleWorker() Worker that performs some action when the worker is started and/or cancelled. Functions Name Summary doesSameWorkAs open fun doesSameWorkAs(otherWorker: Worker * ): Boolean Equates LifecycleWorker s that have the same concrete class. onCancelled open fun onCancelled(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. onStarted open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. run fun run(): Flow Nothing Returns a Flow to execute the work represented by this worker.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/#lifecycleworker","text":"abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or cancelled.","title":"LifecycleWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/#constructors","text":"Name Summary init LifecycleWorker() Worker that performs some action when the worker is started and/or cancelled.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/#functions","text":"Name Summary doesSameWorkAs open fun doesSameWorkAs(otherWorker: Worker * ): Boolean Equates LifecycleWorker s that have the same concrete class. onCancelled open fun onCancelled(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. onStarted open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. run fun run(): Flow Nothing Returns a Flow to execute the work represented by this worker.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/-init-/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / init init LifecycleWorker() Worker that performs some action when the worker is started and/or cancelled.","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/-init-/#init","text":"LifecycleWorker() Worker that performs some action when the worker is started and/or cancelled.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/does-same-work-as/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / doesSameWorkAs doesSameWorkAs open fun doesSameWorkAs(otherWorker: Worker * ): Boolean Overrides Worker.doesSameWorkAs Equates LifecycleWorker s that have the same concrete class.","title":"Does same work as"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/does-same-work-as/#doessameworkas","text":"open fun doesSameWorkAs(otherWorker: Worker * ): Boolean Overrides Worker.doesSameWorkAs Equates LifecycleWorker s that have the same concrete class.","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/on-cancelled/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / onCancelled onCancelled open fun onCancelled(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStarted . Invoked on the dispatcher running the workflow.","title":"On cancelled"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/on-cancelled/#oncancelled","text":"open fun onCancelled(): Unit Called when this worker has been torn down. It is executed concurrently with the parent workflow \u2013 the render pass that cancels this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onStarted . Invoked on the dispatcher running the workflow.","title":"onCancelled"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/on-started/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / onStarted onStarted open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onCancelled . Invoked on the dispatcher running the workflow.","title":"On started"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/on-started/#onstarted","text":"open fun onStarted(): Unit Called when this worker is started. It is executed concurrently with the parent workflow \u2013 the first render pass that starts this worker will not wait for this method to return, and one or more additional render passes may occur before this method is called. This behavior may change to be more strict in the future. This method will be called exactly once for each matching call to onCancelled . Invoked on the dispatcher running the workflow.","title":"onStarted"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/run/","text":"workflow-core / com.squareup.workflow / LifecycleWorker / run run fun run(): Flow Nothing Overrides Worker.run Returns a Flow to execute the work represented by this worker. The Flow is invoked in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the coroutine in which this Flow is being collected will be cancelled.","title":"Run"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-lifecycle-worker/run/#run","text":"fun run(): Flow Nothing Overrides Worker.run Returns a Flow to execute the work represented by this worker. The Flow is invoked in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the coroutine in which this Flow is being collected will be cancelled.","title":"run"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/","text":"workflow-core / com.squareup.workflow / RenderContext RenderContext interface RenderContext StateT, in OutputT : Any Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function. Handling Events See onEvent . Performing Asynchronous Work See onWorkerOutput , onWorkerOutputOrFinished , and runningWorker . Composing Children See renderChild . Functions Name Summary onEvent abstract fun EventT : Any onEvent(handler: ( EventT ) - WorkflowAction StateT , OutputT ): ( EventT ) - Unit Given a function that takes an event and can mutate the state or emit an output, returns a function that will perform that workflow update when called with an event. The returned function is valid until the next render pass. onWorkerOutputOrFinished abstract fun T onWorkerOutputOrFinished(worker: Worker T , key: String = \"\", handler: ( Worker.OutputOrFinished T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output or finishes, handler is called to determine the WorkflowAction to take. renderChild abstract fun ChildInputT, ChildOutputT : Any , ChildRenderingT renderChild(child: Workflow ChildInputT , ChildOutputT , ChildRenderingT , input: ChildInputT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method. Extension Functions Name Summary onWorkerOutput fun StateT, OutputT : Any , T RenderContext StateT , OutputT .onWorkerOutput(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun InputT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow InputT , Nothing , ChildRenderingT , input: InputT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output. runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#rendercontext","text":"interface RenderContext StateT, in OutputT : Any Facilities for a Workflow to interact with other Workflow s and the outside world from inside a render function.","title":"RenderContext"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#handling-events","text":"See onEvent .","title":"Handling Events"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#performing-asynchronous-work","text":"See onWorkerOutput , onWorkerOutputOrFinished , and runningWorker .","title":"Performing Asynchronous Work"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#composing-children","text":"See renderChild .","title":"Composing Children"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#functions","text":"Name Summary onEvent abstract fun EventT : Any onEvent(handler: ( EventT ) - WorkflowAction StateT , OutputT ): ( EventT ) - Unit Given a function that takes an event and can mutate the state or emit an output, returns a function that will perform that workflow update when called with an event. The returned function is valid until the next render pass. onWorkerOutputOrFinished abstract fun T onWorkerOutputOrFinished(worker: Worker T , key: String = \"\", handler: ( Worker.OutputOrFinished T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output or finishes, handler is called to determine the WorkflowAction to take. renderChild abstract fun ChildInputT, ChildOutputT : Any , ChildRenderingT renderChild(child: Workflow ChildInputT , ChildOutputT , ChildRenderingT , input: ChildInputT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/#extension-functions","text":"Name Summary onWorkerOutput fun StateT, OutputT : Any , T RenderContext StateT , OutputT .onWorkerOutput(worker: Worker T , key: String = \"\", handler: ( T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output, handler is called to determine the WorkflowAction to take. When the worker finishes, nothing happens (although another render pass may be triggered). renderChild fun StateT, OutputT : Any , ChildOutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , ChildOutputT , ChildRenderingT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input. fun InputT, StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow InputT , Nothing , ChildRenderingT , input: InputT , key: String = \"\"): ChildRenderingT fun StateT, OutputT : Any , ChildRenderingT RenderContext StateT , OutputT .renderChild(child: Workflow Unit , Nothing , ChildRenderingT , key: String = \"\"): ChildRenderingT Convenience alias of RenderContext.renderChild for workflows that don t take input or emit output. runningWorker fun StateT, OutputT : Any RenderContext StateT , OutputT .runningWorker(worker: Worker Nothing , key: String = \"\"): Unit Ensures a Worker that never emits anything is running. Since worker can t emit anything, it can t trigger any WorkflowAction s.","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/on-event/","text":"workflow-core / com.squareup.workflow / RenderContext / onEvent onEvent abstract fun EventT : Any onEvent(handler: ( EventT ) - WorkflowAction StateT , OutputT ): ( EventT ) - Unit Given a function that takes an event and can mutate the state or emit an output, returns a function that will perform that workflow update when called with an event. The returned function is valid until the next render pass. For example, if you have a rendering type of Screen : 1 2 3 4 data class Screen( val label: String, val onClick: () - Unit ) Then, from your render method, construct the screen like this: 1 2 3 4 5 6 7 return Screen( button1Label = Hello , button2Label = World , onClick = context.onEvent { buttonIndex - emitOutput( Button $buttonIndex clicked! ) } ) Equivalence Testing It is common in unit tests to get a rendering from a workflow, then (since renderings should be value types) create the expected rendering instance and compare them. However, when comparing renderings there is no meaningful way to compare event handlers (other than a null check if they re nullable), and so two renderings that are identical but have different event handler functions should still be considered equal. In order to support this pattern, the functions returned by this method are all considered equal: foo == bar whenever foo and bar are values returned by this method. More precisely, this function returns instances of EventHandler , and all EventHandler instances are considered equal. However, since event handling functions are always valid only for the rendering for which they were created, this means that you can t dedup event handlers in production (e.g. with something like RxJava s distinctUntilChanged ). Event handlers must always be updated, and if you need to de-dup other view data, you must do it at a more granular level. Parameters handler - A function that returns the WorkflowAction to perform when the event handler is invoked.","title":"On event"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/on-event/#onevent","text":"abstract fun EventT : Any onEvent(handler: ( EventT ) - WorkflowAction StateT , OutputT ): ( EventT ) - Unit Given a function that takes an event and can mutate the state or emit an output, returns a function that will perform that workflow update when called with an event. The returned function is valid until the next render pass. For example, if you have a rendering type of Screen : 1 2 3 4 data class Screen( val label: String, val onClick: () - Unit ) Then, from your render method, construct the screen like this: 1 2 3 4 5 6 7 return Screen( button1Label = Hello , button2Label = World , onClick = context.onEvent { buttonIndex - emitOutput( Button $buttonIndex clicked! ) } )","title":"onEvent"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/on-event/#equivalence-testing","text":"It is common in unit tests to get a rendering from a workflow, then (since renderings should be value types) create the expected rendering instance and compare them. However, when comparing renderings there is no meaningful way to compare event handlers (other than a null check if they re nullable), and so two renderings that are identical but have different event handler functions should still be considered equal. In order to support this pattern, the functions returned by this method are all considered equal: foo == bar whenever foo and bar are values returned by this method. More precisely, this function returns instances of EventHandler , and all EventHandler instances are considered equal. However, since event handling functions are always valid only for the rendering for which they were created, this means that you can t dedup event handlers in production (e.g. with something like RxJava s distinctUntilChanged ). Event handlers must always be updated, and if you need to de-dup other view data, you must do it at a more granular level.","title":"Equivalence &amp; Testing"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/on-event/#parameters","text":"handler - A function that returns the WorkflowAction to perform when the event handler is invoked.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/on-worker-output-or-finished/","text":"workflow-core / com.squareup.workflow / RenderContext / onWorkerOutputOrFinished onWorkerOutputOrFinished abstract fun T onWorkerOutputOrFinished(worker: Worker T , key: String = \"\", handler: ( Worker.OutputOrFinished T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output or finishes, handler is called to determine the WorkflowAction to take. Parameters key - An optional string key that is used to distinguish between identical Worker s.","title":"On worker output or finished"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/on-worker-output-or-finished/#onworkeroutputorfinished","text":"abstract fun T onWorkerOutputOrFinished(worker: Worker T , key: String = \"\", handler: ( Worker.OutputOrFinished T ) - WorkflowAction StateT , OutputT ): Unit Ensures worker is running. When the Worker emits an output or finishes, handler is called to determine the WorkflowAction to take.","title":"onWorkerOutputOrFinished"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/on-worker-output-or-finished/#parameters","text":"key - An optional string key that is used to distinguish between identical Worker s.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/render-child/","text":"workflow-core / com.squareup.workflow / RenderContext / renderChild renderChild abstract fun ChildInputT, ChildOutputT : Any , ChildRenderingT renderChild(child: Workflow ChildInputT , ChildOutputT , ChildRenderingT , input: ChildInputT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method. Never call StatefulWorkflow.render or StatelessWorkflow.render directly, always do itthrough this context method. If the child wasn t already running, it will be started either from initialState or its snapshot. If the child was already running, The workflow s onInputChanged method is invoked with the previous input and this one. The child s render method is invoked with input and the child s state. After this method returns, if something happens that trigger s one of child s handlers, and that handler emits an output, the function passed as handler will be invoked with that output. Parameters key - An optional string key that is used to distinguish between workflows of the same type.","title":"Render child"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/render-child/#renderchild","text":"abstract fun ChildInputT, ChildOutputT : Any , ChildRenderingT renderChild(child: Workflow ChildInputT , ChildOutputT , ChildRenderingT , input: ChildInputT , key: String = \"\", handler: ( ChildOutputT ) - WorkflowAction StateT , OutputT ): ChildRenderingT Ensures child is running as a child of this workflow, and returns the result of its render method. Never call StatefulWorkflow.render or StatelessWorkflow.render directly, always do itthrough this context method. If the child wasn t already running, it will be started either from initialState or its snapshot. If the child was already running, The workflow s onInputChanged method is invoked with the previous input and this one. The child s render method is invoked with input and the child s state. After this method returns, if something happens that trigger s one of child s handlers, and that handler emits an output, the function passed as handler will be invoked with that output.","title":"renderChild"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-render-context/render-child/#parameters","text":"key - An optional string key that is used to distinguish between workflows of the same type.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/","text":"workflow-core / com.squareup.workflow / Snapshot Snapshot class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work. Properties Name Summary bytes val bytes: ByteString Functions Name Summary equals fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . hashCode fun hashCode(): Int Calculates hashcode using bytes . toString fun toString(): String Returns a String describing the bytes of this Snapshot . Companion Object Properties Name Summary EMPTY val EMPTY: Snapshot Companion Object Functions Name Summary of fun of(string: String ): Snapshot fun of(byteString: ByteString): Snapshot fun of(lazy: () - ByteString): Snapshot fun of(integer: Int ): Snapshot write fun write(lazy: (BufferedSink) - Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#snapshot","text":"class Snapshot A lazy wrapper of ByteString . Allows Workflow s to capture their state frequently, without worrying about performing unnecessary serialization work.","title":"Snapshot"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#properties","text":"Name Summary bytes val bytes: ByteString","title":"Properties"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . hashCode fun hashCode(): Int Calculates hashcode using bytes . toString fun toString(): String Returns a String describing the bytes of this Snapshot .","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#companion-object-properties","text":"Name Summary EMPTY val EMPTY: Snapshot","title":"Companion Object Properties"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/#companion-object-functions","text":"Name Summary of fun of(string: String ): Snapshot fun of(byteString: ByteString): Snapshot fun of(lazy: () - ByteString): Snapshot fun of(integer: Int ): Snapshot write fun write(lazy: (BufferedSink) - Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/-e-m-p-t-y/","text":"workflow-core / com.squareup.workflow / Snapshot / EMPTY EMPTY val EMPTY: Snapshot","title":" e m p t y"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/-e-m-p-t-y/#empty","text":"val EMPTY: Snapshot","title":"EMPTY"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/bytes/","text":"workflow-core / com.squareup.workflow / Snapshot / bytes bytes val bytes: ByteString","title":"Bytes"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/bytes/#bytes","text":"val bytes: ByteString","title":"bytes"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/equals/","text":"workflow-core / com.squareup.workflow / Snapshot / equals equals fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . This method forces serialization, calling it may be expensive.","title":"Equals"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/equals/#equals","text":"fun equals(other: Any ?): Boolean Compares Snapshot s by comparing their bytes . This method forces serialization, calling it may be expensive.","title":"equals"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/hash-code/","text":"workflow-core / com.squareup.workflow / Snapshot / hashCode hashCode fun hashCode(): Int Calculates hashcode using bytes . This method forces serialization, calling it may be expensive.","title":"Hash code"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/hash-code/#hashcode","text":"fun hashCode(): Int Calculates hashcode using bytes . This method forces serialization, calling it may be expensive.","title":"hashCode"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/of/","text":"workflow-core / com.squareup.workflow / Snapshot / of of @JvmStatic fun of(string: String ): Snapshot @JvmStatic fun of(byteString: ByteString): Snapshot @JvmStatic fun of(lazy: () - ByteString): Snapshot @JvmStatic fun of(integer: Int ): Snapshot","title":"Of"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/of/#of","text":"@JvmStatic fun of(string: String ): Snapshot @JvmStatic fun of(byteString: ByteString): Snapshot @JvmStatic fun of(lazy: () - ByteString): Snapshot @JvmStatic fun of(integer: Int ): Snapshot","title":"of"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/to-string/","text":"workflow-core / com.squareup.workflow / Snapshot / toString toString fun toString(): String Returns a String describing the bytes of this Snapshot . This method forces serialization, calling it may be expensive.","title":"To string"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/to-string/#tostring","text":"fun toString(): String Returns a String describing the bytes of this Snapshot . This method forces serialization, calling it may be expensive.","title":"toString"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/write/","text":"workflow-core / com.squareup.workflow / Snapshot / write write @JvmStatic fun write(lazy: (BufferedSink) - Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"Write"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-snapshot/write/#write","text":"@JvmStatic fun write(lazy: (BufferedSink) - Unit ): Snapshot Create a snapshot by writing to a nice ergonomic BufferedSink .","title":"write"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow StatefulWorkflow abstract class StatefulWorkflow in InputT, StateT, out OutputT : Any , out RenderingT : Workflow InputT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some input and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Input propagates down the tree, outputs and renderings propagate up the tree. Parameters InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via input in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow Constructors Name Summary init StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. Functions Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow InputT , StateT , OutputT , RenderingT Satisfies the Workflow interface by returning this . initialState abstract fun initialState(input: InputT , snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state. onInputChanged open fun onInputChanged(old: InputT , new: InputT , state: StateT ): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in input, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. render abstract fun render(input: InputT , state: StateT , context: RenderContext StateT , OutputT ): RenderingT Called at least once\u2020 any time one of the following things happens: snapshotState abstract fun snapshotState(state: StateT ): Snapshot Called whenever the state changes to generate a new Snapshot of the state. Extension Functions Name Summary mapRendering fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#statefulworkflow","text":"abstract class StatefulWorkflow in InputT, StateT, out OutputT : Any , out RenderingT : Workflow InputT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some input and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Input propagates down the tree, outputs and renderings propagate up the tree.","title":"StatefulWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#parameters","text":"InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via input in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#constructors","text":"Name Summary init StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#functions","text":"Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow InputT , StateT , OutputT , RenderingT Satisfies the Workflow interface by returning this . initialState abstract fun initialState(input: InputT , snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state. onInputChanged open fun onInputChanged(old: InputT , new: InputT , state: StateT ): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in input, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. render abstract fun render(input: InputT , state: StateT , context: RenderContext StateT , OutputT ): RenderingT Called at least once\u2020 any time one of the following things happens: snapshotState abstract fun snapshotState(state: StateT ): Snapshot Called whenever the state changes to generate a new Snapshot of the state.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/#extension-functions","text":"Name Summary mapRendering fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/-init-/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / init init StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some input and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Input propagates down the tree, outputs and renderings propagate up the tree. Parameters InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via input in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/-init-/#init","text":"StatefulWorkflow() A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. The basic purpose of a Workflow is to take some input and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Input propagates down the tree, outputs and renderings propagate up the tree.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/-init-/#parameters","text":"InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. StateT - Typically a data class that contains all of the internal state for this workflow. The state is seeded via input in initialState . It can be serialized and later used to restore the workflow. Implementations of the Workflow interface should not generally contain their own state directly. They may inject objects like instances of their child workflows, or network clients, but should not contain directly mutable state. This is the only type parameter that a parent workflow needn t care about for its children, and may just use star ( * ) instead of specifying it. May be Unit if the workflow does not have any internal state (see StatelessWorkflow ). OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatelessWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/as-stateful-workflow/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / asStatefulWorkflow asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow InputT , StateT , OutputT , RenderingT Overrides Workflow.asStatefulWorkflow Satisfies the Workflow interface by returning this .","title":"As stateful workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/as-stateful-workflow/#asstatefulworkflow","text":"fun asStatefulWorkflow(): StatefulWorkflow InputT , StateT , OutputT , RenderingT Overrides Workflow.asStatefulWorkflow Satisfies the Workflow interface by returning this .","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/initial-state/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / initialState initialState abstract fun initialState(input: InputT , snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state. Parameters snapshot - If the workflow is being created fresh, snapshot will be null. If the workflow is being restored from a Snapshot , snapshot will be the last value returned from snapshotState , and implementations that return something other than Snapshot.EMPTY should create their initial state by parsing their snapshot.","title":"Initial state"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/initial-state/#initialstate","text":"abstract fun initialState(input: InputT , snapshot: Snapshot ?): StateT Called from RenderContext.renderChild when the state machine is first started, to get the initial state.","title":"initialState"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/initial-state/#parameters","text":"snapshot - If the workflow is being created fresh, snapshot will be null. If the workflow is being restored from a Snapshot , snapshot will be the last value returned from snapshotState , and implementations that return something other than Snapshot.EMPTY should create their initial state by parsing their snapshot.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/on-input-changed/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / onInputChanged onInputChanged open fun onInputChanged(old: InputT , new: InputT , state: StateT ): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in input, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. Default implementation does nothing.","title":"On input changed"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/on-input-changed/#oninputchanged","text":"open fun onInputChanged(old: InputT , new: InputT , state: StateT ): StateT Called from RenderContext.renderChild instead of initialState when the workflow is already running. This allows the workflow to detect changes in input, and possibly change its state in response. This method is called eagerly: old and new might be the same value, so it is up to implementing code to perform any diffing if desired. Default implementation does nothing.","title":"onInputChanged"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/render/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / render render abstract fun render(input: InputT , state: StateT , context: RenderContext StateT , OutputT ): RenderingT Called at least once\u2020 any time one of the following things happens: This workflow s input changes (via the parent passing a different one in). This workflow s state changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To nest the rendering of a child workflow in your own, pass the child and any required input to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context . \u2020 This method is guaranteed to be called *at least once for every state, but may be calledmultiple times. Allowing this method to be invoked multiple times makes the internals simpler.*","title":"Render"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/render/#render","text":"abstract fun render(input: InputT , state: StateT , context: RenderContext StateT , OutputT ): RenderingT Called at least once\u2020 any time one of the following things happens: This workflow s input changes (via the parent passing a different one in). This workflow s state changes. A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To nest the rendering of a child workflow in your own, pass the child and any required input to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context . \u2020 This method is guaranteed to be called *at least once for every state, but may be calledmultiple times. Allowing this method to be invoked multiple times makes the internals simpler.*","title":"render"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/snapshot-state/","text":"workflow-core / com.squareup.workflow / StatefulWorkflow / snapshotState snapshotState abstract fun snapshotState(state: StateT ): Snapshot Called whenever the state changes to generate a new Snapshot of the state. Snapshots must be lazy. Serialization must not be done at the time this method is called, since the state will be snapshotted frequently but the serialized form may only be needed very rarely. If the workflow does not have any state, or should always be started from scratch, return Snapshot.EMPTY from this method. See Also initialState","title":"Snapshot state"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateful-workflow/snapshot-state/#snapshotstate","text":"abstract fun snapshotState(state: StateT ): Snapshot Called whenever the state changes to generate a new Snapshot of the state. Snapshots must be lazy. Serialization must not be done at the time this method is called, since the state will be snapshotted frequently but the serialized form may only be needed very rarely. If the workflow does not have any state, or should always be started from scratch, return Snapshot.EMPTY from this method. See Also initialState","title":"snapshotState"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/","text":"workflow-core / com.squareup.workflow / StatelessWorkflow StatelessWorkflow abstract class StatelessWorkflow InputT, OutputT : Any , RenderingT : Workflow InputT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own. Parameters InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow Constructors Name Summary init StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own. Functions Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow InputT , *, OutputT , RenderingT Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. render abstract fun render(input: InputT , context: RenderContext Nothing , OutputT ): RenderingT Called at least once any time one of the following things happens: Extension Functions Name Summary mapRendering fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#statelessworkflow","text":"abstract class StatelessWorkflow InputT, OutputT : Any , RenderingT : Workflow InputT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own.","title":"StatelessWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#parameters","text":"InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#constructors","text":"Name Summary init StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#functions","text":"Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow InputT , *, OutputT , RenderingT Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. render abstract fun render(input: InputT , context: RenderContext Nothing , OutputT ): RenderingT Called at least once any time one of the following things happens:","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/#extension-functions","text":"Name Summary mapRendering fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/-init-/","text":"workflow-core / com.squareup.workflow / StatelessWorkflow / init init StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own. Parameters InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/-init-/#init","text":"StatelessWorkflow() Minimal implementation of Workflow that maintains no state of its own.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/-init-/#parameters","text":"InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/as-stateful-workflow/","text":"workflow-core / com.squareup.workflow / StatelessWorkflow / asStatefulWorkflow asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow InputT , *, OutputT , RenderingT Overrides Workflow.asStatefulWorkflow Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. This method is called a few times per instance, but we don t need to allocate a new StatefulWorkflow every time, so we store it in a private property.","title":"As stateful workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/as-stateful-workflow/#asstatefulworkflow","text":"fun asStatefulWorkflow(): StatefulWorkflow InputT , *, OutputT , RenderingT Overrides Workflow.asStatefulWorkflow Satisfies the Workflow interface by wrapping this in a StatefulWorkflow with Unit state. This method is called a few times per instance, but we don t need to allocate a new StatefulWorkflow every time, so we store it in a private property.","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/render/","text":"workflow-core / com.squareup.workflow / StatelessWorkflow / render render abstract fun render(input: InputT , context: RenderContext Nothing , OutputT ): RenderingT Called at least once any time one of the following things happens: This workflow s input changes (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To get the rendering from a child workflow, pass the child and any required input to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context .","title":"Render"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-stateless-workflow/render/#render","text":"abstract fun render(input: InputT , context: RenderContext Nothing , OutputT ): RenderingT Called at least once any time one of the following things happens: This workflow s input changes (via the parent passing a different one in). A descendant (immediate or transitive child) workflow: Changes its internal state. Emits an output. Never call this method directly. To get the rendering from a child workflow, pass the child and any required input to RenderContext.renderChild . This method should not have any side effects, and in particular should not do anything that blocks the current thread. It may be called multiple times for the same state. It must do all its work by calling methods on context .","title":"render"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/","text":"workflow-core / com.squareup.workflow / VeryExperimentalWorkflow VeryExperimentalWorkflow annotation class VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you. Constructors Name Summary init VeryExperimentalWorkflow() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/#veryexperimentalworkflow","text":"annotation class VeryExperimentalWorkflow Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"VeryExperimentalWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/#constructors","text":"Name Summary init VeryExperimentalWorkflow() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/-init-/","text":"workflow-core / com.squareup.workflow / VeryExperimentalWorkflow / init init VeryExperimentalWorkflow() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-very-experimental-workflow/-init-/#init","text":"VeryExperimentalWorkflow() Marks Workflow APIs that are extremely likely to change in future versions, rely themselves on other unstable, experimental APIs, and SHOULD NOT be used in production code. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/","text":"workflow-core / com.squareup.workflow / Worker Worker interface Worker out T Represents a unit of asynchronous work that can have zero, one, or multiple outputs. A Workflow uses Worker s to perform asynchronous work during the render pass by calling RenderContext.onWorkerOutput or RenderContext.runningWorker . When equivalent Worker s are passed in subsequent render passes, doesSameWorkAs is used to calculate which Worker s are new and should be started, and which ones are continuations from the last render pass and should be allowed to continue working. Worker s that are not included in a render pass are cancelled. Example: Network request Let s say you have a network service with an API that returns a Deferred , and you want to call that service from a Workflow . 1 2 3 interface TimeService { fun getTime(timezone: String): Deferred Long } The first step is to define a Worker that can call this service, and maybe an extension function on your service class: 1 2 3 4 5 6 7 8 9 10 11 12 fun TimeService.getTimeWorker(timezone: String): Worker Long = TimeWorker(timezone, this) private class TimeWorker( val timezone: String, val service: TimeService ): Worker Long { override suspend fun performWork(emitter: Emitter Long ) { val timeDeferred = service.getTime(timezone) emitter.emitOutput(timeDeferred.await()) } } You also need to define how to determine if a previous Worker is already doing the same work. This will ensure that if the same request is made by the same Workflow in adjacent render passes, we ll keep the request alive from the first pass. 1 2 3 override fun doesSameWorkAs(otherWorker: Worker * ): Boolean = otherWorker is TimeWorker timezone == otherWorker.timezone Now you can request the time from your Workflow : 1 2 3 4 class MyWorkflow(private val timeWorker: TimeWorker) { override fun render(\u2026): Foo { context.onWorkerOutput(timeWorker) { time - emitOutput( The time is $time ) } } Alternatively, if the response is a unique type, unlikely to be shared by any other workers, you don t even need to create your own Worker class, you can use a builder, and the worker will automatically be distinguished by that response type: 1 2 3 4 5 6 interface TimeService { fun getTime(timezone: String): Deferred TimeResponse } fun TimeService.getTimeWorker(timezone: String): Worker TimeResponse = Worker.from { getTime(timezone).await()) } See Also create from fromNullable Deferred.asWorker BroadcastChannel.asWorker Types Name Summary OutputOrFinished sealed class OutputOrFinished out T Used by RenderContext.onWorkerOutputOrFinished to distinguish between the two events of a Worker emitting an output and finishing. Functions Name Summary doesSameWorkAs abstract fun doesSameWorkAs(otherWorker: Worker * ): Boolean Override this method to define equivalence between Worker s. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. run abstract fun run(): Flow T Returns a Flow to execute the work represented by this worker. Companion Object Functions Name Summary create fun T create(key: String = \"\", block: suspend FlowCollector T .() - Unit ): Worker T Shorthand for flow { block() }.asWorker(key) . createSideEffect fun createSideEffect(key: String , block: suspend () - Unit ): Worker Nothing Creates a Worker that just performs some side effects and doesn t emit anything. Run the worker from your render method using RenderContext.runningWorker . from fun T from(key: String = \"\", block: suspend () - T ): Worker T Creates a Worker from a function that returns a single value. fromNullable fun T : Any fromNullable(key: String = \"\", block: suspend () - T ?): Worker T Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. timer fun timer(delayMs: Long , key: String = \"\"): Worker Unit Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Inheritors Name Summary LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or cancelled.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#worker","text":"interface Worker out T Represents a unit of asynchronous work that can have zero, one, or multiple outputs. A Workflow uses Worker s to perform asynchronous work during the render pass by calling RenderContext.onWorkerOutput or RenderContext.runningWorker . When equivalent Worker s are passed in subsequent render passes, doesSameWorkAs is used to calculate which Worker s are new and should be started, and which ones are continuations from the last render pass and should be allowed to continue working. Worker s that are not included in a render pass are cancelled.","title":"Worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#example-network-request","text":"Let s say you have a network service with an API that returns a Deferred , and you want to call that service from a Workflow . 1 2 3 interface TimeService { fun getTime(timezone: String): Deferred Long } The first step is to define a Worker that can call this service, and maybe an extension function on your service class: 1 2 3 4 5 6 7 8 9 10 11 12 fun TimeService.getTimeWorker(timezone: String): Worker Long = TimeWorker(timezone, this) private class TimeWorker( val timezone: String, val service: TimeService ): Worker Long { override suspend fun performWork(emitter: Emitter Long ) { val timeDeferred = service.getTime(timezone) emitter.emitOutput(timeDeferred.await()) } } You also need to define how to determine if a previous Worker is already doing the same work. This will ensure that if the same request is made by the same Workflow in adjacent render passes, we ll keep the request alive from the first pass. 1 2 3 override fun doesSameWorkAs(otherWorker: Worker * ): Boolean = otherWorker is TimeWorker timezone == otherWorker.timezone Now you can request the time from your Workflow : 1 2 3 4 class MyWorkflow(private val timeWorker: TimeWorker) { override fun render(\u2026): Foo { context.onWorkerOutput(timeWorker) { time - emitOutput( The time is $time ) } } Alternatively, if the response is a unique type, unlikely to be shared by any other workers, you don t even need to create your own Worker class, you can use a builder, and the worker will automatically be distinguished by that response type: 1 2 3 4 5 6 interface TimeService { fun getTime(timezone: String): Deferred TimeResponse } fun TimeService.getTimeWorker(timezone: String): Worker TimeResponse = Worker.from { getTime(timezone).await()) } See Also create from fromNullable Deferred.asWorker BroadcastChannel.asWorker","title":"Example: Network request"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#types","text":"Name Summary OutputOrFinished sealed class OutputOrFinished out T Used by RenderContext.onWorkerOutputOrFinished to distinguish between the two events of a Worker emitting an output and finishing.","title":"Types"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#functions","text":"Name Summary doesSameWorkAs abstract fun doesSameWorkAs(otherWorker: Worker * ): Boolean Override this method to define equivalence between Worker s. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. run abstract fun run(): Flow T Returns a Flow to execute the work represented by this worker.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#companion-object-functions","text":"Name Summary create fun T create(key: String = \"\", block: suspend FlowCollector T .() - Unit ): Worker T Shorthand for flow { block() }.asWorker(key) . createSideEffect fun createSideEffect(key: String , block: suspend () - Unit ): Worker Nothing Creates a Worker that just performs some side effects and doesn t emit anything. Run the worker from your render method using RenderContext.runningWorker . from fun T from(key: String = \"\", block: suspend () - T ): Worker T Creates a Worker from a function that returns a single value. fromNullable fun T : Any fromNullable(key: String = \"\", block: suspend () - T ?): Worker T Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. timer fun timer(delayMs: Long , key: String = \"\"): Worker Unit Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero.","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/#inheritors","text":"Name Summary LifecycleWorker abstract class LifecycleWorker : Worker Nothing Worker that performs some action when the worker is started and/or cancelled.","title":"Inheritors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/create-side-effect/","text":"workflow-core / com.squareup.workflow / Worker / createSideEffect createSideEffect fun createSideEffect(key: String , block: suspend () - Unit ): Worker Nothing Creates a Worker that just performs some side effects and doesn t emit anything. Run the worker from your render method using RenderContext.runningWorker . The returned Worker will equate to any other workers created with this function that have the same key. The key is required for this builder because there is no type information available to distinguish workers. E.g.: 1 2 3 fun logOnEntered(message: String) = Worker.createSideEffect( logOnEntered ) { println( Entered state: $message ) }","title":"Create side effect"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/create-side-effect/#createsideeffect","text":"fun createSideEffect(key: String , block: suspend () - Unit ): Worker Nothing Creates a Worker that just performs some side effects and doesn t emit anything. Run the worker from your render method using RenderContext.runningWorker . The returned Worker will equate to any other workers created with this function that have the same key. The key is required for this builder because there is no type information available to distinguish workers. E.g.: 1 2 3 fun logOnEntered(message: String) = Worker.createSideEffect( logOnEntered ) { println( Entered state: $message ) }","title":"createSideEffect"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/create/","text":"workflow-core / com.squareup.workflow / Worker / create create inline fun reified T create(key: String = \"\", noinline block: suspend FlowCollector T .() - Unit ): Worker T Shorthand for flow { block() }.asWorker(key) . Note: If your worker just needs to perform side effects and doesn t need to emit anything, use createSideEffect instead (since Nothing can t be used as a reified type parameter).","title":"Create"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/create/#create","text":"inline fun reified T create(key: String = \"\", noinline block: suspend FlowCollector T .() - Unit ): Worker T Shorthand for flow { block() }.asWorker(key) . Note: If your worker just needs to perform side effects and doesn t need to emit anything, use createSideEffect instead (since Nothing can t be used as a reified type parameter).","title":"create"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/does-same-work-as/","text":"workflow-core / com.squareup.workflow / Worker / doesSameWorkAs doesSameWorkAs abstract fun doesSameWorkAs(otherWorker: Worker * ): Boolean Override this method to define equivalence between Worker s. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data.","title":"Does same work as"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/does-same-work-as/#doessameworkas","text":"abstract fun doesSameWorkAs(otherWorker: Worker * ): Boolean Override this method to define equivalence between Worker s. At the end of every render pass, the set of Worker s that were requested by the workflow are compared to the set from the last render pass using this method. Equivalent workers are allowed to keep running. New workers are started ( run is called and the returned Flow is collected). Old workers are cancelled by cancelling their collecting coroutines. Implementations of this method should not be based on object identity. For example, a Worker that performs a network request might check that two workers are requests to the same endpoint and have the same request data.","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/from-nullable/","text":"workflow-core / com.squareup.workflow / Worker / fromNullable fromNullable inline fun reified T : Any fromNullable(key: String = \"\", noinline block: suspend () - T ?): Worker T Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"From nullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/from-nullable/#fromnullable","text":"inline fun reified T : Any fromNullable(key: String = \"\", noinline block: suspend () - T ?): Worker T Creates a Worker from a function that returns a single value. The worker will emit the value if and only if the value is not null , then finish. The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"fromNullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/from/","text":"workflow-core / com.squareup.workflow / Worker / from from inline fun reified T from(key: String = \"\", noinline block: suspend () - T ): Worker T Creates a Worker from a function that returns a single value. Shorthand for flow { emit(block()) }.asWorker(key) . The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"From"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/from/#from","text":"inline fun reified T from(key: String = \"\", noinline block: suspend () - T ): Worker T Creates a Worker from a function that returns a single value. Shorthand for flow { emit(block()) }.asWorker(key) . The returned Worker will equate to any other workers created with any of the Worker builder functions that have the same output type.","title":"from"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/run/","text":"workflow-core / com.squareup.workflow / Worker / run run abstract fun run(): Flow T Returns a Flow to execute the work represented by this worker. The Flow is invoked in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the coroutine in which this Flow is being collected will be cancelled.","title":"Run"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/run/#run","text":"abstract fun run(): Flow T Returns a Flow to execute the work represented by this worker. The Flow is invoked in the context of the workflow runtime. When this Worker , its parent Workflow , or any ancestor Workflow s are torn down, the coroutine in which this Flow is being collected will be cancelled.","title":"run"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/timer/","text":"workflow-core / com.squareup.workflow / Worker / timer timer fun timer(delayMs: Long , key: String = \"\"): Worker Unit Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Workers returned by this function will be compared by key .","title":"Timer"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/timer/#timer","text":"fun timer(delayMs: Long , key: String = \"\"): Worker Unit Creates a Worker that will emit Unit and then finish after delayMs milliseconds. Negative delays are clamped to zero. Workers returned by this function will be compared by key .","title":"timer"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/","text":"workflow-core / com.squareup.workflow / Worker / OutputOrFinished OutputOrFinished sealed class OutputOrFinished out T Used by RenderContext.onWorkerOutputOrFinished to distinguish between the two events of a Worker emitting an output and finishing. Types Name Summary Finished object Finished : Worker.OutputOrFinished Nothing Indicates that a Worker finished, and will not emit any more output values. Output data class Output out T : Worker.OutputOrFinished T Indicates that a Worker emitted an output value. Inheritors Name Summary Finished object Finished : Worker.OutputOrFinished Nothing Indicates that a Worker finished, and will not emit any more output values. Output data class Output out T : Worker.OutputOrFinished T Indicates that a Worker emitted an output value.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/#outputorfinished","text":"sealed class OutputOrFinished out T Used by RenderContext.onWorkerOutputOrFinished to distinguish between the two events of a Worker emitting an output and finishing.","title":"OutputOrFinished"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/#types","text":"Name Summary Finished object Finished : Worker.OutputOrFinished Nothing Indicates that a Worker finished, and will not emit any more output values. Output data class Output out T : Worker.OutputOrFinished T Indicates that a Worker emitted an output value.","title":"Types"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/#inheritors","text":"Name Summary Finished object Finished : Worker.OutputOrFinished Nothing Indicates that a Worker finished, and will not emit any more output values. Output data class Output out T : Worker.OutputOrFinished T Indicates that a Worker emitted an output value.","title":"Inheritors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-finished/","text":"workflow-core / com.squareup.workflow / Worker / OutputOrFinished / Finished Finished object Finished : Worker.OutputOrFinished Nothing Indicates that a Worker finished, and will not emit any more output values. Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-finished/#finished","text":"object Finished : Worker.OutputOrFinished Nothing Indicates that a Worker finished, and will not emit any more output values.","title":"Finished"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-finished/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-finished/to-string/","text":"workflow-core / com.squareup.workflow / Worker / OutputOrFinished / Finished / toString toString fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-finished/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-output/","text":"workflow-core / com.squareup.workflow / Worker / OutputOrFinished / Output Output data class Output out T : Worker.OutputOrFinished T Indicates that a Worker emitted an output value. Constructors Name Summary init Output(value: T ) Indicates that a Worker emitted an output value. Properties Name Summary value val value: T","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-output/#output","text":"data class Output out T : Worker.OutputOrFinished T Indicates that a Worker emitted an output value.","title":"Output"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-output/#constructors","text":"Name Summary init Output(value: T ) Indicates that a Worker emitted an output value.","title":"Constructors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-output/#properties","text":"Name Summary value val value: T","title":"Properties"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-output/-init-/","text":"workflow-core / com.squareup.workflow / Worker / OutputOrFinished / Output / init init Output(value: T ) Indicates that a Worker emitted an output value.","title":" init "},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-output/-init-/#init","text":"Output(value: T ) Indicates that a Worker emitted an output value.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-output/value/","text":"workflow-core / com.squareup.workflow / Worker / OutputOrFinished / Output / value value val value: T","title":"Value"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-worker/-output-or-finished/-output/value/#value","text":"val value: T","title":"value"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/","text":"workflow-core / com.squareup.workflow / Workflow Workflow interface Workflow in InputT, out OutputT : Any , out RenderingT A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. The basic purpose of a Workflow is to take some input and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Input propagates down the tree, outputs and renderings propagate up the tree. Implementing Workflow The Workflow interface is useful as a facade for your API. You can publish an interface that extends Workflow , and keep the implementation (e.g. is your workflow state*ful* or state*less* a private implementation detail. Stateful Workflows If your workflow needs to keep track of internal state, implement the StatefulWorkflow interface. That interface has an additional type parameter, StateT , and allows you to specify how to create the initial state and how to snapshot /restore your state. Stateless Workflows If your workflow simply needs to delegate to other workflows, maybe transforming inputs, outputs, or renderings, extend StatelessWorkflow , or just pass a lambda to the stateless function below. Interacting with Events and Other Workflows All workflows are passed a RenderContext in their render methods. This context allows the workflow to interact with the outside world by doing things like listening for events, subscribing to streams of data, rendering child workflows, and performing cleanup when the workflow is about to be torn down by its parent. See the documentation on RenderContext for more information about what it can do. Parameters InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow StatelessWorkflow Functions Name Summary asStatefulWorkflow abstract fun asStatefulWorkflow(): StatefulWorkflow InputT , *, OutputT , RenderingT Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work. Extension Functions Name Summary mapRendering fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT , Companion Object Extension Functions Name Summary rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing. stateful fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( InputT , Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot , onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( InputT ) - StateT , render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given function. stateless fun InputT, OutputT : Any , RenderingT Workflow.Companion.stateless(render: RenderContext Nothing , OutputT .(input: InputT ) - RenderingT ): Workflow InputT , OutputT , RenderingT Returns a stateless Workflow via the given render function. Inheritors Name Summary StatefulWorkflow abstract class StatefulWorkflow in InputT, StateT, out OutputT : Any , out RenderingT : Workflow InputT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow abstract class StatelessWorkflow InputT, OutputT : Any , RenderingT : Workflow InputT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#workflow","text":"interface Workflow in InputT, out OutputT : Any , out RenderingT A composable, optionally-stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world. The basic purpose of a Workflow is to take some input and return a rendering . To that end, a workflow may keep track of internal state , recursively ask other workflows to render themselves, subscribe to data streams from the outside world, and handle events both from its renderings and from workflows it s delegated to (its children ). A Workflow may also emit output events up to its parent Workflow . Workflows form a tree, where each workflow can have zero or more child workflows. Child workflows are started as necessary whenever another workflow asks for them, and are cleaned up automatically when they re no longer needed. Input propagates down the tree, outputs and renderings propagate up the tree.","title":"Workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#implementing-workflow","text":"The Workflow interface is useful as a facade for your API. You can publish an interface that extends Workflow , and keep the implementation (e.g. is your workflow state*ful* or state*less* a private implementation detail.","title":"Implementing Workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#stateful-workflows","text":"If your workflow needs to keep track of internal state, implement the StatefulWorkflow interface. That interface has an additional type parameter, StateT , and allows you to specify how to create the initial state and how to snapshot /restore your state.","title":"Stateful Workflows"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#stateless-workflows","text":"If your workflow simply needs to delegate to other workflows, maybe transforming inputs, outputs, or renderings, extend StatelessWorkflow , or just pass a lambda to the stateless function below.","title":"Stateless Workflows"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#interacting-with-events-and-other-workflows","text":"All workflows are passed a RenderContext in their render methods. This context allows the workflow to interact with the outside world by doing things like listening for events, subscribing to streams of data, rendering child workflows, and performing cleanup when the workflow is about to be torn down by its parent. See the documentation on RenderContext for more information about what it can do.","title":"Interacting with Events and Other Workflows"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#parameters","text":"InputT - Typically a data class that is used to pass configuration information or bits of state that the workflow can always get from its parent and needn t duplicate in its own state. May be Unit if the workflow does not need any input data. OutputT - Typically a sealed class that represents events that this workflow can send to its parent. May be Nothing if the workflow doesn t need to emit anything. RenderingT - The value returned to this workflow s parent during composition . Typically represents a view of this workflow s input, current state, and children s renderings. A workflow that represents a UI component may use a view model as its rendering type. See Also StatefulWorkflow StatelessWorkflow","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#functions","text":"Name Summary asStatefulWorkflow abstract fun asStatefulWorkflow(): StatefulWorkflow InputT , *, OutputT , RenderingT Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#extension-functions","text":"Name Summary mapRendering fun InputT, OutputT : Any , FromRenderingT, ToRenderingT Workflow InputT , OutputT , FromRenderingT .mapRendering(transform: ( FromRenderingT ) - ToRenderingT ): Workflow InputT , OutputT , ToRenderingT Uses the given function to transform a Workflow that renders FromRenderingT to one renders ToRenderingT ,","title":"Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#companion-object-extension-functions","text":"Name Summary rendering fun OutputT : Any , RenderingT Workflow.Companion.rendering(rendering: RenderingT ): Workflow Unit , OutputT , RenderingT Returns a workflow that does nothing but echo the given rendering . Handy for testing. stateful fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( InputT , Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot , onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT fun InputT, StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( InputT ) - StateT , render: RenderContext StateT , OutputT .(input: InputT , state: StateT ) - RenderingT , onInputChanged: (old: InputT , new: InputT , state: StateT ) - StateT = { _, _, state - state }): StatefulWorkflow InputT , StateT , OutputT , RenderingT Returns a stateful Workflow implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: ( Snapshot ?) - StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT , snapshot: ( StateT ) - Snapshot ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given functions. fun StateT, OutputT : Any , RenderingT Workflow.Companion.stateful(initialState: StateT , render: RenderContext StateT , OutputT .(state: StateT ) - RenderingT ): StatefulWorkflow Unit , StateT , OutputT , RenderingT Returns a stateful Workflow , with no input, implemented via the given function. stateless fun InputT, OutputT : Any , RenderingT Workflow.Companion.stateless(render: RenderContext Nothing , OutputT .(input: InputT ) - RenderingT ): Workflow InputT , OutputT , RenderingT Returns a stateless Workflow via the given render function.","title":"Companion Object Extension Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/#inheritors","text":"Name Summary StatefulWorkflow abstract class StatefulWorkflow in InputT, StateT, out OutputT : Any , out RenderingT : Workflow InputT , OutputT , RenderingT A composable, stateful object that can handle events , delegate to children , subscribe to arbitrary asynchronous events from the outside world, and be saved to a serialized form to be restored later. StatelessWorkflow abstract class StatelessWorkflow InputT, OutputT : Any , RenderingT : Workflow InputT , OutputT , RenderingT Minimal implementation of Workflow that maintains no state of its own.","title":"Inheritors"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/as-stateful-workflow/","text":"workflow-core / com.squareup.workflow / Workflow / asStatefulWorkflow asStatefulWorkflow abstract fun asStatefulWorkflow(): StatefulWorkflow InputT , *, OutputT , RenderingT Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"As stateful workflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow/as-stateful-workflow/#asstatefulworkflow","text":"abstract fun asStatefulWorkflow(): StatefulWorkflow InputT , *, OutputT , RenderingT Provides a StatefulWorkflow view of this workflow. Necessary because StatefulWorkflow is the common API required for RenderContext.renderChild to do its work.","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/","text":"workflow-core / com.squareup.workflow / WorkflowAction WorkflowAction interface WorkflowAction StateT, out OutputT : Any : ( StateT ) - Pair StateT , OutputT ? A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output. Functions Name Summary invoke abstract operator fun invoke(state: StateT ): Pair StateT , OutputT ? Companion Object Functions Name Summary emitOutput fun StateT, OutputT : Any emitOutput(output: OutputT ): WorkflowAction StateT , OutputT fun StateT, OutputT : Any emitOutput(name: String , output: OutputT ): WorkflowAction StateT , OutputT Convenience function to implement WorkflowAction without changing the state. enterState fun StateT, OutputT : Any enterState(newState: StateT , emittingOutput: OutputT ? = null): WorkflowAction StateT , OutputT fun StateT, OutputT : Any enterState(name: String , newState: StateT , emittingOutput: OutputT ? = null): WorkflowAction StateT , OutputT Convenience function that returns a WorkflowAction that will just set the state to newState (without considering the current state) and optionally emit an output. invoke operator fun StateT, OutputT : Any invoke(name: () - String , update: ( StateT ) - Pair StateT , OutputT ? ): WorkflowAction StateT , OutputT Creates a WorkflowAction from the update lambda. The returned object will include the string returned from name in its toString . modifyState fun StateT, OutputT : Any modifyState(name: () - String , emittingOutput: OutputT ? = null, modify: ( StateT ) - StateT ): WorkflowAction StateT , OutputT Convenience function to implement WorkflowAction without returning the output. noAction fun StateT, OutputT : Any noAction(): WorkflowAction StateT , OutputT Returns a WorkflowAction that does nothing: no output will be emitted, and render will be called again with the same state as last time.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/#workflowaction","text":"interface WorkflowAction StateT, out OutputT : Any : ( StateT ) - Pair StateT , OutputT ? A function that can change the current state of a Workflow by returning a new one, and also optionally emit an output.","title":"WorkflowAction"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/#functions","text":"Name Summary invoke abstract operator fun invoke(state: StateT ): Pair StateT , OutputT ?","title":"Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/#companion-object-functions","text":"Name Summary emitOutput fun StateT, OutputT : Any emitOutput(output: OutputT ): WorkflowAction StateT , OutputT fun StateT, OutputT : Any emitOutput(name: String , output: OutputT ): WorkflowAction StateT , OutputT Convenience function to implement WorkflowAction without changing the state. enterState fun StateT, OutputT : Any enterState(newState: StateT , emittingOutput: OutputT ? = null): WorkflowAction StateT , OutputT fun StateT, OutputT : Any enterState(name: String , newState: StateT , emittingOutput: OutputT ? = null): WorkflowAction StateT , OutputT Convenience function that returns a WorkflowAction that will just set the state to newState (without considering the current state) and optionally emit an output. invoke operator fun StateT, OutputT : Any invoke(name: () - String , update: ( StateT ) - Pair StateT , OutputT ? ): WorkflowAction StateT , OutputT Creates a WorkflowAction from the update lambda. The returned object will include the string returned from name in its toString . modifyState fun StateT, OutputT : Any modifyState(name: () - String , emittingOutput: OutputT ? = null, modify: ( StateT ) - StateT ): WorkflowAction StateT , OutputT Convenience function to implement WorkflowAction without returning the output. noAction fun StateT, OutputT : Any noAction(): WorkflowAction StateT , OutputT Returns a WorkflowAction that does nothing: no output will be emitted, and render will be called again with the same state as last time.","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/emit-output/","text":"workflow-core / com.squareup.workflow / WorkflowAction / emitOutput emitOutput fun StateT, OutputT : Any emitOutput(output: OutputT ): WorkflowAction StateT , OutputT fun StateT, OutputT : Any emitOutput(name: String , output: OutputT ): WorkflowAction StateT , OutputT Convenience function to implement WorkflowAction without changing the state.","title":"Emit output"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/emit-output/#emitoutput","text":"fun StateT, OutputT : Any emitOutput(output: OutputT ): WorkflowAction StateT , OutputT fun StateT, OutputT : Any emitOutput(name: String , output: OutputT ): WorkflowAction StateT , OutputT Convenience function to implement WorkflowAction without changing the state.","title":"emitOutput"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/enter-state/","text":"workflow-core / com.squareup.workflow / WorkflowAction / enterState enterState fun StateT, OutputT : Any enterState(newState: StateT , emittingOutput: OutputT ? = null): WorkflowAction StateT , OutputT fun StateT, OutputT : Any enterState(name: String , newState: StateT , emittingOutput: OutputT ? = null): WorkflowAction StateT , OutputT Convenience function that returns a WorkflowAction that will just set the state to newState (without considering the current state) and optionally emit an output.","title":"Enter state"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/enter-state/#enterstate","text":"fun StateT, OutputT : Any enterState(newState: StateT , emittingOutput: OutputT ? = null): WorkflowAction StateT , OutputT fun StateT, OutputT : Any enterState(name: String , newState: StateT , emittingOutput: OutputT ? = null): WorkflowAction StateT , OutputT Convenience function that returns a WorkflowAction that will just set the state to newState (without considering the current state) and optionally emit an output.","title":"enterState"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/invoke/","text":"workflow-core / com.squareup.workflow / WorkflowAction / invoke invoke abstract operator fun invoke(state: StateT ): Pair StateT , OutputT ? ``inline operator fun StateT, OutputT : Any invoke(crossinline name: () - String , crossinline update: ( StateT ) - Pair StateT , OutputT ? ): WorkflowAction StateT , OutputT Creates a WorkflowAction from the update lambda. The returned object will include the string returned from name in its toString . Parameters name - Function that returns a string describing the update for debugging. update - Function that defines the workflow update.","title":"Invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/invoke/#invoke","text":"abstract operator fun invoke(state: StateT ): Pair StateT , OutputT ? ``inline operator fun StateT, OutputT : Any invoke(crossinline name: () - String , crossinline update: ( StateT ) - Pair StateT , OutputT ? ): WorkflowAction StateT , OutputT Creates a WorkflowAction from the update lambda. The returned object will include the string returned from name in its toString .","title":"invoke"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/invoke/#parameters","text":"name - Function that returns a string describing the update for debugging. update - Function that defines the workflow update.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/modify-state/","text":"workflow-core / com.squareup.workflow / WorkflowAction / modifyState modifyState fun StateT, OutputT : Any modifyState(name: () - String , emittingOutput: OutputT ? = null, modify: ( StateT ) - StateT ): WorkflowAction StateT , OutputT Convenience function to implement WorkflowAction without returning the output.","title":"Modify state"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/modify-state/#modifystate","text":"fun StateT, OutputT : Any modifyState(name: () - String , emittingOutput: OutputT ? = null, modify: ( StateT ) - StateT ): WorkflowAction StateT , OutputT Convenience function to implement WorkflowAction without returning the output.","title":"modifyState"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/no-action/","text":"workflow-core / com.squareup.workflow / WorkflowAction / noAction noAction fun StateT, OutputT : Any noAction(): WorkflowAction StateT , OutputT Returns a WorkflowAction that does nothing: no output will be emitted, and render will be called again with the same state as last time. Use this to, for example, ignore the output of a child workflow or worker.","title":"No action"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/-workflow-action/no-action/#noaction","text":"fun StateT, OutputT : Any noAction(): WorkflowAction StateT , OutputT Returns a WorkflowAction that does nothing: no output will be emitted, and render will be called again with the same state as last time. Use this to, for example, ignore the output of a child workflow or worker.","title":"noAction"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.-deferred/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.Deferred Extensions for kotlinx.coroutines.Deferred Name Summary asWorker fun T Deferred T .asWorker(key: String = \"\"): Worker T Returns a Worker that will await this Deferred and then emit it.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.-deferred/#extensions-for-kotlinxcoroutinesdeferred","text":"Name Summary asWorker fun T Deferred T .asWorker(key: String = \"\"): Worker T Returns a Worker that will await this Deferred and then emit it.","title":"Extensions for kotlinx.coroutines.Deferred"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.-deferred/as-worker/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.Deferred / asWorker asWorker inline fun reified T Deferred T .asWorker(key: String = \"\"): Worker T Returns a Worker that will await this Deferred and then emit it. Note that Deferred is a hot future type \u2013 calling a function that returns a Deferred multiple times will probably perform the action multiple times. You may want to use something like this instead: 1 Worker.from { doThing().await() }","title":"As worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.-deferred/as-worker/#asworker","text":"inline fun reified T Deferred T .asWorker(key: String = \"\"): Worker T Returns a Worker that will await this Deferred and then emit it. Note that Deferred is a hot future type \u2013 calling a function that returns a Deferred multiple times will probably perform the action multiple times. You may want to use something like this instead: 1 Worker.from { doThing().await() }","title":"asWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-broadcast-channel/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.channels.BroadcastChannel Extensions for kotlinx.coroutines.channels.BroadcastChannel Name Summary asWorker fun T BroadcastChannel T .asWorker(key: String = \"\"): Worker T Shorthand for .asFlow().asWorker(key) .","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-broadcast-channel/#extensions-for-kotlinxcoroutineschannelsbroadcastchannel","text":"Name Summary asWorker fun T BroadcastChannel T .asWorker(key: String = \"\"): Worker T Shorthand for .asFlow().asWorker(key) .","title":"Extensions for kotlinx.coroutines.channels.BroadcastChannel"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-broadcast-channel/as-worker/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.channels.BroadcastChannel / asWorker asWorker @ExperimentalCoroutinesApi inline fun reified T BroadcastChannel T .asWorker(key: String = \"\"): Worker T Shorthand for .asFlow().asWorker(key) .","title":"As worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-broadcast-channel/as-worker/#asworker","text":"@ExperimentalCoroutinesApi inline fun reified T BroadcastChannel T .asWorker(key: String = \"\"): Worker T Shorthand for .asFlow().asWorker(key) .","title":"asWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.channels.ReceiveChannel Extensions for kotlinx.coroutines.channels.ReceiveChannel Name Summary asWorker fun T ReceiveChannel T .asWorker(key: String = \"\", closeOnCancel: Boolean = true): Worker T Returns a Worker that will, when performed, emit whatever this channel receives.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/#extensions-for-kotlinxcoroutineschannelsreceivechannel","text":"Name Summary asWorker fun T ReceiveChannel T .asWorker(key: String = \"\", closeOnCancel: Boolean = true): Worker T Returns a Worker that will, when performed, emit whatever this channel receives.","title":"Extensions for kotlinx.coroutines.channels.ReceiveChannel"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/as-worker/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.channels.ReceiveChannel / asWorker asWorker inline fun reified T ReceiveChannel T .asWorker(key: String = \"\", closeOnCancel: Boolean = true): Worker T Returns a Worker that will, when performed, emit whatever this channel receives. Parameters closeOnCancel - If true: The channel will be cancelled when the Worker is cancelled \u2013 this is intended for use with cold channels that are were started by and are to be managed by this worker or its parent Workflow . If false: The channel will not be cancelled when the Worker is cancelled \u2013 this is intended for use with hot channels that are managed externally. True by default.","title":"As worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/as-worker/#asworker","text":"inline fun reified T ReceiveChannel T .asWorker(key: String = \"\", closeOnCancel: Boolean = true): Worker T Returns a Worker that will, when performed, emit whatever this channel receives.","title":"asWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.channels.-receive-channel/as-worker/#parameters","text":"closeOnCancel - If true: The channel will be cancelled when the Worker is cancelled \u2013 this is intended for use with cold channels that are were started by and are to be managed by this worker or its parent Workflow . If false: The channel will not be cancelled when the Worker is cancelled \u2013 this is intended for use with hot channels that are managed externally. True by default.","title":"Parameters"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.flow.-flow/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.flow.Flow Extensions for kotlinx.coroutines.flow.Flow Name Summary asWorker fun T Flow T .asWorker(key: String = \"\"): Worker T Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.flow.-flow/#extensions-for-kotlinxcoroutinesflowflow","text":"Name Summary asWorker fun T Flow T .asWorker(key: String = \"\"): Worker T Returns a Worker that will, when performed, emit whatever this Flow receives.","title":"Extensions for kotlinx.coroutines.flow.Flow"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.flow.-flow/as-worker/","text":"workflow-core / com.squareup.workflow / kotlinx.coroutines.flow.Flow / asWorker asWorker inline fun reified T Flow T .asWorker(key: String = \"\"): Worker T Returns a Worker that will, when performed, emit whatever this Flow receives. Warning: The Flow API is very immature and so any breaking changes there (including in transiently-included versions) will be compounded when layering Workflow APIs on top of it. This SHOULD NOT be used in production code.","title":"As worker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/kotlinx.coroutines.flow.-flow/as-worker/#asworker","text":"inline fun reified T Flow T .asWorker(key: String = \"\"): Worker T Returns a Worker that will, when performed, emit whatever this Flow receives. Warning: The Flow API is very immature and so any breaking changes there (including in transiently-included versions) will be compounded when layering Workflow APIs on top of it. This SHOULD NOT be used in production code.","title":"asWorker"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink Extensions for okio.BufferedSink Name Summary writeBooleanAsInt fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink writeByteStringWithLength fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink writeEnumByOrdinal fun T : Enum T BufferedSink.writeEnumByOrdinal(enumVal: T ): BufferedSink writeFloat fun BufferedSink.writeFloat(float: Float ): BufferedSink writeList fun T BufferedSink.writeList(values: List T , writer: BufferedSink.( T ) - Unit ): BufferedSink writeNullable fun T : Any BufferedSink.writeNullable(obj: T ?, writer: BufferedSink.( T ) - Unit ): BufferedSink writeOptionalEnumByOrdinal fun T : Enum T BufferedSink.writeOptionalEnumByOrdinal(enumVal: T ?): BufferedSink writeOptionalUtf8WithLength fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink writeUtf8WithLength fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/#extensions-for-okiobufferedsink","text":"Name Summary writeBooleanAsInt fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink writeByteStringWithLength fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink writeEnumByOrdinal fun T : Enum T BufferedSink.writeEnumByOrdinal(enumVal: T ): BufferedSink writeFloat fun BufferedSink.writeFloat(float: Float ): BufferedSink writeList fun T BufferedSink.writeList(values: List T , writer: BufferedSink.( T ) - Unit ): BufferedSink writeNullable fun T : Any BufferedSink.writeNullable(obj: T ?, writer: BufferedSink.( T ) - Unit ): BufferedSink writeOptionalEnumByOrdinal fun T : Enum T BufferedSink.writeOptionalEnumByOrdinal(enumVal: T ?): BufferedSink writeOptionalUtf8WithLength fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink writeUtf8WithLength fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"Extensions for okio.BufferedSink"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-boolean-as-int/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeBooleanAsInt writeBooleanAsInt fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink","title":"Write boolean as int"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-boolean-as-int/#writebooleanasint","text":"fun BufferedSink.writeBooleanAsInt(bool: Boolean ): BufferedSink","title":"writeBooleanAsInt"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-byte-string-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeByteStringWithLength writeByteStringWithLength fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink","title":"Write byte string with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-byte-string-with-length/#writebytestringwithlength","text":"fun BufferedSink.writeByteStringWithLength(bytes: ByteString): BufferedSink","title":"writeByteStringWithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-enum-by-ordinal/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeEnumByOrdinal writeEnumByOrdinal fun T : Enum T BufferedSink.writeEnumByOrdinal(enumVal: T ): BufferedSink","title":"Write enum by ordinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-enum-by-ordinal/#writeenumbyordinal","text":"fun T : Enum T BufferedSink.writeEnumByOrdinal(enumVal: T ): BufferedSink","title":"writeEnumByOrdinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-float/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeFloat writeFloat fun BufferedSink.writeFloat(float: Float ): BufferedSink","title":"Write float"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-float/#writefloat","text":"fun BufferedSink.writeFloat(float: Float ): BufferedSink","title":"writeFloat"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-list/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeList writeList fun T BufferedSink.writeList(values: List T , writer: BufferedSink.( T ) - Unit ): BufferedSink","title":"Write list"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-list/#writelist","text":"fun T BufferedSink.writeList(values: List T , writer: BufferedSink.( T ) - Unit ): BufferedSink","title":"writeList"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-nullable/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeNullable writeNullable fun T : Any BufferedSink.writeNullable(obj: T ?, writer: BufferedSink.( T ) - Unit ): BufferedSink","title":"Write nullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-nullable/#writenullable","text":"fun T : Any BufferedSink.writeNullable(obj: T ?, writer: BufferedSink.( T ) - Unit ): BufferedSink","title":"writeNullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-optional-enum-by-ordinal/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeOptionalEnumByOrdinal writeOptionalEnumByOrdinal fun T : Enum T BufferedSink.writeOptionalEnumByOrdinal(enumVal: T ?): BufferedSink","title":"Write optional enum by ordinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-optional-enum-by-ordinal/#writeoptionalenumbyordinal","text":"fun T : Enum T BufferedSink.writeOptionalEnumByOrdinal(enumVal: T ?): BufferedSink","title":"writeOptionalEnumByOrdinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-optional-utf8-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeOptionalUtf8WithLength writeOptionalUtf8WithLength fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink","title":"Write optional utf8 with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-optional-utf8-with-length/#writeoptionalutf8withlength","text":"fun BufferedSink.writeOptionalUtf8WithLength(str: String ?): BufferedSink","title":"writeOptionalUtf8WithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-utf8-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSink / writeUtf8WithLength writeUtf8WithLength fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"Write utf8 with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-sink/write-utf8-with-length/#writeutf8withlength","text":"fun BufferedSink.writeUtf8WithLength(str: String ): BufferedSink","title":"writeUtf8WithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource Extensions for okio.BufferedSource Name Summary readBooleanFromInt fun BufferedSource.readBooleanFromInt(): Boolean readByteStringWithLength fun BufferedSource.readByteStringWithLength(): ByteString readEnumByOrdinal fun T : Enum T BufferedSource.readEnumByOrdinal(): T readFloat fun BufferedSource.readFloat(): Float readList fun T BufferedSource.readList(reader: BufferedSource.() - T ): List T readNullable fun T : Any BufferedSource.readNullable(reader: BufferedSource.() - T ): T ? readOptionalEnumByOrdinal fun T : Enum T BufferedSource.readOptionalEnumByOrdinal(): T ? readOptionalUtf8WithLength fun BufferedSource.readOptionalUtf8WithLength(): String ? readUtf8WithLength fun BufferedSource.readUtf8WithLength(): String","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/#extensions-for-okiobufferedsource","text":"Name Summary readBooleanFromInt fun BufferedSource.readBooleanFromInt(): Boolean readByteStringWithLength fun BufferedSource.readByteStringWithLength(): ByteString readEnumByOrdinal fun T : Enum T BufferedSource.readEnumByOrdinal(): T readFloat fun BufferedSource.readFloat(): Float readList fun T BufferedSource.readList(reader: BufferedSource.() - T ): List T readNullable fun T : Any BufferedSource.readNullable(reader: BufferedSource.() - T ): T ? readOptionalEnumByOrdinal fun T : Enum T BufferedSource.readOptionalEnumByOrdinal(): T ? readOptionalUtf8WithLength fun BufferedSource.readOptionalUtf8WithLength(): String ? readUtf8WithLength fun BufferedSource.readUtf8WithLength(): String","title":"Extensions for okio.BufferedSource"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-boolean-from-int/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readBooleanFromInt readBooleanFromInt fun BufferedSource.readBooleanFromInt(): Boolean","title":"Read boolean from int"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-boolean-from-int/#readbooleanfromint","text":"fun BufferedSource.readBooleanFromInt(): Boolean","title":"readBooleanFromInt"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-byte-string-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readByteStringWithLength readByteStringWithLength fun BufferedSource.readByteStringWithLength(): ByteString","title":"Read byte string with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-byte-string-with-length/#readbytestringwithlength","text":"fun BufferedSource.readByteStringWithLength(): ByteString","title":"readByteStringWithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-enum-by-ordinal/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readEnumByOrdinal readEnumByOrdinal inline fun reified T : Enum T BufferedSource.readEnumByOrdinal(): T","title":"Read enum by ordinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-enum-by-ordinal/#readenumbyordinal","text":"inline fun reified T : Enum T BufferedSource.readEnumByOrdinal(): T","title":"readEnumByOrdinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-float/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readFloat readFloat fun BufferedSource.readFloat(): Float","title":"Read float"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-float/#readfloat","text":"fun BufferedSource.readFloat(): Float","title":"readFloat"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-list/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readList readList fun T BufferedSource.readList(reader: BufferedSource.() - T ): List T","title":"Read list"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-list/#readlist","text":"fun T BufferedSource.readList(reader: BufferedSource.() - T ): List T","title":"readList"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-nullable/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readNullable readNullable fun T : Any BufferedSource.readNullable(reader: BufferedSource.() - T ): T ?","title":"Read nullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-nullable/#readnullable","text":"fun T : Any BufferedSource.readNullable(reader: BufferedSource.() - T ): T ?","title":"readNullable"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-optional-enum-by-ordinal/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readOptionalEnumByOrdinal readOptionalEnumByOrdinal inline fun reified T : Enum T BufferedSource.readOptionalEnumByOrdinal(): T ?","title":"Read optional enum by ordinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-optional-enum-by-ordinal/#readoptionalenumbyordinal","text":"inline fun reified T : Enum T BufferedSource.readOptionalEnumByOrdinal(): T ?","title":"readOptionalEnumByOrdinal"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-optional-utf8-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readOptionalUtf8WithLength readOptionalUtf8WithLength fun BufferedSource.readOptionalUtf8WithLength(): String ?","title":"Read optional utf8 with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-optional-utf8-with-length/#readoptionalutf8withlength","text":"fun BufferedSource.readOptionalUtf8WithLength(): String ?","title":"readOptionalUtf8WithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-utf8-with-length/","text":"workflow-core / com.squareup.workflow / okio.BufferedSource / readUtf8WithLength readUtf8WithLength fun BufferedSource.readUtf8WithLength(): String","title":"Read utf8 with length"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-buffered-source/read-utf8-with-length/#readutf8withlength","text":"fun BufferedSource.readUtf8WithLength(): String","title":"readUtf8WithLength"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-byte-string/","text":"workflow-core / com.squareup.workflow / okio.ByteString Extensions for okio.ByteString Name Summary parse fun T ByteString.parse(block: (BufferedSource) - T ): T Runs block with a BufferedSource that will read from this ByteString .","title":"Home"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-byte-string/#extensions-for-okiobytestring","text":"Name Summary parse fun T ByteString.parse(block: (BufferedSource) - T ): T Runs block with a BufferedSource that will read from this ByteString .","title":"Extensions for okio.ByteString"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-byte-string/parse/","text":"workflow-core / com.squareup.workflow / okio.ByteString / parse parse inline fun T ByteString.parse(block: (BufferedSource) - T ): T Runs block with a BufferedSource that will read from this ByteString . Lets you do stuff like: 1 2 3 4 5 6 myBlob.parse { MyValueObject( name = it.readUtf8WithLength(), age = it.readInt() ) }","title":"Parse"},{"location":"kotlin/api/workflow-core/com.squareup.workflow/okio.-byte-string/parse/#parse","text":"inline fun T ByteString.parse(block: (BufferedSource) - T ): T Runs block with a BufferedSource that will read from this ByteString . Lets you do stuff like: 1 2 3 4 5 6 myBlob.parse { MyValueObject( name = it.readUtf8WithLength(), age = it.readInt() ) }","title":"parse"},{"location":"kotlin/api/workflow-runtime/","text":"workflow-runtime Packages Name Summary com.squareup.workflow Index All Types","title":"Home"},{"location":"kotlin/api/workflow-runtime/#packages","text":"Name Summary com.squareup.workflow","title":"Packages"},{"location":"kotlin/api/workflow-runtime/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-runtime/alltypes/","text":"All Types Name Summary com.squareup.workflow.RenderingAndSnapshot Tuple of rendering and snapshot used by launchWorkflowIn .","title":"Home"},{"location":"kotlin/api/workflow-runtime/alltypes/#all-types","text":"Name Summary com.squareup.workflow.RenderingAndSnapshot Tuple of rendering and snapshot used by launchWorkflowIn .","title":"All Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/","text":"workflow-runtime / com.squareup.workflow Package com.squareup.workflow Types Name Summary RenderingAndSnapshot data class RenderingAndSnapshot out RenderingT Tuple of rendering and snapshot used by launchWorkflowIn . Functions Name Summary launchWorkflowForTestFromStateIn fun InputT, StateT, OutputT : Any , RenderingT, RunnerT launchWorkflowForTestFromStateIn(scope: CoroutineScope, workflow: StatefulWorkflow InputT , StateT , OutputT , RenderingT , inputs: Flow InputT , initialState: StateT , beforeStart: CoroutineScope.(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialState and the first value emitted by inputs . Subsequent values emitted from inputs will be used to re-render the workflow. launchWorkflowIn fun InputT, OutputT : Any , RenderingT, RunnerT launchWorkflowIn(scope: CoroutineScope, workflow: Workflow InputT , OutputT , RenderingT , inputs: Flow InputT , initialSnapshot: Snapshot? = null, beforeStart: CoroutineScope.(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialSnapshot and the first value emitted by inputs . Subsequent values emitted from inputs will be used to re-render the workflow.","title":"workflow-runtime"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/#package-comsquareupworkflow","text":"","title":"Package com.squareup.workflow"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/#types","text":"Name Summary RenderingAndSnapshot data class RenderingAndSnapshot out RenderingT Tuple of rendering and snapshot used by launchWorkflowIn .","title":"Types"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/#functions","text":"Name Summary launchWorkflowForTestFromStateIn fun InputT, StateT, OutputT : Any , RenderingT, RunnerT launchWorkflowForTestFromStateIn(scope: CoroutineScope, workflow: StatefulWorkflow InputT , StateT , OutputT , RenderingT , inputs: Flow InputT , initialState: StateT , beforeStart: CoroutineScope.(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialState and the first value emitted by inputs . Subsequent values emitted from inputs will be used to re-render the workflow. launchWorkflowIn fun InputT, OutputT : Any , RenderingT, RunnerT launchWorkflowIn(scope: CoroutineScope, workflow: Workflow InputT , OutputT , RenderingT , inputs: Flow InputT , initialSnapshot: Snapshot? = null, beforeStart: CoroutineScope.(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialSnapshot and the first value emitted by inputs . Subsequent values emitted from inputs will be used to re-render the workflow.","title":"Functions"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-for-test-from-state-in/","text":"workflow-runtime / com.squareup.workflow / launchWorkflowForTestFromStateIn launchWorkflowForTestFromStateIn @TestOnly fun InputT, StateT, OutputT : Any , RenderingT, RunnerT launchWorkflowForTestFromStateIn(scope: CoroutineScope, workflow: StatefulWorkflow InputT , StateT , OutputT , RenderingT , inputs: Flow InputT , initialState: StateT , beforeStart: CoroutineScope.(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialState and the first value emitted by inputs . Subsequent values emitted from inputs will be used to re-render the workflow. See launchWorkflowIn for documentation about most of the parameters and behavior. Parameters initialState - The StateT in which to start the root workflow.","title":"Launch workflow for test from state in"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-for-test-from-state-in/#launchworkflowfortestfromstatein","text":"@TestOnly fun InputT, StateT, OutputT : Any , RenderingT, RunnerT launchWorkflowForTestFromStateIn(scope: CoroutineScope, workflow: StatefulWorkflow InputT , StateT , OutputT , RenderingT , inputs: Flow InputT , initialState: StateT , beforeStart: CoroutineScope.(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialState and the first value emitted by inputs . Subsequent values emitted from inputs will be used to re-render the workflow. See launchWorkflowIn for documentation about most of the parameters and behavior.","title":"launchWorkflowForTestFromStateIn"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-for-test-from-state-in/#parameters","text":"initialState - The StateT in which to start the root workflow.","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/","text":"workflow-runtime / com.squareup.workflow / launchWorkflowIn launchWorkflowIn fun InputT, OutputT : Any , RenderingT, RunnerT launchWorkflowIn(scope: CoroutineScope, workflow: Workflow InputT , OutputT , RenderingT , inputs: Flow InputT , initialSnapshot: Snapshot? = null, beforeStart: CoroutineScope.(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialSnapshot and the first value emitted by inputs . Subsequent values emitted from inputs will be used to re-render the workflow. This is the primary low-level entry point into the workflow runtime. If you are writing an app, you should probably be using a higher-level entry point that will also let you define UI bindings for your renderings. Initialization Before starting the actual workflow runtime, this function will invoke beforeStart and pass it the Flow s of renderings, snapshots, and outputs, as well as a CoroutineScope that the runtime will be hosted in. The workflow runtime will not be started until after this function returns. This is to allow the output flow to start being collected before any outputs can actually be emitted. Collectors that start after beforeStart returns may not receive outputs that are emitted very quickly. The value returned by beforeStart will be returned from this function after the runtime is launched, handy for instantiating platform-specific runner objects. The CoroutineScope passed to beforeStart can be used to do more than just cancel the runtime \u2013 it can also be used to start coroutines that will run until the workflow is cancelled, typically to collect the rendering and output Flow s. Scoping The workflow runtime makes use of structured concurrency . The runtime is started in a specific CoroutineScope , which defines the context for the entire workflow tree \u2013 most importantly, the Job that governs the runtime s lifetime and exception reporting path, and the CoroutineDispatcher that decides on what threads to run workflow code. This function creates a child Job in scope and uses it as the parent for the workflow runtime, and as the job passed to the beforeStart function. This means that if beforeStart calls CoroutineScope.cancel , it will cancel the workflow runtime, but will not cancel the scope passed into this function. Parameters scope - The CoroutineScope in which to launch the workflow runtime. Any exceptions thrown in any workflows will be reported to this scope, and cancelling this scope will cancel the workflow runtime. The scope passed to beforeStart will be a child of this scope. workflow - The root workflow to start. inputs - Stream of input values for the root workflow. The first value emitted is passed to the root workflow s StatefulWorkflow.initialState , and subsequent emissions are passed as input updates to the root workflow. If this flow completes before emitting anything, the runtime will fail (report an exception up through scope ). If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. initialSnapshot - If not null, used to restore the workflow. beforeStart - Called exactly once with the flows for renderings/snapshots and outputs. It also gets a sub-scope of scope with a newly created child Job which defines the lifetime of the launched workflow tree. Cancelling that job ends the new workflow session. Note that if scope is already cancelled when this function is called, the receiver scope will also be cancelled, and the flows will complete immediately. Return The value returned by beforeStart .","title":"Launch workflow in"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/#launchworkflowin","text":"fun InputT, OutputT : Any , RenderingT, RunnerT launchWorkflowIn(scope: CoroutineScope, workflow: Workflow InputT , OutputT , RenderingT , inputs: Flow InputT , initialSnapshot: Snapshot? = null, beforeStart: CoroutineScope.(renderingsAndSnapshots: Flow RenderingAndSnapshot RenderingT , outputs: Flow OutputT ) - RunnerT ): RunnerT Launches the workflow in a new coroutine in scope . The workflow tree is seeded with initialSnapshot and the first value emitted by inputs . Subsequent values emitted from inputs will be used to re-render the workflow. This is the primary low-level entry point into the workflow runtime. If you are writing an app, you should probably be using a higher-level entry point that will also let you define UI bindings for your renderings.","title":"launchWorkflowIn"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/#initialization","text":"Before starting the actual workflow runtime, this function will invoke beforeStart and pass it the Flow s of renderings, snapshots, and outputs, as well as a CoroutineScope that the runtime will be hosted in. The workflow runtime will not be started until after this function returns. This is to allow the output flow to start being collected before any outputs can actually be emitted. Collectors that start after beforeStart returns may not receive outputs that are emitted very quickly. The value returned by beforeStart will be returned from this function after the runtime is launched, handy for instantiating platform-specific runner objects. The CoroutineScope passed to beforeStart can be used to do more than just cancel the runtime \u2013 it can also be used to start coroutines that will run until the workflow is cancelled, typically to collect the rendering and output Flow s.","title":"Initialization"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/#scoping","text":"The workflow runtime makes use of structured concurrency . The runtime is started in a specific CoroutineScope , which defines the context for the entire workflow tree \u2013 most importantly, the Job that governs the runtime s lifetime and exception reporting path, and the CoroutineDispatcher that decides on what threads to run workflow code. This function creates a child Job in scope and uses it as the parent for the workflow runtime, and as the job passed to the beforeStart function. This means that if beforeStart calls CoroutineScope.cancel , it will cancel the workflow runtime, but will not cancel the scope passed into this function.","title":"Scoping"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/launch-workflow-in/#parameters","text":"scope - The CoroutineScope in which to launch the workflow runtime. Any exceptions thrown in any workflows will be reported to this scope, and cancelling this scope will cancel the workflow runtime. The scope passed to beforeStart will be a child of this scope. workflow - The root workflow to start. inputs - Stream of input values for the root workflow. The first value emitted is passed to the root workflow s StatefulWorkflow.initialState , and subsequent emissions are passed as input updates to the root workflow. If this flow completes before emitting anything, the runtime will fail (report an exception up through scope ). If this flow completes after emitting at least one value, the runtime will not fail or stop, it will continue running with the last-emitted input. initialSnapshot - If not null, used to restore the workflow. beforeStart - Called exactly once with the flows for renderings/snapshots and outputs. It also gets a sub-scope of scope with a newly created child Job which defines the lifetime of the launched workflow tree. Cancelling that job ends the new workflow session. Note that if scope is already cancelled when this function is called, the receiver scope will also be cancelled, and the flows will complete immediately. Return The value returned by beforeStart .","title":"Parameters"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/","text":"workflow-runtime / com.squareup.workflow / RenderingAndSnapshot RenderingAndSnapshot data class RenderingAndSnapshot out RenderingT Tuple of rendering and snapshot used by launchWorkflowIn . Constructors Name Summary init RenderingAndSnapshot(rendering: RenderingT , snapshot: Snapshot) Tuple of rendering and snapshot used by launchWorkflowIn . Properties Name Summary rendering val rendering: RenderingT snapshot val snapshot: Snapshot","title":"Home"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/#renderingandsnapshot","text":"data class RenderingAndSnapshot out RenderingT Tuple of rendering and snapshot used by launchWorkflowIn .","title":"RenderingAndSnapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/#constructors","text":"Name Summary init RenderingAndSnapshot(rendering: RenderingT , snapshot: Snapshot) Tuple of rendering and snapshot used by launchWorkflowIn .","title":"Constructors"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/#properties","text":"Name Summary rendering val rendering: RenderingT snapshot val snapshot: Snapshot","title":"Properties"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/-init-/","text":"workflow-runtime / com.squareup.workflow / RenderingAndSnapshot / init init RenderingAndSnapshot(rendering: RenderingT , snapshot: Snapshot) Tuple of rendering and snapshot used by launchWorkflowIn .","title":" init "},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/-init-/#init","text":"RenderingAndSnapshot(rendering: RenderingT , snapshot: Snapshot) Tuple of rendering and snapshot used by launchWorkflowIn .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/rendering/","text":"workflow-runtime / com.squareup.workflow / RenderingAndSnapshot / rendering rendering val rendering: RenderingT","title":"Rendering"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/rendering/#rendering","text":"val rendering: RenderingT","title":"rendering"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/snapshot/","text":"workflow-runtime / com.squareup.workflow / RenderingAndSnapshot / snapshot snapshot val snapshot: Snapshot","title":"Snapshot"},{"location":"kotlin/api/workflow-runtime/com.squareup.workflow/-rendering-and-snapshot/snapshot/#snapshot","text":"val snapshot: Snapshot","title":"snapshot"},{"location":"kotlin/api/workflow-rx2/","text":"workflow-rx2 Packages Name Summary com.squareup.workflow.rx2 Index All Types","title":"Home"},{"location":"kotlin/api/workflow-rx2/#packages","text":"Name Summary com.squareup.workflow.rx2","title":"Packages"},{"location":"kotlin/api/workflow-rx2/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-rx2/alltypes/","text":"All Types Name Summary io.reactivex.Completable (extensions in package com.squareup.workflow.rx2) io.reactivex.Flowable (extensions in package com.squareup.workflow.rx2) io.reactivex.Maybe (extensions in package com.squareup.workflow.rx2) io.reactivex.Observable (extensions in package com.squareup.workflow.rx2) io.reactivex.Single (extensions in package com.squareup.workflow.rx2)","title":"Home"},{"location":"kotlin/api/workflow-rx2/alltypes/#all-types","text":"Name Summary io.reactivex.Completable (extensions in package com.squareup.workflow.rx2) io.reactivex.Flowable (extensions in package com.squareup.workflow.rx2) io.reactivex.Maybe (extensions in package com.squareup.workflow.rx2) io.reactivex.Observable (extensions in package com.squareup.workflow.rx2) io.reactivex.Single (extensions in package com.squareup.workflow.rx2)","title":"All Types"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/","text":"workflow-rx2 / com.squareup.workflow.rx2 Package com.squareup.workflow.rx2 Extensions for External Classes Name Summary io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single","title":"workflow-rx2"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/#package-comsquareupworkflowrx2","text":"","title":"Package com.squareup.workflow.rx2"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/#extensions-for-external-classes","text":"Name Summary io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-completable/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Completable Extensions for io.reactivex.Completable Name Summary asWorker fun Completable.asWorker(key: String ): Worker Nothing Creates a Worker from this Completable .","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-completable/#extensions-for-ioreactivexcompletable","text":"Name Summary asWorker fun Completable.asWorker(key: String ): Worker Nothing Creates a Worker from this Completable .","title":"Extensions for io.reactivex.Completable"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-completable/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Completable / asWorker asWorker fun Completable.asWorker(key: String ): Worker Nothing Creates a Worker from this Completable . The Completable will be subscribed to when the Worker is started, and disposed when it is cancelled. The key is required for this operator because there is no type information available to distinguish workers.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-completable/as-worker/#asworker","text":"fun Completable.asWorker(key: String ): Worker Nothing Creates a Worker from this Completable . The Completable will be subscribed to when the Worker is started, and disposed when it is cancelled. The key is required for this operator because there is no type information available to distinguish workers.","title":"asWorker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-flowable/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Flowable Extensions for io.reactivex.Flowable Name Summary asWorker fun T : Any Flowable out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Flowable .","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-flowable/#extensions-for-ioreactivexflowable","text":"Name Summary asWorker fun T : Any Flowable out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Flowable .","title":"Extensions for io.reactivex.Flowable"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-flowable/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Flowable / asWorker asWorker inline fun reified T : Any Flowable out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Flowable . The Flowable will be subscribed to when the Worker is started, and cancelled when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-flowable/as-worker/#asworker","text":"inline fun reified T : Any Flowable out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Flowable . The Flowable will be subscribed to when the Worker is started, and cancelled when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-maybe/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Maybe Extensions for io.reactivex.Maybe Name Summary asWorker fun T : Any Maybe out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Maybe .","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-maybe/#extensions-for-ioreactivexmaybe","text":"Name Summary asWorker fun T : Any Maybe out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Maybe .","title":"Extensions for io.reactivex.Maybe"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-maybe/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Maybe / asWorker asWorker inline fun reified T : Any Maybe out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Maybe . The Maybe will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-maybe/as-worker/#asworker","text":"inline fun reified T : Any Maybe out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Maybe . The Maybe will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-observable/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Observable Extensions for io.reactivex.Observable Name Summary asWorker fun T : Any Observable out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Observable .","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-observable/#extensions-for-ioreactivexobservable","text":"Name Summary asWorker fun T : Any Observable out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Observable .","title":"Extensions for io.reactivex.Observable"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-observable/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Observable / asWorker asWorker inline fun reified T : Any Observable out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Observable . The Observable will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-observable/as-worker/#asworker","text":"inline fun reified T : Any Observable out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Observable . The Observable will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-single/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Single Extensions for io.reactivex.Single Name Summary asWorker fun T : Any Single out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Single .","title":"Home"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-single/#extensions-for-ioreactivexsingle","text":"Name Summary asWorker fun T : Any Single out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Single .","title":"Extensions for io.reactivex.Single"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-single/as-worker/","text":"workflow-rx2 / com.squareup.workflow.rx2 / io.reactivex.Single / asWorker asWorker inline fun reified T : Any Single out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Single . The Single will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"As worker"},{"location":"kotlin/api/workflow-rx2/com.squareup.workflow.rx2/io.reactivex.-single/as-worker/#asworker","text":"inline fun reified T : Any Single out T ? .asWorker(key: String = \"\"): Worker T Creates a Worker from this Single . The Single will be subscribed to when the Worker is started, and disposed when it is cancelled. RxJava doesn t allow nulls, but it can t express that in its types. The receiver type parameter is nullable so that the resulting Worker is non-nullable instead of having platform nullability.","title":"asWorker"},{"location":"kotlin/api/workflow-testing/","text":"workflow-testing Packages Name Summary com.squareup.workflow.testing Index All Types","title":"Home"},{"location":"kotlin/api/workflow-testing/#packages","text":"Name Summary com.squareup.workflow.testing","title":"Packages"},{"location":"kotlin/api/workflow-testing/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-testing/alltypes/","text":"All Types Name Summary com.squareup.workflow.testing.MockChildWorkflow A mock implementation of Workflow for use in tests with testRender and TestRenderResult . com.squareup.workflow.testing.MockWorker A mock implementation of Worker for use in tests with testRender and TestRenderResult . com.squareup.workflow.StatefulWorkflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.StatelessWorkflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.TestRenderResult Represents the result of running a single render pass on a workflow. com.squareup.workflow.Worker (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.WorkerTester com.squareup.workflow.Workflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.WorkflowTester Runs a Workflow and provides access to its renderings , outputs , and snapshots .","title":"Home"},{"location":"kotlin/api/workflow-testing/alltypes/#all-types","text":"Name Summary com.squareup.workflow.testing.MockChildWorkflow A mock implementation of Workflow for use in tests with testRender and TestRenderResult . com.squareup.workflow.testing.MockWorker A mock implementation of Worker for use in tests with testRender and TestRenderResult . com.squareup.workflow.StatefulWorkflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.StatelessWorkflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.TestRenderResult Represents the result of running a single render pass on a workflow. com.squareup.workflow.Worker (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.WorkerTester com.squareup.workflow.Workflow (extensions in package com.squareup.workflow.testing) com.squareup.workflow.testing.WorkflowTester Runs a Workflow and provides access to its renderings , outputs , and snapshots .","title":"All Types"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/","text":"workflow-testing / com.squareup.workflow.testing Package com.squareup.workflow.testing Types Name Summary MockChildWorkflow class MockChildWorkflow I, R : Workflow I , Nothing , R A mock implementation of Workflow for use in tests with testRender and TestRenderResult . MockWorker class MockWorker T : Worker T A mock implementation of Worker for use in tests with testRender and TestRenderResult . TestRenderResult class TestRenderResult StateT, OutputT : Any , RenderingT Represents the result of running a single render pass on a workflow. WorkerTester interface WorkerTester T WorkflowTester class WorkflowTester InputT, OutputT : Any , RenderingT Runs a Workflow and provides access to its renderings , outputs , and snapshots . Extensions for External Classes Name Summary com.squareup.workflow.StatefulWorkflow com.squareup.workflow.StatelessWorkflow com.squareup.workflow.Worker com.squareup.workflow.Workflow","title":"workflow-testing"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/#package-comsquareupworkflowtesting","text":"","title":"Package com.squareup.workflow.testing"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/#types","text":"Name Summary MockChildWorkflow class MockChildWorkflow I, R : Workflow I , Nothing , R A mock implementation of Workflow for use in tests with testRender and TestRenderResult . MockWorker class MockWorker T : Worker T A mock implementation of Worker for use in tests with testRender and TestRenderResult . TestRenderResult class TestRenderResult StateT, OutputT : Any , RenderingT Represents the result of running a single render pass on a workflow. WorkerTester interface WorkerTester T WorkflowTester class WorkflowTester InputT, OutputT : Any , RenderingT Runs a Workflow and provides access to its renderings , outputs , and snapshots .","title":"Types"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/#extensions-for-external-classes","text":"Name Summary com.squareup.workflow.StatefulWorkflow com.squareup.workflow.StatelessWorkflow com.squareup.workflow.Worker com.squareup.workflow.Workflow","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/","text":"workflow-testing / com.squareup.workflow.testing / MockChildWorkflow MockChildWorkflow class MockChildWorkflow I, R : Workflow I , Nothing , R A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Note this workflow can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers. Parameters renderer - Function that is invoked in each render pass to calculate the rendering. See Also StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender Constructors Name Summary init MockChildWorkflow(rendering: R ) Creates a MockChildWorkflow that will always render the same value, rendering . MockChildWorkflow(renderer: ( I ) - R ) A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Properties Name Summary lastSeenInput val lastSeenInput: I Returns the last input value used to render this instance. Functions Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow I , *, Nothing , R Extension Functions Name Summary testFromStart fun T, InputT, OutputT : Any , RenderingT Workflow InputT , OutputT , RenderingT .testFromStart(input: InputT , snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#mockchildworkflow","text":"class MockChildWorkflow I, R : Workflow I , Nothing , R A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Note this workflow can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers.","title":"MockChildWorkflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#parameters","text":"renderer - Function that is invoked in each render pass to calculate the rendering. See Also StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#constructors","text":"Name Summary init MockChildWorkflow(rendering: R ) Creates a MockChildWorkflow that will always render the same value, rendering . MockChildWorkflow(renderer: ( I ) - R ) A mock implementation of Workflow for use in tests with testRender and TestRenderResult .","title":"Constructors"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#properties","text":"Name Summary lastSeenInput val lastSeenInput: I Returns the last input value used to render this instance.","title":"Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#functions","text":"Name Summary asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow I , *, Nothing , R","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/#extension-functions","text":"Name Summary testFromStart fun T, InputT, OutputT : Any , RenderingT Workflow InputT , OutputT , RenderingT .testFromStart(input: InputT , snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing.","title":"Extension Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/-init-/","text":"workflow-testing / com.squareup.workflow.testing / MockChildWorkflow / init init MockChildWorkflow(rendering: R ) Creates a MockChildWorkflow that will always render the same value, rendering . MockChildWorkflow(renderer: ( I ) - R ) A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Note this workflow can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers. Parameters renderer - Function that is invoked in each render pass to calculate the rendering. See Also StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":" init "},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/-init-/#init","text":"MockChildWorkflow(rendering: R ) Creates a MockChildWorkflow that will always render the same value, rendering . MockChildWorkflow(renderer: ( I ) - R ) A mock implementation of Workflow for use in tests with testRender and TestRenderResult . Note this workflow can not actually emit any output itself. Use TestRenderResult.handleOutput to evaluate output handlers.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/-init-/#parameters","text":"renderer - Function that is invoked in each render pass to calculate the rendering. See Also StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/as-stateful-workflow/","text":"workflow-testing / com.squareup.workflow.testing / MockChildWorkflow / asStatefulWorkflow asStatefulWorkflow fun asStatefulWorkflow(): StatefulWorkflow I , *, Nothing , R","title":"As stateful workflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/as-stateful-workflow/#asstatefulworkflow","text":"fun asStatefulWorkflow(): StatefulWorkflow I , *, Nothing , R","title":"asStatefulWorkflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/last-seen-input/","text":"workflow-testing / com.squareup.workflow.testing / MockChildWorkflow / lastSeenInput lastSeenInput val lastSeenInput: I Returns the last input value used to render this instance.","title":"Last seen input"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-child-workflow/last-seen-input/#lastseeninput","text":"val lastSeenInput: I Returns the last input value used to render this instance.","title":"lastSeenInput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker MockWorker class MockWorker T : Worker T A mock implementation of Worker for use in tests with testRender and TestRenderResult . Note this Worker can not actually emit any output itself. Use TestRenderResult.handleOutput or TestRenderResult.handleFinish to evaluate output handlers. See Also com.squareup.workflow.StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender Constructors Name Summary init MockWorker(name: String ) A mock implementation of Worker for use in tests with testRender and TestRenderResult . Properties Name Summary name val name: String Functions Name Summary doesSameWorkAs fun doesSameWorkAs(otherWorker: Worker * ): Boolean run fun run(): Flow T Extension Functions Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, context: CoroutineContext = EmptyCoroutineContext, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#mockworker","text":"class MockWorker T : Worker T A mock implementation of Worker for use in tests with testRender and TestRenderResult . Note this Worker can not actually emit any output itself. Use TestRenderResult.handleOutput or TestRenderResult.handleFinish to evaluate output handlers. See Also com.squareup.workflow.StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":"MockWorker"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#constructors","text":"Name Summary init MockWorker(name: String ) A mock implementation of Worker for use in tests with testRender and TestRenderResult .","title":"Constructors"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#properties","text":"Name Summary name val name: String","title":"Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#functions","text":"Name Summary doesSameWorkAs fun doesSameWorkAs(otherWorker: Worker * ): Boolean run fun run(): Flow T","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/#extension-functions","text":"Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, context: CoroutineContext = EmptyCoroutineContext, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Extension Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/-init-/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker / init init MockWorker(name: String ) A mock implementation of Worker for use in tests with testRender and TestRenderResult . Note this Worker can not actually emit any output itself. Use TestRenderResult.handleOutput or TestRenderResult.handleFinish to evaluate output handlers. See Also com.squareup.workflow.StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":" init "},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/-init-/#init","text":"MockWorker(name: String ) A mock implementation of Worker for use in tests with testRender and TestRenderResult . Note this Worker can not actually emit any output itself. Use TestRenderResult.handleOutput or TestRenderResult.handleFinish to evaluate output handlers. See Also com.squareup.workflow.StatefulWorkflow.testRender com.squareup.workflow.StatelessWorkflow.testRender","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/does-same-work-as/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker / doesSameWorkAs doesSameWorkAs fun doesSameWorkAs(otherWorker: Worker * ): Boolean","title":"Does same work as"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/does-same-work-as/#doessameworkas","text":"fun doesSameWorkAs(otherWorker: Worker * ): Boolean","title":"doesSameWorkAs"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/name/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker / name name val name: String","title":"Name"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/run/","text":"workflow-testing / com.squareup.workflow.testing / MockWorker / run run fun run(): Flow T","title":"Run"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-mock-worker/run/#run","text":"fun run(): Flow T","title":"run"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult TestRenderResult class TestRenderResult StateT, OutputT : Any , RenderingT Represents the result of running a single render pass on a workflow. Parameters rendering - The actual RenderingT value returned from the workflow s render method. state - The StateT passed into the render method. behavior - The Behavior generated from the RenderContext . Properties Name Summary rendering val rendering: RenderingT The actual RenderingT value returned from the workflow s render method. Functions Name Summary assertNoWorkersRan fun assertNoWorkersRan(): Unit Throws an AssertionError if any Worker s were run. assertNoWorkflowsRendered fun assertNoWorkflowsRendered(): Unit Throws an AssertionError if any Workflow s were rendered. assertRan fun T : Any Worker T .assertRan(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not run this worker with withKey . assertRendered fun CInput, COutputT : Any , CRenderingT Workflow CInput , COutputT , CRenderingT .assertRendered(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not render this@assertWorkflowRendered with withKey . getEventResult fun getEventResult(): Pair StateT , OutputT ? Call this after invoking one of the event handlers on your rendering to get the result of handling that event. handleFinish fun T : Any Worker T .handleFinish(key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with Finished . Returns the new state and output returned by the output handler. handleOutput fun CInputT, COutputT : Any , CRenderingT Workflow CInputT , COutputT , CRenderingT .handleOutput(output: COutputT , key: String = \"\"): Pair StateT , OutputT ? Asserts that this workflow was rendered with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler. fun T : Any Worker T .handleOutput(output: T , key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/#testrenderresult","text":"class TestRenderResult StateT, OutputT : Any , RenderingT Represents the result of running a single render pass on a workflow.","title":"TestRenderResult"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/#parameters","text":"rendering - The actual RenderingT value returned from the workflow s render method. state - The StateT passed into the render method. behavior - The Behavior generated from the RenderContext .","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/#properties","text":"Name Summary rendering val rendering: RenderingT The actual RenderingT value returned from the workflow s render method.","title":"Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/#functions","text":"Name Summary assertNoWorkersRan fun assertNoWorkersRan(): Unit Throws an AssertionError if any Worker s were run. assertNoWorkflowsRendered fun assertNoWorkflowsRendered(): Unit Throws an AssertionError if any Workflow s were rendered. assertRan fun T : Any Worker T .assertRan(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not run this worker with withKey . assertRendered fun CInput, COutputT : Any , CRenderingT Workflow CInput , COutputT , CRenderingT .assertRendered(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not render this@assertWorkflowRendered with withKey . getEventResult fun getEventResult(): Pair StateT , OutputT ? Call this after invoking one of the event handlers on your rendering to get the result of handling that event. handleFinish fun T : Any Worker T .handleFinish(key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with Finished . Returns the new state and output returned by the output handler. handleOutput fun CInputT, COutputT : Any , CRenderingT Workflow CInputT , COutputT , CRenderingT .handleOutput(output: COutputT , key: String = \"\"): Pair StateT , OutputT ? Asserts that this workflow was rendered with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler. fun T : Any Worker T .handleOutput(output: T , key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler.","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-no-workers-ran/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / assertNoWorkersRan assertNoWorkersRan fun assertNoWorkersRan(): Unit Throws an AssertionError if any Worker s were run.","title":"Assert no workers ran"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-no-workers-ran/#assertnoworkersran","text":"fun assertNoWorkersRan(): Unit Throws an AssertionError if any Worker s were run.","title":"assertNoWorkersRan"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-no-workflows-rendered/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / assertNoWorkflowsRendered assertNoWorkflowsRendered fun assertNoWorkflowsRendered(): Unit Throws an AssertionError if any Workflow s were rendered.","title":"Assert no workflows rendered"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-no-workflows-rendered/#assertnoworkflowsrendered","text":"fun assertNoWorkflowsRendered(): Unit Throws an AssertionError if any Workflow s were rendered.","title":"assertNoWorkflowsRendered"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-ran/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / assertRan assertRan fun T : Any Worker T .assertRan(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not run this worker with withKey .","title":"Assert ran"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-ran/#assertran","text":"fun T : Any Worker T .assertRan(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not run this worker with withKey .","title":"assertRan"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-rendered/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / assertRendered assertRendered fun CInput, COutputT : Any , CRenderingT Workflow CInput , COutputT , CRenderingT .assertRendered(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not render this@assertWorkflowRendered with withKey .","title":"Assert rendered"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/assert-rendered/#assertrendered","text":"fun CInput, COutputT : Any , CRenderingT Workflow CInput , COutputT , CRenderingT .assertRendered(withKey: String = \"\"): Unit Throws an AssertionError if the render pass did not render this@assertWorkflowRendered with withKey .","title":"assertRendered"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/get-event-result/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / getEventResult getEventResult fun getEventResult(): Pair StateT , OutputT ? Call this after invoking one of the event handlers on your rendering to get the result of handling that event. E.g. 1 2 3 4 5 rendering.let { assertTrue(it is FooRendering) it.onFooEvent(Unit) val (state, output) = getEventResult() }","title":"Get event result"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/get-event-result/#geteventresult","text":"fun getEventResult(): Pair StateT , OutputT ? Call this after invoking one of the event handlers on your rendering to get the result of handling that event. E.g. 1 2 3 4 5 rendering.let { assertTrue(it is FooRendering) it.onFooEvent(Unit) val (state, output) = getEventResult() }","title":"getEventResult"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/handle-finish/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / handleFinish handleFinish fun T : Any Worker T .handleFinish(key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with Finished . Returns the new state and output returned by the output handler.","title":"Handle finish"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/handle-finish/#handlefinish","text":"fun T : Any Worker T .handleFinish(key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with Finished . Returns the new state and output returned by the output handler.","title":"handleFinish"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/handle-output/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / handleOutput handleOutput fun CInputT, COutputT : Any , CRenderingT Workflow CInputT , COutputT , CRenderingT .handleOutput(output: COutputT , key: String = \"\"): Pair StateT , OutputT ? Asserts that this workflow was rendered with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler. fun T : Any Worker T .handleOutput(output: T , key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler.","title":"Handle output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/handle-output/#handleoutput","text":"fun CInputT, COutputT : Any , CRenderingT Workflow CInputT , COutputT , CRenderingT .handleOutput(output: COutputT , key: String = \"\"): Pair StateT , OutputT ? Asserts that this workflow was rendered with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler. fun T : Any Worker T .handleOutput(output: T , key: String = \"\"): Pair StateT , OutputT ? Asserts that this worker was ran with the given key and then executes the output handler with the given output (as an Output ). Returns the new state and output returned by the output handler.","title":"handleOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/rendering/","text":"workflow-testing / com.squareup.workflow.testing / TestRenderResult / rendering rendering val rendering: RenderingT The actual RenderingT value returned from the workflow s render method.","title":"Rendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-test-render-result/rendering/#rendering","text":"val rendering: RenderingT The actual RenderingT value returned from the workflow s render method.","title":"rendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester WorkerTester interface WorkerTester T Functions Name Summary assertFinished abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. assertNoOutput abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput . assertNotFinished abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished. cancelWorker abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it s finished cancelling (joined). getException abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it. nextOutput abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/#workertester","text":"interface WorkerTester T","title":"WorkerTester"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/#functions","text":"Name Summary assertFinished abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. assertNoOutput abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput . assertNotFinished abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished. cancelWorker abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it s finished cancelling (joined). getException abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it. nextOutput abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-finished/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / assertFinished assertFinished abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. Throws an AssertionError if an output was emitted.","title":"Assert finished"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-finished/#assertfinished","text":"abstract suspend fun assertFinished(): Unit Suspends until the worker emits an output or finishes. Throws an AssertionError if an output was emitted.","title":"assertFinished"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-no-output/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / assertNoOutput assertNoOutput abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput .","title":"Assert no output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-no-output/#assertnooutput","text":"abstract fun assertNoOutput(): Unit Throws an AssertionError if an output has been emitted since the last call to nextOutput .","title":"assertNoOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-not-finished/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / assertNotFinished assertNotFinished abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished.","title":"Assert not finished"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/assert-not-finished/#assertnotfinished","text":"abstract fun assertNotFinished(): Unit Throws an AssertionError immediately if the worker is finished.","title":"assertNotFinished"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/cancel-worker/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / cancelWorker cancelWorker abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it s finished cancelling (joined).","title":"Cancel worker"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/cancel-worker/#cancelworker","text":"abstract suspend fun cancelWorker(): Unit Cancels the worker and suspends until it s finished cancelling (joined).","title":"cancelWorker"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/get-exception/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / getException getException abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it.","title":"Get exception"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/get-exception/#getexception","text":"abstract suspend fun getException(): Throwable Suspends until the worker throws an exception, then returns it.","title":"getException"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/next-output/","text":"workflow-testing / com.squareup.workflow.testing / WorkerTester / nextOutput nextOutput abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"Next output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-worker-tester/next-output/#nextoutput","text":"abstract suspend fun nextOutput(): T Suspends until the worker emits its next value, then returns it.","title":"nextOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester WorkflowTester class WorkflowTester InputT, OutputT : Any , RenderingT Runs a Workflow and provides access to its renderings , outputs , and snapshots . For each of renderings, outputs, and snapshots, this class gives you a few ways to access information about them: awaitNextRendering , awaitNextOutput , awaitNextSnapshot Block until something becomes available, and then return it. hasRendering , hasOutput , hasSnapshot Return true if the previous methods won t block. sendInput Send a new InputT to the root workflow. Properties Name Summary hasOutput val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed. hasRendering val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed. hasSnapshot val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed. Functions Name Summary awaitFailure fun awaitFailure(timeoutMs: Long ? = null): Throwable Blocks until the workflow fails by throwing an exception, then returns that exception. awaitNextOutput fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it. awaitNextRendering fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it. awaitNextSnapshot fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): Snapshot Blocks until the workflow emits a snapshot, then returns it. sendInput fun sendInput(input: InputT ): Unit Sends input to the workflow. Companion Object Properties Name Summary DEFAULT_TIMEOUT_MS const val DEFAULT_TIMEOUT_MS: Long","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/#workflowtester","text":"class WorkflowTester InputT, OutputT : Any , RenderingT Runs a Workflow and provides access to its renderings , outputs , and snapshots . For each of renderings, outputs, and snapshots, this class gives you a few ways to access information about them: awaitNextRendering , awaitNextOutput , awaitNextSnapshot Block until something becomes available, and then return it. hasRendering , hasOutput , hasSnapshot Return true if the previous methods won t block. sendInput Send a new InputT to the root workflow.","title":"WorkflowTester"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/#properties","text":"Name Summary hasOutput val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed. hasRendering val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed. hasSnapshot val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/#functions","text":"Name Summary awaitFailure fun awaitFailure(timeoutMs: Long ? = null): Throwable Blocks until the workflow fails by throwing an exception, then returns that exception. awaitNextOutput fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it. awaitNextRendering fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it. awaitNextSnapshot fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): Snapshot Blocks until the workflow emits a snapshot, then returns it. sendInput fun sendInput(input: InputT ): Unit Sends input to the workflow.","title":"Functions"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/#companion-object-properties","text":"Name Summary DEFAULT_TIMEOUT_MS const val DEFAULT_TIMEOUT_MS: Long","title":"Companion Object Properties"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/-d-e-f-a-u-l-t_-t-i-m-e-o-u-t_-m-s/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / DEFAULT_TIMEOUT_MS DEFAULT_TIMEOUT_MS const val DEFAULT_TIMEOUT_MS: Long","title":" d e f a u l t  t i m e o u t  m s"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/-d-e-f-a-u-l-t_-t-i-m-e-o-u-t_-m-s/#default_timeout_ms","text":"const val DEFAULT_TIMEOUT_MS: Long","title":"DEFAULT_TIMEOUT_MS"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-failure/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / awaitFailure awaitFailure fun awaitFailure(timeoutMs: Long ? = null): Throwable Blocks until the workflow fails by throwing an exception, then returns that exception. Parameters timeoutMs - The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Await failure"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-failure/#awaitfailure","text":"fun awaitFailure(timeoutMs: Long ? = null): Throwable Blocks until the workflow fails by throwing an exception, then returns that exception.","title":"awaitFailure"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-failure/#parameters","text":"timeoutMs - The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-output/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / awaitNextOutput awaitNextOutput fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it. Parameters timeoutMs - The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Await next output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-output/#awaitnextoutput","text":"fun awaitNextOutput(timeoutMs: Long ? = null): OutputT Blocks until the workflow emits an output, then returns it.","title":"awaitNextOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-output/#parameters","text":"timeoutMs - The maximum amount of time to wait for an output to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead.","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-rendering/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / awaitNextRendering awaitNextRendering fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it. Parameters timeoutMs - The maximum amount of time to wait for a rendering to be emitted. If null, WorkflowTester.DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple renderings, all but the most recent one will be dropped.","title":"Await next rendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-rendering/#awaitnextrendering","text":"fun awaitNextRendering(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): RenderingT Blocks until the workflow emits a rendering, then returns it.","title":"awaitNextRendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-rendering/#parameters","text":"timeoutMs - The maximum amount of time to wait for a rendering to be emitted. If null, WorkflowTester.DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple renderings, all but the most recent one will be dropped.","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-snapshot/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / awaitNextSnapshot awaitNextSnapshot fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): Snapshot Blocks until the workflow emits a snapshot, then returns it. Parameters timeoutMs - The maximum amount of time to wait for a snapshot to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple snapshots, all but the most recent one will be dropped.","title":"Await next snapshot"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-snapshot/#awaitnextsnapshot","text":"fun awaitNextSnapshot(timeoutMs: Long ? = null, skipIntermediate: Boolean = true): Snapshot Blocks until the workflow emits a snapshot, then returns it.","title":"awaitNextSnapshot"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/await-next-snapshot/#parameters","text":"timeoutMs - The maximum amount of time to wait for a snapshot to be emitted. If null, DEFAULT_TIMEOUT_MS will be used instead. skipIntermediate - If true, and the workflow has emitted multiple snapshots, all but the most recent one will be dropped.","title":"Parameters"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-output/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / hasOutput hasOutput val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed.","title":"Has output"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-output/#hasoutput","text":"val hasOutput: Boolean True if the workflow has emitted a new output that is ready to be consumed.","title":"hasOutput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-rendering/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / hasRendering hasRendering val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed.","title":"Has rendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-rendering/#hasrendering","text":"val hasRendering: Boolean True if the workflow has emitted a new rendering that is ready to be consumed.","title":"hasRendering"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-snapshot/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / hasSnapshot hasSnapshot val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"Has snapshot"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/has-snapshot/#hassnapshot","text":"val hasSnapshot: Boolean True if the workflow has emitted a new snapshot that is ready to be consumed.","title":"hasSnapshot"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/send-input/","text":"workflow-testing / com.squareup.workflow.testing / WorkflowTester / sendInput sendInput fun sendInput(input: InputT ): Unit Sends input to the workflow.","title":"Send input"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/-workflow-tester/send-input/#sendinput","text":"fun sendInput(input: InputT ): Unit Sends input to the workflow.","title":"sendInput"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatefulWorkflow Extensions for com.squareup.workflow.StatefulWorkflow Name Summary testFromState fun T, InputT, StateT, OutputT : Any , RenderingT StatefulWorkflow InputT , StateT , OutputT , RenderingT .testFromState(input: InputT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T fun StateT, OutputT : Any , RenderingT StatefulWorkflow Unit , StateT , OutputT , RenderingT .testFromState(initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - Unit ): Unit Creates a WorkflowTester to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . testRender fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRender(state: S , block: TestRenderResult S , O , R .() - Unit ): Unit fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRender(input: I , state: S , block: TestRenderResult S , O , R .() - Unit ): Unit Calls StatefulWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output. testRenderInitialState fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRenderInitialState(input: I , block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state for the input , then calls testRender with that state and passes through the TestRenderResult to block along with the initial state. fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRenderInitialState(block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state, then calls testRender with that state and passes through the TestRenderResult to block along with the initial state.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/#extensions-for-comsquareupworkflowstatefulworkflow","text":"Name Summary testFromState fun T, InputT, StateT, OutputT : Any , RenderingT StatefulWorkflow InputT , StateT , OutputT , RenderingT .testFromState(input: InputT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T fun StateT, OutputT : Any , RenderingT StatefulWorkflow Unit , StateT , OutputT , RenderingT .testFromState(initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - Unit ): Unit Creates a WorkflowTester to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . testRender fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRender(state: S , block: TestRenderResult S , O , R .() - Unit ): Unit fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRender(input: I , state: S , block: TestRenderResult S , O , R .() - Unit ): Unit Calls StatefulWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output. testRenderInitialState fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRenderInitialState(input: I , block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state for the input , then calls testRender with that state and passes through the TestRenderResult to block along with the initial state. fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRenderInitialState(block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state, then calls testRender with that state and passes through the TestRenderResult to block along with the initial state.","title":"Extensions for com.squareup.workflow.StatefulWorkflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-from-state/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatefulWorkflow / testFromState testFromState @TestOnly fun T, InputT, StateT, OutputT : Any , RenderingT StatefulWorkflow InputT , StateT , OutputT , RenderingT .testFromState(input: InputT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T @TestOnly fun StateT, OutputT : Any , RenderingT StatefulWorkflow Unit , StateT , OutputT , RenderingT .testFromState(initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - Unit ): Unit Creates a WorkflowTester to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . All workflow-related coroutines are cancelled when the block exits.","title":"Test from state"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-from-state/#testfromstate","text":"@TestOnly fun T, InputT, StateT, OutputT : Any , RenderingT StatefulWorkflow InputT , StateT , OutputT , RenderingT .testFromState(input: InputT , initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T @TestOnly fun StateT, OutputT : Any , RenderingT StatefulWorkflow Unit , StateT , OutputT , RenderingT .testFromState(initialState: StateT , context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - Unit ): Unit Creates a WorkflowTester to run this workflow for unit testing. If the workflow is stateful , initialState is not called. Instead, the workflow is started from the given initialState . All workflow-related coroutines are cancelled when the block exits.","title":"testFromState"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render-initial-state/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatefulWorkflow / testRenderInitialState testRenderInitialState fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRenderInitialState(input: I , block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state for the input , then calls testRender with that state and passes through the TestRenderResult to block along with the initial state. fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRenderInitialState(block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state, then calls testRender with that state and passes through the TestRenderResult to block along with the initial state.","title":"Test render initial state"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render-initial-state/#testrenderinitialstate","text":"fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRenderInitialState(input: I , block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state for the input , then calls testRender with that state and passes through the TestRenderResult to block along with the initial state. fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRenderInitialState(block: TestRenderResult S , O , R .(initialState: S ) - Unit ): Unit Calls StatefulWorkflow.initialState to get the initial state, then calls testRender with that state and passes through the TestRenderResult to block along with the initial state.","title":"testRenderInitialState"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatefulWorkflow / testRender testRender fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRender(state: S , block: TestRenderResult S , O , R .() - Unit ): Unit fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRender(input: I , state: S , block: TestRenderResult S , O , R .() - Unit ): Unit Calls StatefulWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output. Mocking Child Workflows and Workers All child Workflow s must be instances of MockChildWorkflow , as they are not given a working RenderContext . This function only allows you to test a single workflow s render method. Child Worker s should be instances of MockWorker . Use testRenderInitialState to automatically calculate the initial state from the input.","title":"Test render"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render/#testrender","text":"fun S, O : Any , R StatefulWorkflow Unit , S , O , R .testRender(state: S , block: TestRenderResult S , O , R .() - Unit ): Unit fun I, S, O : Any , R StatefulWorkflow I , S , O , R .testRender(input: I , state: S , block: TestRenderResult S , O , R .() - Unit ): Unit Calls StatefulWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output.","title":"testRender"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateful-workflow/test-render/#mocking-child-workflows-and-workers","text":"All child Workflow s must be instances of MockChildWorkflow , as they are not given a working RenderContext . This function only allows you to test a single workflow s render method. Child Worker s should be instances of MockWorker . Use testRenderInitialState to automatically calculate the initial state from the input.","title":"Mocking Child Workflows and Workers"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatelessWorkflow Extensions for com.squareup.workflow.StatelessWorkflow Name Summary testRender fun O : Any , R StatelessWorkflow Unit , O , R .testRender(block: TestRenderResult Unit , O , R .() - Unit ): Unit fun I, O : Any , R StatelessWorkflow I , O , R .testRender(input: I , block: TestRenderResult Unit , O , R .() - Unit ): Unit Calls StatelessWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/#extensions-for-comsquareupworkflowstatelessworkflow","text":"Name Summary testRender fun O : Any , R StatelessWorkflow Unit , O , R .testRender(block: TestRenderResult Unit , O , R .() - Unit ): Unit fun I, O : Any , R StatelessWorkflow I , O , R .testRender(input: I , block: TestRenderResult Unit , O , R .() - Unit ): Unit Calls StatelessWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output.","title":"Extensions for com.squareup.workflow.StatelessWorkflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/test-render/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.StatelessWorkflow / testRender testRender fun O : Any , R StatelessWorkflow Unit , O , R .testRender(block: TestRenderResult Unit , O , R .() - Unit ): Unit fun I, O : Any , R StatelessWorkflow I , O , R .testRender(input: I , block: TestRenderResult Unit , O , R .() - Unit ): Unit Calls StatelessWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output. Mocking Child Workflows and Workers All child Workflow s must be instances of MockChildWorkflow , as they are not given a working RenderContext . This function only allows you to test a single workflow s render method. Child Worker s should be instances of MockWorker .","title":"Test render"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/test-render/#testrender","text":"fun O : Any , R StatelessWorkflow Unit , O , R .testRender(block: TestRenderResult Unit , O , R .() - Unit ): Unit fun I, O : Any , R StatelessWorkflow I , O , R .testRender(input: I , block: TestRenderResult Unit , O , R .() - Unit ): Unit Calls StatelessWorkflow.render and returns a TestRenderResult that can be used to get at the actual rendering , assert on which children and workers were run, and execute the output handlers for rendered children and workers to assert on their state transitions and emitted output.","title":"testRender"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-stateless-workflow/test-render/#mocking-child-workflows-and-workers","text":"All child Workflow s must be instances of MockChildWorkflow , as they are not given a working RenderContext . This function only allows you to test a single workflow s render method. Child Worker s should be instances of MockWorker .","title":"Mocking Child Workflows and Workers"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-worker/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.Worker Extensions for com.squareup.workflow.Worker Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, context: CoroutineContext = EmptyCoroutineContext, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-worker/#extensions-for-comsquareupworkflowworker","text":"Name Summary test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, context: CoroutineContext = EmptyCoroutineContext, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block .","title":"Extensions for com.squareup.workflow.Worker"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-worker/test/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.Worker / test test fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, context: CoroutineContext = EmptyCoroutineContext, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block . If you need to control time (e.g. your worker uses delay() ), create a TestCoroutineDispatcher and pass it as context .","title":"Test"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-worker/test/#test","text":"fun T Worker T .test(timeoutMs: Long = DEFAULT_TIMEOUT_MS, context: CoroutineContext = EmptyCoroutineContext, block: suspend WorkerTester T .() - Unit ): Unit Test a Worker by defining assertions on its output within block . If you need to control time (e.g. your worker uses delay() ), create a TestCoroutineDispatcher and pass it as context .","title":"test"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-workflow/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.Workflow Extensions for com.squareup.workflow.Workflow Name Summary testFromStart fun T, InputT, OutputT : Any , RenderingT Workflow InputT , OutputT , RenderingT .testFromStart(input: InputT , snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing.","title":"Home"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-workflow/#extensions-for-comsquareupworkflowworkflow","text":"Name Summary testFromStart fun T, InputT, OutputT : Any , RenderingT Workflow InputT , OutputT , RenderingT .testFromStart(input: InputT , snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing.","title":"Extensions for com.squareup.workflow.Workflow"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-workflow/test-from-start/","text":"workflow-testing / com.squareup.workflow.testing / com.squareup.workflow.Workflow / testFromStart testFromStart @TestOnly fun T, InputT, OutputT : Any , RenderingT Workflow InputT , OutputT , RenderingT .testFromStart(input: InputT , snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T @TestOnly fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"Test from start"},{"location":"kotlin/api/workflow-testing/com.squareup.workflow.testing/com.squareup.workflow.-workflow/test-from-start/#testfromstart","text":"@TestOnly fun T, InputT, OutputT : Any , RenderingT Workflow InputT , OutputT , RenderingT .testFromStart(input: InputT , snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester InputT , OutputT , RenderingT .() - T ): T @TestOnly fun T, OutputT : Any , RenderingT Workflow Unit , OutputT , RenderingT .testFromStart(snapshot: Snapshot? = null, context: CoroutineContext = EmptyCoroutineContext, block: WorkflowTester Unit , OutputT , RenderingT .() - T ): T Creates a WorkflowTester to run this workflow for unit testing. All workflow-related coroutines are cancelled when the block exits.","title":"testFromStart"},{"location":"kotlin/api/workflow-ui-android/","text":"workflow-ui-android Packages Name Summary com.squareup.workflow.ui com.squareup.workflow.ui.backstack Index All Types","title":"Home"},{"location":"kotlin/api/workflow-ui-android/#packages","text":"Name Summary com.squareup.workflow.ui com.squareup.workflow.ui.backstack","title":"Packages"},{"location":"kotlin/api/workflow-ui-android/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-ui-android/alltypes/","text":"All Types Name Summary com.squareup.workflow.ui.backstack.BackStackContainer A container view that can display a stream of BackStackScreen instances. com.squareup.workflow.ui.BuilderBinding A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) com.squareup.workflow.ui.ExperimentalWorkflowUi The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you. androidx.fragment.app.FragmentActivity (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.HandlesBack Implemented by objects that want the option to intercept back button taps. Can be implemented by View subclasses, or can be attached to a stock view via Helper.setBackHandler . com.squareup.workflow.ui.LayoutRunner An object that handles View.showRendering calls for a view inflated from a layout resource in response to ViewRegistry.buildView . (Use BuilderBinding if you want to build views from code rather than layouts.) com.squareup.workflow.ui.ModalContainer Base class for containers that show HasModals.modals in Dialog s. com.squareup.workflow.ui.ShowRenderingTag android.view.View (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.ViewBinding Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. com.squareup.workflow.ui.ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. com.squareup.workflow.ui.ViewShowRendering Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering . com.squareup.workflow.ui.backstack.ViewStateCache Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets. com.squareup.workflow.ui.WorkflowFragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . com.squareup.workflow.ui.WorkflowLayout A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. com.squareup.workflow.ui.WorkflowRunner Uses a Workflow and a ViewRegistry to drive a WorkflowLayout .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/alltypes/#all-types","text":"Name Summary com.squareup.workflow.ui.backstack.BackStackContainer A container view that can display a stream of BackStackScreen instances. com.squareup.workflow.ui.BuilderBinding A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) com.squareup.workflow.ui.ExperimentalWorkflowUi The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you. androidx.fragment.app.FragmentActivity (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.HandlesBack Implemented by objects that want the option to intercept back button taps. Can be implemented by View subclasses, or can be attached to a stock view via Helper.setBackHandler . com.squareup.workflow.ui.LayoutRunner An object that handles View.showRendering calls for a view inflated from a layout resource in response to ViewRegistry.buildView . (Use BuilderBinding if you want to build views from code rather than layouts.) com.squareup.workflow.ui.ModalContainer Base class for containers that show HasModals.modals in Dialog s. com.squareup.workflow.ui.ShowRenderingTag android.view.View (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.ViewBinding Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. com.squareup.workflow.ui.ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. com.squareup.workflow.ui.ViewShowRendering Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering . com.squareup.workflow.ui.backstack.ViewStateCache Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets. com.squareup.workflow.ui.WorkflowFragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . com.squareup.workflow.ui.WorkflowLayout A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. com.squareup.workflow.ui.WorkflowRunner Uses a Workflow and a ViewRegistry to drive a WorkflowLayout .","title":"All Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/","text":"workflow-ui-android / com.squareup.workflow.ui Package com.squareup.workflow.ui Types Name Summary BuilderBinding class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) HandlesBack interface HandlesBack Implemented by objects that want the option to intercept back button taps. Can be implemented by View subclasses, or can be attached to a stock view via Helper.setBackHandler . LayoutRunner interface LayoutRunner RenderingT : Any An object that handles View.showRendering calls for a view inflated from a layout resource in response to ViewRegistry.buildView . (Use BuilderBinding if you want to build views from code rather than layouts.) ModalContainer abstract class ModalContainer ModalRenderingT : Any : FrameLayout , HandlesBack Base class for containers that show HasModals.modals in Dialog s. ShowRenderingTag data class ShowRenderingTag out RenderingT : Any ViewBinding interface ViewBinding RenderingT : Any Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. ViewRegistry class ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. WorkflowFragment abstract class WorkflowFragment InputT, OutputT : Any : Fragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . WorkflowLayout class WorkflowLayout : FrameLayout , HandlesBack A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. WorkflowRunner interface WorkflowRunner out OutputT : Any Uses a Workflow and a ViewRegistry to drive a WorkflowLayout . Annotations Name Summary ExperimentalWorkflowUi annotation class ExperimentalWorkflowUi The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you. Type Aliases Name Summary ViewShowRendering typealias ViewShowRendering RenderingT = ( RenderingT ) - Unit Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering . Extensions for External Classes Name Summary android.view.View androidx.fragment.app.FragmentActivity","title":"workflow-ui-android"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/#package-comsquareupworkflowui","text":"","title":"Package com.squareup.workflow.ui"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/#types","text":"Name Summary BuilderBinding class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) HandlesBack interface HandlesBack Implemented by objects that want the option to intercept back button taps. Can be implemented by View subclasses, or can be attached to a stock view via Helper.setBackHandler . LayoutRunner interface LayoutRunner RenderingT : Any An object that handles View.showRendering calls for a view inflated from a layout resource in response to ViewRegistry.buildView . (Use BuilderBinding if you want to build views from code rather than layouts.) ModalContainer abstract class ModalContainer ModalRenderingT : Any : FrameLayout , HandlesBack Base class for containers that show HasModals.modals in Dialog s. ShowRenderingTag data class ShowRenderingTag out RenderingT : Any ViewBinding interface ViewBinding RenderingT : Any Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. ViewRegistry class ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. WorkflowFragment abstract class WorkflowFragment InputT, OutputT : Any : Fragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . WorkflowLayout class WorkflowLayout : FrameLayout , HandlesBack A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. WorkflowRunner interface WorkflowRunner out OutputT : Any Uses a Workflow and a ViewRegistry to drive a WorkflowLayout .","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/#annotations","text":"Name Summary ExperimentalWorkflowUi annotation class ExperimentalWorkflowUi The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"Annotations"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/#type-aliases","text":"Name Summary ViewShowRendering typealias ViewShowRendering RenderingT = ( RenderingT ) - Unit Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering .","title":"Type Aliases"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/#extensions-for-external-classes","text":"Name Summary android.view.View androidx.fragment.app.FragmentActivity","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewShowRendering ViewShowRendering typealias ViewShowRendering RenderingT = (@UnsafeVariance RenderingT ) - Unit Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering .","title":" view show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-show-rendering/#viewshowrendering","text":"typealias ViewShowRendering RenderingT = (@UnsafeVariance RenderingT ) - Unit Function attached to a view created by ViewRegistry , to allow it to respond to View.showRendering .","title":"ViewShowRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/","text":"workflow-ui-android / com.squareup.workflow.ui / BuilderBinding BuilderBinding @ExperimentalWorkflowUi class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Typical usage is to have a custom builder or view s companion object implement ViewBinding by delegating to a BuilderBinding , like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyView( context: Context, attributeSet: AttributeSet? ) : FrameLayout(context, attributeSet) { private fun update(rendering: MyRendering) { ... } companion object : ViewBuilder MyScreen by BuilderBinding( type = MyScreen::class, builder = { _, initialRendering, context, _ - MyView(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } This pattern allows us to assemble a ViewRegistry out of the custom classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( MyView, GamePlayLayoutRunner, GameOverLayoutRunner ) Note in particular the ViewRegistry argument to the viewConstructor lambda. This allows nested renderings to be displayed via nested calls to ViewRegistry.buildView . Constructors Name Summary init BuilderBinding(type: KClass RenderingT , viewConstructor: (viewRegistry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?) - View ) A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Properties Name Summary type val type: KClass RenderingT Functions Name Summary buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/#builderbinding","text":"@ExperimentalWorkflowUi class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Typical usage is to have a custom builder or view s companion object implement ViewBinding by delegating to a BuilderBinding , like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyView( context: Context, attributeSet: AttributeSet? ) : FrameLayout(context, attributeSet) { private fun update(rendering: MyRendering) { ... } companion object : ViewBuilder MyScreen by BuilderBinding( type = MyScreen::class, builder = { _, initialRendering, context, _ - MyView(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } This pattern allows us to assemble a ViewRegistry out of the custom classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( MyView, GamePlayLayoutRunner, GameOverLayoutRunner ) Note in particular the ViewRegistry argument to the viewConstructor lambda. This allows nested renderings to be displayed via nested calls to ViewRegistry.buildView .","title":"BuilderBinding"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/#constructors","text":"Name Summary init BuilderBinding(type: KClass RenderingT , viewConstructor: (viewRegistry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?) - View ) A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.)","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/#properties","text":"Name Summary type val type: KClass RenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/#functions","text":"Name Summary buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / BuilderBinding / init init BuilderBinding(type: KClass RenderingT , viewConstructor: (viewRegistry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?) - View ) A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Typical usage is to have a custom builder or view s companion object implement ViewBinding by delegating to a BuilderBinding , like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyView( context: Context, attributeSet: AttributeSet? ) : FrameLayout(context, attributeSet) { private fun update(rendering: MyRendering) { ... } companion object : ViewBuilder MyScreen by BuilderBinding( type = MyScreen::class, builder = { _, initialRendering, context, _ - MyView(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } This pattern allows us to assemble a ViewRegistry out of the custom classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( MyView, GamePlayLayoutRunner, GameOverLayoutRunner ) Note in particular the ViewRegistry argument to the viewConstructor lambda. This allows nested renderings to be displayed via nested calls to ViewRegistry.buildView .","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/-init-/#init","text":"BuilderBinding(type: KClass RenderingT , viewConstructor: (viewRegistry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?) - View ) A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Typical usage is to have a custom builder or view s companion object implement ViewBinding by delegating to a BuilderBinding , like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class MyView( context: Context, attributeSet: AttributeSet? ) : FrameLayout(context, attributeSet) { private fun update(rendering: MyRendering) { ... } companion object : ViewBuilder MyScreen by BuilderBinding( type = MyScreen::class, builder = { _, initialRendering, context, _ - MyView(context).apply { layoutParams = ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT) bindShowRendering(initialRendering, ::update) } ) } This pattern allows us to assemble a ViewRegistry out of the custom classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( MyView, GamePlayLayoutRunner, GameOverLayoutRunner ) Note in particular the ViewRegistry argument to the viewConstructor lambda. This allows nested renderings to be displayed via nested calls to ViewRegistry.buildView .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/build-view/","text":"workflow-ui-android / com.squareup.workflow.ui / BuilderBinding / buildView buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?): View Overrides ViewBinding.buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/build-view/#buildview","text":"fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?): View Overrides ViewBinding.buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/type/","text":"workflow-ui-android / com.squareup.workflow.ui / BuilderBinding / type type val type: KClass RenderingT Overrides ViewBinding.type","title":"Type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-builder-binding/type/#type","text":"val type: KClass RenderingT Overrides ViewBinding.type","title":"type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-experimental-workflow-ui/","text":"workflow-ui-android / com.squareup.workflow.ui / ExperimentalWorkflowUi ExperimentalWorkflowUi annotation class ExperimentalWorkflowUi The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you. Constructors Name Summary init ExperimentalWorkflowUi() The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-experimental-workflow-ui/#experimentalworkflowui","text":"annotation class ExperimentalWorkflowUi The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"ExperimentalWorkflowUi"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-experimental-workflow-ui/#constructors","text":"Name Summary init ExperimentalWorkflowUi() The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-experimental-workflow-ui/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ExperimentalWorkflowUi / init init ExperimentalWorkflowUi() The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-experimental-workflow-ui/-init-/#init","text":"ExperimentalWorkflowUi() The Workflow UI classes for Android are still experimental. They are in more flux than the rest of the code, and have not yet seen production use. Proceed with caution, and be ready to have the rug pulled out from under you.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/","text":"workflow-ui-android / com.squareup.workflow.ui / HandlesBack HandlesBack interface HandlesBack Implemented by objects that want the option to intercept back button taps. Can be implemented by View subclasses, or can be attached to a stock view via Helper.setBackHandler . When implemented by a container view, the onBackPressed methods or tags of its subviews should be invoked first, via Helper.onBackPressed To kick things off, override android.app.Activity.onBackPressed to call workflowOnBackPressed or WorkflowFragment.onBackPressed NB This is all expected to be scrapped as soon as OnBackPressedDispatcher stabilizes. Types Name Summary Helper object Helper Functions Name Summary onBackPressed abstract fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should. Inheritors Name Summary BackStackContainer open class BackStackContainer : FrameLayout , HandlesBack A container view that can display a stream of BackStackScreen instances. ModalContainer abstract class ModalContainer ModalRenderingT : Any : FrameLayout , HandlesBack Base class for containers that show HasModals.modals in Dialog s. WorkflowLayout class WorkflowLayout : FrameLayout , HandlesBack A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/#handlesback","text":"interface HandlesBack Implemented by objects that want the option to intercept back button taps. Can be implemented by View subclasses, or can be attached to a stock view via Helper.setBackHandler . When implemented by a container view, the onBackPressed methods or tags of its subviews should be invoked first, via Helper.onBackPressed To kick things off, override android.app.Activity.onBackPressed to call workflowOnBackPressed or WorkflowFragment.onBackPressed NB This is all expected to be scrapped as soon as OnBackPressedDispatcher stabilizes.","title":"HandlesBack"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/#types","text":"Name Summary Helper object Helper","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/#functions","text":"Name Summary onBackPressed abstract fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should.","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/#inheritors","text":"Name Summary BackStackContainer open class BackStackContainer : FrameLayout , HandlesBack A container view that can display a stream of BackStackScreen instances. ModalContainer abstract class ModalContainer ModalRenderingT : Any : FrameLayout , HandlesBack Base class for containers that show HasModals.modals in Dialog s. WorkflowLayout class WorkflowLayout : FrameLayout , HandlesBack A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/on-back-pressed/","text":"workflow-ui-android / com.squareup.workflow.ui / HandlesBack / onBackPressed onBackPressed abstract fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should.","title":"On back pressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/on-back-pressed/#onbackpressed","text":"abstract fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should.","title":"onBackPressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/-helper/","text":"workflow-ui-android / com.squareup.workflow.ui / HandlesBack / Helper Helper object Helper Functions Name Summary onBackPressed fun onBackPressed(view: View ): Boolean To be called by a container when the back button is pressed. Calls the given view s HandlesBack.onBackPressed method, or the handler registered on it via setConditionalBackHandler or setBackHandler . setBackHandler fun View .setBackHandler(handler: Runnable ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. setConditionalBackHandler fun View .setConditionalBackHandler(handlesBack: HandlesBack ): Unit Sets a handler that can return true if it has consumed the back event, or false if processing should continue.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/-helper/#helper","text":"object Helper","title":"Helper"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/-helper/#functions","text":"Name Summary onBackPressed fun onBackPressed(view: View ): Boolean To be called by a container when the back button is pressed. Calls the given view s HandlesBack.onBackPressed method, or the handler registered on it via setConditionalBackHandler or setBackHandler . setBackHandler fun View .setBackHandler(handler: Runnable ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. setConditionalBackHandler fun View .setConditionalBackHandler(handlesBack: HandlesBack ): Unit Sets a handler that can return true if it has consumed the back event, or false if processing should continue.","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/-helper/on-back-pressed/","text":"workflow-ui-android / com.squareup.workflow.ui / HandlesBack / Helper / onBackPressed onBackPressed @JvmStatic fun onBackPressed(view: View ): Boolean To be called by a container when the back button is pressed. Calls the given view s HandlesBack.onBackPressed method, or the handler registered on it via setConditionalBackHandler or setBackHandler .","title":"On back pressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/-helper/on-back-pressed/#onbackpressed","text":"@JvmStatic fun onBackPressed(view: View ): Boolean To be called by a container when the back button is pressed. Calls the given view s HandlesBack.onBackPressed method, or the handler registered on it via setConditionalBackHandler or setBackHandler .","title":"onBackPressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/-helper/set-back-handler/","text":"workflow-ui-android / com.squareup.workflow.ui / HandlesBack / Helper / setBackHandler setBackHandler @JvmStatic fun View .setBackHandler(handler: Runnable ): Unit Sets a handler that always consumes the back event. Convenient for use with method references.","title":"Set back handler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/-helper/set-back-handler/#setbackhandler","text":"@JvmStatic fun View .setBackHandler(handler: Runnable ): Unit Sets a handler that always consumes the back event. Convenient for use with method references.","title":"setBackHandler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/-helper/set-conditional-back-handler/","text":"workflow-ui-android / com.squareup.workflow.ui / HandlesBack / Helper / setConditionalBackHandler setConditionalBackHandler @JvmStatic fun View .setConditionalBackHandler(handlesBack: HandlesBack ): Unit Sets a handler that can return true if it has consumed the back event, or false if processing should continue.","title":"Set conditional back handler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-handles-back/-helper/set-conditional-back-handler/#setconditionalbackhandler","text":"@JvmStatic fun View .setConditionalBackHandler(handlesBack: HandlesBack ): Unit Sets a handler that can return true if it has consumed the back event, or false if processing should continue.","title":"setConditionalBackHandler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner LayoutRunner @ExperimentalWorkflowUi interface LayoutRunner RenderingT : Any An object that handles View.showRendering calls for a view inflated from a layout resource in response to ViewRegistry.buildView . (Use BuilderBinding if you want to build views from code rather than layouts.) Typical usage is to have a LayoutRunner s companion object implement ViewBinding by delegating to LayoutRunner.bind , specifying the layout resource it expects to drive. class HelloLayoutRunner(view: View) : LayoutRunner { private val messageView: TextView = view.findViewById(R.id.hello_message) 1 2 3 4 5 6 7 8 override fun showRendering(rendering: Rendering) { messageView.text = rendering.message messageView.setOnClickListener { rendering.onClick(Unit) } } companion object : ViewBinding Rendering by bind( R.layout.hello_goodbye_layout, ::HelloLayoutRunner ) } This pattern allows us to assemble a ViewRegistry out of the LayoutRunner classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) Also note that two flavors of contructor are accepted by bind . Every LayoutRunner constructor must accept an View . Optionally, they can also have a second ViewRegistry argument, to allow nested renderings to be displayed via nested calls to ViewRegistry.buildView . Types Name Summary Binding class Binding RenderingT : Any : ViewBinding RenderingT Functions Name Summary showRendering abstract fun showRendering(rendering: RenderingT ): Unit Companion Object Functions Name Summary bind fun RenderingT : Any bind(layoutId: Int , constructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ): ViewBinding RenderingT fun RenderingT : Any bind(layoutId: Int , constructor: ( View ) - LayoutRunner RenderingT ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . bindNoRunner fun RenderingT : Any bindNoRunner(layoutId: Int ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/#layoutrunner","text":"@ExperimentalWorkflowUi interface LayoutRunner RenderingT : Any An object that handles View.showRendering calls for a view inflated from a layout resource in response to ViewRegistry.buildView . (Use BuilderBinding if you want to build views from code rather than layouts.) Typical usage is to have a LayoutRunner s companion object implement ViewBinding by delegating to LayoutRunner.bind , specifying the layout resource it expects to drive. class HelloLayoutRunner(view: View) : LayoutRunner { private val messageView: TextView = view.findViewById(R.id.hello_message) 1 2 3 4 5 6 7 8 override fun showRendering(rendering: Rendering) { messageView.text = rendering.message messageView.setOnClickListener { rendering.onClick(Unit) } } companion object : ViewBinding Rendering by bind( R.layout.hello_goodbye_layout, ::HelloLayoutRunner ) } This pattern allows us to assemble a ViewRegistry out of the LayoutRunner classes themselves. 1 2 3 val TicTacToeViewBuilders = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) Also note that two flavors of contructor are accepted by bind . Every LayoutRunner constructor must accept an View . Optionally, they can also have a second ViewRegistry argument, to allow nested renderings to be displayed via nested calls to ViewRegistry.buildView .","title":"LayoutRunner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/#types","text":"Name Summary Binding class Binding RenderingT : Any : ViewBinding RenderingT","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/#functions","text":"Name Summary showRendering abstract fun showRendering(rendering: RenderingT ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/#companion-object-functions","text":"Name Summary bind fun RenderingT : Any bind(layoutId: Int , constructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ): ViewBinding RenderingT fun RenderingT : Any bind(layoutId: Int , constructor: ( View ) - LayoutRunner RenderingT ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor . bindNoRunner fun RenderingT : Any bindNoRunner(layoutId: Int ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views.","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/bind-no-runner/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / bindNoRunner bindNoRunner inline fun reified RenderingT : Any bindNoRunner(@LayoutRes layoutId: Int ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views.","title":"Bind no runner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/bind-no-runner/#bindnorunner","text":"inline fun reified RenderingT : Any bindNoRunner(@LayoutRes layoutId: Int ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , with a no-op LayoutRunner . Handy for showing static views.","title":"bindNoRunner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/bind/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / bind bind inline fun reified RenderingT : Any bind(@LayoutRes layoutId: Int , noinline constructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ): ViewBinding RenderingT inline fun reified RenderingT : Any bind(@LayoutRes layoutId: Int , noinline constructor: ( View ) - LayoutRunner RenderingT ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor .","title":"Bind"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/bind/#bind","text":"inline fun reified RenderingT : Any bind(@LayoutRes layoutId: Int , noinline constructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ): ViewBinding RenderingT inline fun reified RenderingT : Any bind(@LayoutRes layoutId: Int , noinline constructor: ( View ) - LayoutRunner RenderingT ): ViewBinding RenderingT Creates a ViewBinding that inflates layoutId to show renderings of type RenderingT , using a LayoutRunner created by constructor .","title":"bind"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / showRendering showRendering abstract fun showRendering(rendering: RenderingT ): Unit","title":"Show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/show-rendering/#showrendering","text":"abstract fun showRendering(rendering: RenderingT ): Unit","title":"showRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / Binding Binding class Binding RenderingT : Any : ViewBinding RenderingT Constructors Name Summary init Binding(type: KClass RenderingT , layoutId: Int , runnerConstructor: ( View , ViewRegistry ) - LayoutRunner RenderingT ) Properties Name Summary type val type: KClass RenderingT Functions Name Summary buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/#binding","text":"class Binding RenderingT : Any : ViewBinding RenderingT","title":"Binding"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/#constructors","text":"Name Summary init Binding(type: KClass RenderingT , layoutId: Int , runnerConstructor: ( View , ViewRegistry ) - LayoutRunner RenderingT )","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/#properties","text":"Name Summary type val type: KClass RenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/#functions","text":"Name Summary buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / Binding / init init Binding(type: KClass RenderingT , @LayoutRes layoutId: Int , runnerConstructor: ( View , ViewRegistry ) - LayoutRunner RenderingT )","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/-init-/#init","text":"Binding(type: KClass RenderingT , @LayoutRes layoutId: Int , runnerConstructor: ( View , ViewRegistry ) - LayoutRunner RenderingT )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/build-view/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / Binding / buildView buildView fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?): View Overrides ViewBinding.buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/build-view/#buildview","text":"fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ?): View Overrides ViewBinding.buildView Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/type/","text":"workflow-ui-android / com.squareup.workflow.ui / LayoutRunner / Binding / type type val type: KClass RenderingT Overrides ViewBinding.type","title":"Type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-layout-runner/-binding/type/#type","text":"val type: KClass RenderingT Overrides ViewBinding.type","title":"type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer ModalContainer @ExperimentalWorkflowUi abstract class ModalContainer ModalRenderingT : Any : FrameLayout , HandlesBack Base class for containers that show HasModals.modals in Dialog s. The concrete implementations returned by the factory methods forAlertContainerScreen and forContainerScreen should cover many specific needs, and where those are too limiting subclasses are simple to create. Parameters ModalRenderingT - the type of the nested renderings to be shown in a dialog window. Types Name Summary DialogRef data class DialogRef ModalRenderingT : Any Constructors Name Summary init ModalContainer(context: Context , attributeSet: AttributeSet ? = null) Base class for containers that show HasModals.modals in Dialog s. Properties Name Summary registry lateinit var registry: ViewRegistry Functions Name Summary buildDialog abstract fun buildDialog(initialModalRendering: ModalRenderingT , viewRegistry: ViewRegistry ): ModalContainer.DialogRef ModalRenderingT Called to create (but not show) a Dialog to render initialModalRendering . onBackPressed fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should. onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable ): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable update fun update(newScreen: HasModals *, ModalRenderingT ): Unit updateDialog abstract fun updateDialog(dialogRef: ModalContainer.DialogRef ModalRenderingT ): Unit Companion Object Functions Name Summary forAlertContainerScreen fun forAlertContainerScreen(dialogThemeResId: Int = 0): ViewBinding AlertContainerScreen * Creates a ViewBinding to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. forContainerScreen fun H : HasModals *, * forContainerScreen(id: Int , dialogThemeResId: Int = 0, modalDecorator: ( View ) - View = { it }): ViewBinding H Creates a ViewBinding for modal container screens of type H . Extension Properties Name Summary showRenderingTag val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set. Extension Functions Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . canShowRendering fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . setBackHandler fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#modalcontainer","text":"@ExperimentalWorkflowUi abstract class ModalContainer ModalRenderingT : Any : FrameLayout , HandlesBack Base class for containers that show HasModals.modals in Dialog s. The concrete implementations returned by the factory methods forAlertContainerScreen and forContainerScreen should cover many specific needs, and where those are too limiting subclasses are simple to create.","title":"ModalContainer"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#parameters","text":"ModalRenderingT - the type of the nested renderings to be shown in a dialog window.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#types","text":"Name Summary DialogRef data class DialogRef ModalRenderingT : Any","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#constructors","text":"Name Summary init ModalContainer(context: Context , attributeSet: AttributeSet ? = null) Base class for containers that show HasModals.modals in Dialog s.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#properties","text":"Name Summary registry lateinit var registry: ViewRegistry","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#functions","text":"Name Summary buildDialog abstract fun buildDialog(initialModalRendering: ModalRenderingT , viewRegistry: ViewRegistry ): ModalContainer.DialogRef ModalRenderingT Called to create (but not show) a Dialog to render initialModalRendering . onBackPressed fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should. onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable ): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable update fun update(newScreen: HasModals *, ModalRenderingT ): Unit updateDialog abstract fun updateDialog(dialogRef: ModalContainer.DialogRef ModalRenderingT ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#companion-object-functions","text":"Name Summary forAlertContainerScreen fun forAlertContainerScreen(dialogThemeResId: Int = 0): ViewBinding AlertContainerScreen * Creates a ViewBinding to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. forContainerScreen fun H : HasModals *, * forContainerScreen(id: Int , dialogThemeResId: Int = 0, modalDecorator: ( View ) - View = { it }): ViewBinding H Creates a ViewBinding for modal container screens of type H .","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#extension-properties","text":"Name Summary showRenderingTag val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set.","title":"Extension Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/#extension-functions","text":"Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . canShowRendering fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . setBackHandler fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering .","title":"Extension Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / init init ModalContainer(context: Context , attributeSet: AttributeSet ? = null) Base class for containers that show HasModals.modals in Dialog s. The concrete implementations returned by the factory methods forAlertContainerScreen and forContainerScreen should cover many specific needs, and where those are too limiting subclasses are simple to create. Parameters ModalRenderingT - the type of the nested renderings to be shown in a dialog window.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-init-/#init","text":"ModalContainer(context: Context , attributeSet: AttributeSet ? = null) Base class for containers that show HasModals.modals in Dialog s. The concrete implementations returned by the factory methods forAlertContainerScreen and forContainerScreen should cover many specific needs, and where those are too limiting subclasses are simple to create.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-init-/#parameters","text":"ModalRenderingT - the type of the nested renderings to be shown in a dialog window.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/build-dialog/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / buildDialog buildDialog protected abstract fun buildDialog(initialModalRendering: ModalRenderingT , viewRegistry: ViewRegistry ): ModalContainer.DialogRef ModalRenderingT Called to create (but not show) a Dialog to render initialModalRendering .","title":"Build dialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/build-dialog/#builddialog","text":"protected abstract fun buildDialog(initialModalRendering: ModalRenderingT , viewRegistry: ViewRegistry ): ModalContainer.DialogRef ModalRenderingT Called to create (but not show) a Dialog to render initialModalRendering .","title":"buildDialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-alert-container-screen/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / forAlertContainerScreen forAlertContainerScreen fun forAlertContainerScreen(@StyleRes dialogThemeResId: Int = 0): ViewBinding AlertContainerScreen * Creates a ViewBinding to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s. Parameters dialogThemeResId - the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context s default alert dialog theme.","title":"For alert container screen"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-alert-container-screen/#foralertcontainerscreen","text":"fun forAlertContainerScreen(@StyleRes dialogThemeResId: Int = 0): ViewBinding AlertContainerScreen * Creates a ViewBinding to show the AlertScreen s of an AlertContainerScreen as Android AlertDialog s.","title":"forAlertContainerScreen"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-alert-container-screen/#parameters","text":"dialogThemeResId - the resource ID of the theme against which to inflate dialogs. Defaults to 0 to use the parent context s default alert dialog theme.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-container-screen/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / forContainerScreen forContainerScreen inline fun reified H : HasModals *, * forContainerScreen(@IdRes id: Int , @StyleRes dialogThemeResId: Int = 0, noinline modalDecorator: ( View ) - View = { it }): ViewBinding H Creates a ViewBinding for modal container screens of type H . Each view created for HasModals.modals will be shown in a Dialog whose window is set to size itself to WRAP_CONTENT (see android.view.Window.setLayout ). Two customization hooks are provided: you can specify a theme to be applied to the dialog window; and/or provide a function to decorate the view to set as the dialog s content . Parameters id - a unique identifier for containers of this type, allowing them to participate view persistence dialogThemeResId - a style resource describing the theme to use for dialog windows. Defaults to 0 to use the default dialog theme. modalDecorator - a function to apply to each modal view created before it is passed to android.app.Dialog.setContentView . Defaults to making no changes.","title":"For container screen"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-container-screen/#forcontainerscreen","text":"inline fun reified H : HasModals *, * forContainerScreen(@IdRes id: Int , @StyleRes dialogThemeResId: Int = 0, noinline modalDecorator: ( View ) - View = { it }): ViewBinding H Creates a ViewBinding for modal container screens of type H . Each view created for HasModals.modals will be shown in a Dialog whose window is set to size itself to WRAP_CONTENT (see android.view.Window.setLayout ). Two customization hooks are provided: you can specify a theme to be applied to the dialog window; and/or provide a function to decorate the view to set as the dialog s content .","title":"forContainerScreen"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/for-container-screen/#parameters","text":"id - a unique identifier for containers of this type, allowing them to participate view persistence dialogThemeResId - a style resource describing the theme to use for dialog windows. Defaults to 0 to use the default dialog theme. modalDecorator - a function to apply to each modal view created before it is passed to android.app.Dialog.setContentView . Defaults to making no changes.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-back-pressed/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / onBackPressed onBackPressed fun onBackPressed(): Boolean Overrides HandlesBack.onBackPressed Returns true if back event was handled, false if someone higher in the chain should.","title":"On back pressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-back-pressed/#onbackpressed","text":"fun onBackPressed(): Boolean Overrides HandlesBack.onBackPressed Returns true if back event was handled, false if someone higher in the chain should.","title":"onBackPressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-restore-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / onRestoreInstanceState onRestoreInstanceState protected open fun onRestoreInstanceState(state: Parcelable ): Unit","title":"On restore instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-restore-instance-state/#onrestoreinstancestate","text":"protected open fun onRestoreInstanceState(state: Parcelable ): Unit","title":"onRestoreInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-save-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / onSaveInstanceState onSaveInstanceState protected open fun onSaveInstanceState(): Parcelable","title":"On save instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/on-save-instance-state/#onsaveinstancestate","text":"protected open fun onSaveInstanceState(): Parcelable","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/registry/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / registry registry protected lateinit var registry: ViewRegistry","title":"Registry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/registry/#registry","text":"protected lateinit var registry: ViewRegistry","title":"registry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/update-dialog/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / updateDialog updateDialog protected abstract fun updateDialog(dialogRef: ModalContainer.DialogRef ModalRenderingT ): Unit","title":"Update dialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/update-dialog/#updatedialog","text":"protected abstract fun updateDialog(dialogRef: ModalContainer.DialogRef ModalRenderingT ): Unit","title":"updateDialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/update/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / update update protected fun update(newScreen: HasModals *, ModalRenderingT ): Unit","title":"Update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/update/#update","text":"protected fun update(newScreen: HasModals *, ModalRenderingT ): Unit","title":"update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef DialogRef protected data class DialogRef ModalRenderingT : Any Parameters extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality. Constructors Name Summary init DialogRef(modalRendering: ModalRenderingT , dialog: Dialog , extra: Any ? = null) Properties Name Summary dialog val dialog: Dialog extra val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality. modalRendering val modalRendering: ModalRenderingT Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#dialogref","text":"protected data class DialogRef ModalRenderingT : Any","title":"DialogRef"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#parameters","text":"extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#constructors","text":"Name Summary init DialogRef(modalRendering: ModalRenderingT , dialog: Dialog , extra: Any ? = null)","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#properties","text":"Name Summary dialog val dialog: Dialog extra val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality. modalRendering val modalRendering: ModalRenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / init init DialogRef(modalRendering: ModalRenderingT , dialog: Dialog , extra: Any ? = null) Parameters extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/-init-/#init","text":"DialogRef(modalRendering: ModalRenderingT , dialog: Dialog , extra: Any ? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/-init-/#parameters","text":"extra - optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/dialog/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / dialog dialog val dialog: Dialog","title":"Dialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/dialog/#dialog","text":"val dialog: Dialog","title":"dialog"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/equals/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/extra/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / extra extra val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"Extra"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/extra/#extra","text":"val extra: Any ? optional hook to allow subclasses to associate extra data with this dialog, e.g. its content view. Not considered for equality.","title":"extra"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/hash-code/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/modal-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / ModalContainer / DialogRef / modalRendering modalRendering val modalRendering: ModalRenderingT","title":"Modal rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-modal-container/-dialog-ref/modal-rendering/#modalrendering","text":"val modalRendering: ModalRenderingT","title":"modalRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/","text":"workflow-ui-android / com.squareup.workflow.ui / ShowRenderingTag ShowRenderingTag @ExperimentalWorkflowUi data class ShowRenderingTag out RenderingT : Any Constructors Name Summary init ShowRenderingTag(showing: RenderingT , showRendering: ViewShowRendering RenderingT ) Properties Name Summary showing val showing: RenderingT showRendering val showRendering: ViewShowRendering RenderingT","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/#showrenderingtag","text":"@ExperimentalWorkflowUi data class ShowRenderingTag out RenderingT : Any","title":"ShowRenderingTag"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/#constructors","text":"Name Summary init ShowRenderingTag(showing: RenderingT , showRendering: ViewShowRendering RenderingT )","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/#properties","text":"Name Summary showing val showing: RenderingT showRendering val showRendering: ViewShowRendering RenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ShowRenderingTag / init init ShowRenderingTag(showing: RenderingT , showRendering: ViewShowRendering RenderingT )","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/-init-/#init","text":"ShowRenderingTag(showing: RenderingT , showRendering: ViewShowRendering RenderingT )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / ShowRenderingTag / showRendering showRendering val showRendering: ViewShowRendering RenderingT","title":"Show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/show-rendering/#showrendering","text":"val showRendering: ViewShowRendering RenderingT","title":"showRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/showing/","text":"workflow-ui-android / com.squareup.workflow.ui / ShowRenderingTag / showing showing val showing: RenderingT","title":"Showing"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-show-rendering-tag/showing/#showing","text":"val showing: RenderingT","title":"showing"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewBinding ViewBinding @ExperimentalWorkflowUi interface ViewBinding RenderingT : Any Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. Sets of bindings are gathered in ViewRegistry instances. Properties Name Summary type abstract val type: KClass RenderingT Functions Name Summary buildView abstract fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering . Inheritors Name Summary Binding class Binding RenderingT : Any : ViewBinding RenderingT BuilderBinding class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Companion companion object Companion : ViewBinding BackStackScreen *","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/#viewbinding","text":"@ExperimentalWorkflowUi interface ViewBinding RenderingT : Any Factory for View instances that can show renderings of type RenderingT . Use LayoutRunner.bind to work with XML layout resources, or BuilderBinding to create views from code. Sets of bindings are gathered in ViewRegistry instances.","title":"ViewBinding"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/#properties","text":"Name Summary type abstract val type: KClass RenderingT","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/#functions","text":"Name Summary buildView abstract fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/#inheritors","text":"Name Summary Binding class Binding RenderingT : Any : ViewBinding RenderingT BuilderBinding class BuilderBinding RenderingT : Any : ViewBinding RenderingT A ViewBinding that allows ViewRegistry.buildView to dispense View s that need to be generated from code. (Use LayoutRunner to work with XML layout resources.) Companion companion object Companion : ViewBinding BackStackScreen *","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/build-view/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewBinding / buildView buildView abstract fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/build-view/#buildview","text":"abstract fun buildView(registry: ViewRegistry , initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ? = null): View Returns a View ready to display initialRendering (and any succeeding values) via View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/type/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewBinding / type type abstract val type: KClass RenderingT","title":"Type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-binding/type/#type","text":"abstract val type: KClass RenderingT","title":"type"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewRegistry ViewRegistry @ExperimentalWorkflowUi class ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. Two concrete ViewBinding implementations are provided: LayoutRunner.Binding , allowing the easy pairing of Android XML layout resources with LayoutRunner s to drive them. BuilderBinding , which can build views from code. Registries can be assembled via concatenation, making it easy to snap together screen sets. For example: 1 2 3 4 5 6 7 8 9 10 val AuthViewBindings = ViewRegistry( AuthorizingLayoutRunner, LoginLayoutRunner, SecondFactorLayoutRunner ) val TicTacToeViewBindings = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) val ApplicationViewBindings = ViewRegistry(ApplicationLayoutRunner) + AuthViewBindings + TicTacToeViewBindings In the above example, note that the companion object s of the various LayoutRunner classes honor a convention of implementing ViewBinding , in aid of this kind of assembly. See the class doc on LayoutRunner for details. Default bindings for the following types are provided, but can be overridden: Named * (Delegates to the registered binding for Named.wrapped .) BackStackScreen * AlertContainerScreen * (Use ModalContainer.forAlertContainerScreen to set a different dialog theme.) Constructors Name Summary init ViewRegistry(vararg bindings: ViewBinding * ) ViewRegistry(vararg registries: ViewRegistry ) Functions Name Summary buildView fun RenderingT : Any buildView(initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ? = null): View Creates a View to display initialRendering , which can be updated via calls to View.showRendering . fun RenderingT : Any buildView(initialRendering: RenderingT , container: ViewGroup ): View Creates a View to display initialRendering , and which can handle calls to View.showRendering . plus operator fun RenderingT : Any plus(binding: ViewBinding RenderingT ): ViewRegistry operator fun plus(registry: ViewRegistry ): ViewRegistry","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/#viewregistry","text":"@ExperimentalWorkflowUi class ViewRegistry A collection of ViewBinding s that can be used to display the stream of renderings from a workflow tree. Two concrete ViewBinding implementations are provided: LayoutRunner.Binding , allowing the easy pairing of Android XML layout resources with LayoutRunner s to drive them. BuilderBinding , which can build views from code. Registries can be assembled via concatenation, making it easy to snap together screen sets. For example: 1 2 3 4 5 6 7 8 9 10 val AuthViewBindings = ViewRegistry( AuthorizingLayoutRunner, LoginLayoutRunner, SecondFactorLayoutRunner ) val TicTacToeViewBindings = ViewRegistry( NewGameLayoutRunner, GamePlayLayoutRunner, GameOverLayoutRunner ) val ApplicationViewBindings = ViewRegistry(ApplicationLayoutRunner) + AuthViewBindings + TicTacToeViewBindings In the above example, note that the companion object s of the various LayoutRunner classes honor a convention of implementing ViewBinding , in aid of this kind of assembly. See the class doc on LayoutRunner for details. Default bindings for the following types are provided, but can be overridden: Named * (Delegates to the registered binding for Named.wrapped .) BackStackScreen * AlertContainerScreen * (Use ModalContainer.forAlertContainerScreen to set a different dialog theme.)","title":"ViewRegistry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/#constructors","text":"Name Summary init ViewRegistry(vararg bindings: ViewBinding * ) ViewRegistry(vararg registries: ViewRegistry )","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/#functions","text":"Name Summary buildView fun RenderingT : Any buildView(initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ? = null): View Creates a View to display initialRendering , which can be updated via calls to View.showRendering . fun RenderingT : Any buildView(initialRendering: RenderingT , container: ViewGroup ): View Creates a View to display initialRendering , and which can handle calls to View.showRendering . plus operator fun RenderingT : Any plus(binding: ViewBinding RenderingT ): ViewRegistry operator fun plus(registry: ViewRegistry ): ViewRegistry","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewRegistry / init init ViewRegistry(vararg bindings: ViewBinding * ) ViewRegistry(vararg registries: ViewRegistry )","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/-init-/#init","text":"ViewRegistry(vararg bindings: ViewBinding * ) ViewRegistry(vararg registries: ViewRegistry )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/build-view/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewRegistry / buildView buildView fun RenderingT : Any buildView(initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ? = null): View Creates a View to display initialRendering , which can be updated via calls to View.showRendering . fun RenderingT : Any buildView(initialRendering: RenderingT , container: ViewGroup ): View Creates a View to display initialRendering , and which can handle calls to View.showRendering .","title":"Build view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/build-view/#buildview","text":"fun RenderingT : Any buildView(initialRendering: RenderingT , contextForNewView: Context , container: ViewGroup ? = null): View Creates a View to display initialRendering , which can be updated via calls to View.showRendering . fun RenderingT : Any buildView(initialRendering: RenderingT , container: ViewGroup ): View Creates a View to display initialRendering , and which can handle calls to View.showRendering .","title":"buildView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/plus/","text":"workflow-ui-android / com.squareup.workflow.ui / ViewRegistry / plus plus operator fun RenderingT : Any plus(binding: ViewBinding RenderingT ): ViewRegistry operator fun plus(registry: ViewRegistry ): ViewRegistry","title":"Plus"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-view-registry/plus/#plus","text":"operator fun RenderingT : Any plus(binding: ViewBinding RenderingT ): ViewRegistry operator fun plus(registry: ViewRegistry ): ViewRegistry","title":"plus"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment WorkflowFragment @ExperimentalWorkflowUi abstract class WorkflowFragment InputT, OutputT : Any : Fragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . For a workflow with no inputs, or a static configuration, that s as simple as: 1 2 3 4 5 6 7 8 9 class HelloWorkflowFragment : WorkflowFragment Unit, Unit () { override fun onCreateWorkflow(): Config Unit, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), input = Unit ) } } A fragment to run a workflow whose configuration may need to be updated could provide a method like this: class HelloWorkflowFragment : WorkflowFragment HelloInput, Unit () { private val inputs = BehaviorSubject.createDefault(HelloInput.Fnord) 1 2 3 4 5 6 7 8 9 fun input(input: HelloInput) = inputs.onNext(input) override fun onCreateWorkflow(): Config HelloInput, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), inputs = inputs ) } } Constructors Name Summary init WorkflowFragment() A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . Properties Name Summary runner val runner: WorkflowRunner OutputT Provides subclasses with access to the products of the running Workflow . Safe to call after onActivityCreated . Functions Name Summary onActivityCreated open fun onActivityCreated(savedInstanceState: Bundle ?): Unit onBackPressed fun onBackPressed(): Boolean If your workflow needs to manage the back button, override android.app.Activity.onBackPressed and call this method, and have its views or LayoutRunner s use HandlesBack . onCreateView fun onCreateView(inflater: LayoutInflater , container: ViewGroup ?, savedInstanceState: Bundle ?): View ? onCreateWorkflow abstract fun onCreateWorkflow(): WorkflowRunner.Config InputT , OutputT Called from onActivityCreated , so it should be safe for implementations to call getActivity . onSaveInstanceState open fun onSaveInstanceState(outState: Bundle ): Unit","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/#workflowfragment","text":"@ExperimentalWorkflowUi abstract class WorkflowFragment InputT, OutputT : Any : Fragment A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . For a workflow with no inputs, or a static configuration, that s as simple as: 1 2 3 4 5 6 7 8 9 class HelloWorkflowFragment : WorkflowFragment Unit, Unit () { override fun onCreateWorkflow(): Config Unit, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), input = Unit ) } } A fragment to run a workflow whose configuration may need to be updated could provide a method like this: class HelloWorkflowFragment : WorkflowFragment HelloInput, Unit () { private val inputs = BehaviorSubject.createDefault(HelloInput.Fnord) 1 2 3 4 5 6 7 8 9 fun input(input: HelloInput) = inputs.onNext(input) override fun onCreateWorkflow(): Config HelloInput, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), inputs = inputs ) } }","title":"WorkflowFragment"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/#constructors","text":"Name Summary init WorkflowFragment() A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs .","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/#properties","text":"Name Summary runner val runner: WorkflowRunner OutputT Provides subclasses with access to the products of the running Workflow . Safe to call after onActivityCreated .","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/#functions","text":"Name Summary onActivityCreated open fun onActivityCreated(savedInstanceState: Bundle ?): Unit onBackPressed fun onBackPressed(): Boolean If your workflow needs to manage the back button, override android.app.Activity.onBackPressed and call this method, and have its views or LayoutRunner s use HandlesBack . onCreateView fun onCreateView(inflater: LayoutInflater , container: ViewGroup ?, savedInstanceState: Bundle ?): View ? onCreateWorkflow abstract fun onCreateWorkflow(): WorkflowRunner.Config InputT , OutputT Called from onActivityCreated , so it should be safe for implementations to call getActivity . onSaveInstanceState open fun onSaveInstanceState(outState: Bundle ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / init init WorkflowFragment() A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . For a workflow with no inputs, or a static configuration, that s as simple as: 1 2 3 4 5 6 7 8 9 class HelloWorkflowFragment : WorkflowFragment Unit, Unit () { override fun onCreateWorkflow(): Config Unit, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), input = Unit ) } } A fragment to run a workflow whose configuration may need to be updated could provide a method like this: class HelloWorkflowFragment : WorkflowFragment HelloInput, Unit () { private val inputs = BehaviorSubject.createDefault(HelloInput.Fnord) 1 2 3 4 5 6 7 8 9 fun input(input: HelloInput) = inputs.onNext(input) override fun onCreateWorkflow(): Config HelloInput, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), inputs = inputs ) } }","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/-init-/#init","text":"WorkflowFragment() A Fragment that can run a workflow. Subclasses implement onCreateWorkflow to configure themselves with a Workflow , ViewRegistry and inputs . For a workflow with no inputs, or a static configuration, that s as simple as: 1 2 3 4 5 6 7 8 9 class HelloWorkflowFragment : WorkflowFragment Unit, Unit () { override fun onCreateWorkflow(): Config Unit, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), input = Unit ) } } A fragment to run a workflow whose configuration may need to be updated could provide a method like this: class HelloWorkflowFragment : WorkflowFragment HelloInput, Unit () { private val inputs = BehaviorSubject.createDefault(HelloInput.Fnord) 1 2 3 4 5 6 7 8 9 fun input(input: HelloInput) = inputs.onNext(input) override fun onCreateWorkflow(): Config HelloInput, Unit { return Config( workflow = HelloWorkflow, viewRegistry = ViewRegistry(HelloFragmentLayoutRunner), inputs = inputs ) } }","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-activity-created/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / onActivityCreated onActivityCreated open fun onActivityCreated(savedInstanceState: Bundle ?): Unit","title":"On activity created"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-activity-created/#onactivitycreated","text":"open fun onActivityCreated(savedInstanceState: Bundle ?): Unit","title":"onActivityCreated"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-back-pressed/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / onBackPressed onBackPressed fun onBackPressed(): Boolean If your workflow needs to manage the back button, override android.app.Activity.onBackPressed and call this method, and have its views or LayoutRunner s use HandlesBack . e.g.: 1 2 3 4 5 override fun onBackPressed() { val workflowFragment = supportFragmentManager.findFragmentByTag(MY_WORKFLOW) as? WorkflowFragment *, * if (workflowFragment?.onBackPressed() != true) super.onBackPressed() }","title":"On back pressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-back-pressed/#onbackpressed","text":"fun onBackPressed(): Boolean If your workflow needs to manage the back button, override android.app.Activity.onBackPressed and call this method, and have its views or LayoutRunner s use HandlesBack . e.g.: 1 2 3 4 5 override fun onBackPressed() { val workflowFragment = supportFragmentManager.findFragmentByTag(MY_WORKFLOW) as? WorkflowFragment *, * if (workflowFragment?.onBackPressed() != true) super.onBackPressed() }","title":"onBackPressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-create-view/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / onCreateView onCreateView fun onCreateView(inflater: LayoutInflater , container: ViewGroup ?, savedInstanceState: Bundle ?): View ?","title":"On create view"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-create-view/#oncreateview","text":"fun onCreateView(inflater: LayoutInflater , container: ViewGroup ?, savedInstanceState: Bundle ?): View ?","title":"onCreateView"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-create-workflow/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / onCreateWorkflow onCreateWorkflow protected abstract fun onCreateWorkflow(): WorkflowRunner.Config InputT , OutputT Called from onActivityCreated , so it should be safe for implementations to call getActivity .","title":"On create workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-create-workflow/#oncreateworkflow","text":"protected abstract fun onCreateWorkflow(): WorkflowRunner.Config InputT , OutputT Called from onActivityCreated , so it should be safe for implementations to call getActivity .","title":"onCreateWorkflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-save-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / onSaveInstanceState onSaveInstanceState open fun onSaveInstanceState(outState: Bundle ): Unit","title":"On save instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/on-save-instance-state/#onsaveinstancestate","text":"open fun onSaveInstanceState(outState: Bundle ): Unit","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/runner/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowFragment / runner runner protected val runner: WorkflowRunner OutputT Provides subclasses with access to the products of the running Workflow . Safe to call after onActivityCreated .","title":"Runner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-fragment/runner/#runner","text":"protected val runner: WorkflowRunner OutputT Provides subclasses with access to the products of the running Workflow . Safe to call after onActivityCreated .","title":"runner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout WorkflowLayout @ExperimentalWorkflowUi class WorkflowLayout : FrameLayout , HandlesBack A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. Constructors Name Summary init WorkflowLayout(context: Context , attributeSet: AttributeSet ? = null) A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly. Functions Name Summary onBackPressed fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should. onRestoreInstanceState fun onRestoreInstanceState(state: Parcelable ?): Unit onSaveInstanceState fun onSaveInstanceState(): Parcelable ? start fun start(renderings: Observable out Any , registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. Extension Properties Name Summary showRenderingTag val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set. Extension Functions Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . canShowRendering fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . setBackHandler fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#workflowlayout","text":"@ExperimentalWorkflowUi class WorkflowLayout : FrameLayout , HandlesBack A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":"WorkflowLayout"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#constructors","text":"Name Summary init WorkflowLayout(context: Context , attributeSet: AttributeSet ? = null) A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#functions","text":"Name Summary onBackPressed fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should. onRestoreInstanceState fun onRestoreInstanceState(state: Parcelable ?): Unit onSaveInstanceState fun onSaveInstanceState(): Parcelable ? start fun start(renderings: Observable out Any , registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one.","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#extension-properties","text":"Name Summary showRenderingTag val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set.","title":"Extension Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/#extension-functions","text":"Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . canShowRendering fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . setBackHandler fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering .","title":"Extension Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout / init init WorkflowLayout(context: Context , attributeSet: AttributeSet ? = null) A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/-init-/#init","text":"WorkflowLayout(context: Context , attributeSet: AttributeSet ? = null) A view that can be driven by a WorkflowRunner . In most cases you ll use Activity.setContentWorkflow or subclass WorkflowFragment rather than manage this class directly.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-back-pressed/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout / onBackPressed onBackPressed fun onBackPressed(): Boolean Overrides HandlesBack.onBackPressed Returns true if back event was handled, false if someone higher in the chain should.","title":"On back pressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-back-pressed/#onbackpressed","text":"fun onBackPressed(): Boolean Overrides HandlesBack.onBackPressed Returns true if back event was handled, false if someone higher in the chain should.","title":"onBackPressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-restore-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout / onRestoreInstanceState onRestoreInstanceState protected fun onRestoreInstanceState(state: Parcelable ?): Unit","title":"On restore instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-restore-instance-state/#onrestoreinstancestate","text":"protected fun onRestoreInstanceState(state: Parcelable ?): Unit","title":"onRestoreInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-save-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout / onSaveInstanceState onSaveInstanceState protected fun onSaveInstanceState(): Parcelable ?","title":"On save instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/on-save-instance-state/#onsaveinstancestate","text":"protected fun onSaveInstanceState(): Parcelable ?","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/start/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowLayout / start start fun start(renderings: Observable out Any , registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. Views created this way may make recursive calls to ViewRegistry.buildView to make children of their own to handle nested renderings.","title":"Start"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-layout/start/#start","text":"fun start(renderings: Observable out Any , registry: ViewRegistry ): Unit Subscribes to renderings , and uses registry to build a new view each time a new type of rendering is received, making that view the only child of this one. Views created this way may make recursive calls to ViewRegistry.buildView to make children of their own to handle nested renderings.","title":"start"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner WorkflowRunner @ExperimentalWorkflowUi interface WorkflowRunner out OutputT : Any Uses a Workflow and a ViewRegistry to drive a WorkflowLayout . It is simplest to use Activity.setContentWorkflow or subclass WorkflowFragment rather than instantiate a WorkflowRunner directly. Types Name Summary Config class Config InputT, OutputT : Any Properties Name Summary renderings abstract val renderings: Observable out Any A stream of the rendering values emitted by the running Workflow . result abstract val result: Maybe out OutputT Provides the first (and only) OutputT value emitted by the workflow, or nothing if it is canceled before emitting. viewRegistry abstract val viewRegistry: ViewRegistry Functions Name Summary onSaveInstanceState abstract fun onSaveInstanceState(outState: Bundle ): Unit To be called from FragmentActivity.onSaveInstanceState or Fragment.onSaveInstanceState . Companion Object Functions Name Summary Config fun OutputT : Any Config(workflow: Workflow Unit , OutputT , Any , viewRegistry: ViewRegistry , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate): WorkflowRunner.Config Unit , OutputT startWorkflow fun InputT, OutputT : Any startWorkflow(activity: FragmentActivity, savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given activity . fun InputT, OutputT : Any startWorkflow(fragment: Fragment, savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given fragment .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/#workflowrunner","text":"@ExperimentalWorkflowUi interface WorkflowRunner out OutputT : Any Uses a Workflow and a ViewRegistry to drive a WorkflowLayout . It is simplest to use Activity.setContentWorkflow or subclass WorkflowFragment rather than instantiate a WorkflowRunner directly.","title":"WorkflowRunner"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/#types","text":"Name Summary Config class Config InputT, OutputT : Any","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/#properties","text":"Name Summary renderings abstract val renderings: Observable out Any A stream of the rendering values emitted by the running Workflow . result abstract val result: Maybe out OutputT Provides the first (and only) OutputT value emitted by the workflow, or nothing if it is canceled before emitting. viewRegistry abstract val viewRegistry: ViewRegistry","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/#functions","text":"Name Summary onSaveInstanceState abstract fun onSaveInstanceState(outState: Bundle ): Unit To be called from FragmentActivity.onSaveInstanceState or Fragment.onSaveInstanceState .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/#companion-object-functions","text":"Name Summary Config fun OutputT : Any Config(workflow: Workflow Unit , OutputT , Any , viewRegistry: ViewRegistry , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate): WorkflowRunner.Config Unit , OutputT startWorkflow fun InputT, OutputT : Any startWorkflow(activity: FragmentActivity, savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given activity . fun InputT, OutputT : Any startWorkflow(fragment: Fragment, savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given fragment .","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config Config fun OutputT : Any Config(workflow: Workflow Unit , OutputT , Any , viewRegistry: ViewRegistry , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate): WorkflowRunner.Config Unit , OutputT","title":" config"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#config","text":"fun OutputT : Any Config(workflow: Workflow Unit , OutputT , Any , viewRegistry: ViewRegistry , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate): WorkflowRunner.Config Unit , OutputT","title":"Config"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/on-save-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / onSaveInstanceState onSaveInstanceState abstract fun onSaveInstanceState(outState: Bundle ): Unit To be called from FragmentActivity.onSaveInstanceState or Fragment.onSaveInstanceState .","title":"On save instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/on-save-instance-state/#onsaveinstancestate","text":"abstract fun onSaveInstanceState(outState: Bundle ): Unit To be called from FragmentActivity.onSaveInstanceState or Fragment.onSaveInstanceState .","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/renderings/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / renderings renderings abstract val renderings: Observable out Any A stream of the rendering values emitted by the running Workflow .","title":"Renderings"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/renderings/#renderings","text":"abstract val renderings: Observable out Any A stream of the rendering values emitted by the running Workflow .","title":"renderings"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/result/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / result result abstract val result: Maybe out OutputT Provides the first (and only) OutputT value emitted by the workflow, or nothing if it is canceled before emitting. The output of the root workflow is treated as a result code, handy for use as a sign that the host Activity or Fragment should be finished. Thus, once a value is emitted the workflow is ended its output value is reported through this field.","title":"Result"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/result/#result","text":"abstract val result: Maybe out OutputT Provides the first (and only) OutputT value emitted by the workflow, or nothing if it is canceled before emitting. The output of the root workflow is treated as a result code, handy for use as a sign that the host Activity or Fragment should be finished. Thus, once a value is emitted the workflow is ended its output value is reported through this field.","title":"result"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/start-workflow/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / startWorkflow startWorkflow fun InputT, OutputT : Any startWorkflow(activity: FragmentActivity, savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given activity . It s probably more convenient to use FragmentActivity.setContentWorkflow rather than calling this method directly. Parameters configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread. fun InputT, OutputT : Any startWorkflow(fragment: Fragment, savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given fragment . It s probably more convenient to subclass WorkflowFragment rather than calling this method directly. Parameters configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread.","title":"Start workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/start-workflow/#startworkflow","text":"fun InputT, OutputT : Any startWorkflow(activity: FragmentActivity, savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given activity . It s probably more convenient to use FragmentActivity.setContentWorkflow rather than calling this method directly.","title":"startWorkflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/start-workflow/#parameters","text":"configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread. fun InputT, OutputT : Any startWorkflow(fragment: Fragment, savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT ): WorkflowRunner OutputT Returns an instance of WorkflowRunner tied to the Lifecycle of the given fragment . It s probably more convenient to subclass WorkflowFragment rather than calling this method directly.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/start-workflow/#parameters_1","text":"configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/view-registry/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / viewRegistry viewRegistry abstract val viewRegistry: ViewRegistry","title":"View registry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/view-registry/#viewregistry","text":"abstract val viewRegistry: ViewRegistry","title":"viewRegistry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config Config class Config InputT, OutputT : Any Constructors Name Summary init Config(workflow: Workflow InputT , OutputT , Any , viewRegistry: ViewRegistry , input: InputT , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate) Config(workflow: Workflow InputT , OutputT , Any , viewRegistry: ViewRegistry , inputs: Flow InputT , dispatcher: CoroutineDispatcher) Properties Name Summary dispatcher val dispatcher: CoroutineDispatcher inputs val inputs: Flow InputT viewRegistry val viewRegistry: ViewRegistry workflow val workflow: Workflow InputT , OutputT , Any","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#config","text":"class Config InputT, OutputT : Any","title":"Config"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#constructors","text":"Name Summary init Config(workflow: Workflow InputT , OutputT , Any , viewRegistry: ViewRegistry , input: InputT , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate) Config(workflow: Workflow InputT , OutputT , Any , viewRegistry: ViewRegistry , inputs: Flow InputT , dispatcher: CoroutineDispatcher)","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/#properties","text":"Name Summary dispatcher val dispatcher: CoroutineDispatcher inputs val inputs: Flow InputT viewRegistry val viewRegistry: ViewRegistry workflow val workflow: Workflow InputT , OutputT , Any","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / init init Config(workflow: Workflow InputT , OutputT , Any , viewRegistry: ViewRegistry , input: InputT , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate) Config(workflow: Workflow InputT , OutputT , Any , viewRegistry: ViewRegistry , inputs: Flow InputT , dispatcher: CoroutineDispatcher)","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/-init-/#init","text":"Config(workflow: Workflow InputT , OutputT , Any , viewRegistry: ViewRegistry , input: InputT , dispatcher: CoroutineDispatcher = Dispatchers.Main.immediate) Config(workflow: Workflow InputT , OutputT , Any , viewRegistry: ViewRegistry , inputs: Flow InputT , dispatcher: CoroutineDispatcher)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/dispatcher/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / dispatcher dispatcher val dispatcher: CoroutineDispatcher","title":"Dispatcher"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher","title":"dispatcher"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/inputs/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / inputs inputs val inputs: Flow InputT","title":"Inputs"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/inputs/#inputs","text":"val inputs: Flow InputT","title":"inputs"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/view-registry/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / viewRegistry viewRegistry val viewRegistry: ViewRegistry","title":"View registry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/view-registry/#viewregistry","text":"val viewRegistry: ViewRegistry","title":"viewRegistry"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/workflow/","text":"workflow-ui-android / com.squareup.workflow.ui / WorkflowRunner / Config / workflow workflow val workflow: Workflow InputT , OutputT , Any","title":"Workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/-workflow-runner/-config/workflow/#workflow","text":"val workflow: Workflow InputT , OutputT , Any","title":"workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View Extensions for android.view.View Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . canShowRendering fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . setBackHandler fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering . showRenderingTag val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/#extensions-for-androidviewview","text":"Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . canShowRendering fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . setBackHandler fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering . showRenderingTag val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set.","title":"Extensions for android.view.View"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/bind-show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / bindShowRendering bindShowRendering @ExperimentalWorkflowUi fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . Intended for use by implementations of ViewBinding.buildView .","title":"Bind show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/bind-show-rendering/#bindshowrendering","text":"@ExperimentalWorkflowUi fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . Intended for use by implementations of ViewBinding.buildView .","title":"bindShowRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/can-show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / canShowRendering canShowRendering @ExperimentalWorkflowUi fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . Returns false if bindShowRendering has not been called, so it is always safe to call this method. Otherwise returns the compatibility of the new rendering and the current one.","title":"Can show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/can-show-rendering/#canshowrendering","text":"@ExperimentalWorkflowUi fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . Returns false if bindShowRendering has not been called, so it is always safe to call this method. Otherwise returns the compatibility of the new rendering and the current one.","title":"canShowRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/set-back-handler/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / setBackHandler setBackHandler fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. Outside of HandlesBack.Helper because when it s there, IntelliJ can t find it for auto-import for some reason.","title":"Set back handler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/set-back-handler/#setbackhandler","text":"fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. Outside of HandlesBack.Helper because when it s there, IntelliJ can t find it for auto-import for some reason.","title":"setBackHandler"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/show-rendering-tag/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / showRenderingTag showRenderingTag @ExperimentalWorkflowUi val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set.","title":"Show rendering tag"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/show-rendering-tag/#showrenderingtag","text":"@ExperimentalWorkflowUi val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set.","title":"showRenderingTag"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/show-rendering/","text":"workflow-ui-android / com.squareup.workflow.ui / android.view.View / showRendering showRendering @ExperimentalWorkflowUi fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering .","title":"Show rendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/android.view.-view/show-rendering/#showrendering","text":"@ExperimentalWorkflowUi fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering .","title":"showRendering"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/","text":"workflow-ui-android / com.squareup.workflow.ui / androidx.fragment.app.FragmentActivity Extensions for androidx.fragment.app.FragmentActivity Name Summary setContentWorkflow fun InputT, OutputT : Any FragmentActivity.setContentWorkflow(savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT , onResult: ( OutputT ) - Unit ): WorkflowRunner OutputT Call this method from FragmentActivity.onCreate , instead of FragmentActivity.setContentView . It creates a WorkflowRunner for this activity, if one doesn t already exist, and sets a view driven by that model as the content view. fun InputT FragmentActivity.setContentWorkflow(savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , Nothing ): WorkflowRunner Nothing workflowOnBackPressed fun FragmentActivity.workflowOnBackPressed(): Boolean If your workflow needs to manage the back button, override FragmentActivity.onBackPressed and call this method, and have its views or LayoutRunner s use HandlesBack .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/#extensions-for-androidxfragmentappfragmentactivity","text":"Name Summary setContentWorkflow fun InputT, OutputT : Any FragmentActivity.setContentWorkflow(savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT , onResult: ( OutputT ) - Unit ): WorkflowRunner OutputT Call this method from FragmentActivity.onCreate , instead of FragmentActivity.setContentView . It creates a WorkflowRunner for this activity, if one doesn t already exist, and sets a view driven by that model as the content view. fun InputT FragmentActivity.setContentWorkflow(savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , Nothing ): WorkflowRunner Nothing workflowOnBackPressed fun FragmentActivity.workflowOnBackPressed(): Boolean If your workflow needs to manage the back button, override FragmentActivity.onBackPressed and call this method, and have its views or LayoutRunner s use HandlesBack .","title":"Extensions for androidx.fragment.app.FragmentActivity"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/set-content-workflow/","text":"workflow-ui-android / com.squareup.workflow.ui / androidx.fragment.app.FragmentActivity / setContentWorkflow setContentWorkflow @ExperimentalWorkflowUi fun InputT, OutputT : Any FragmentActivity.setContentWorkflow(savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT , onResult: ( OutputT ) - Unit ): WorkflowRunner OutputT Call this method from FragmentActivity.onCreate , instead of FragmentActivity.setContentView . It creates a WorkflowRunner for this activity, if one doesn t already exist, and sets a view driven by that model as the content view. Parameters configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread. onResult - function called with the first (and only) output emitted by the root workflow, handy for passing to FragmentActivity.setResult . The workflow is ended once it emits any values, so this is also a good place from which to call FragmentActivity.finish . Called only while the activity is active, and always called from the UI thread. @ExperimentalWorkflowUi fun InputT FragmentActivity.setContentWorkflow(savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , Nothing ): WorkflowRunner Nothing","title":"Set content workflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/set-content-workflow/#setcontentworkflow","text":"@ExperimentalWorkflowUi fun InputT, OutputT : Any FragmentActivity.setContentWorkflow(savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , OutputT , onResult: ( OutputT ) - Unit ): WorkflowRunner OutputT Call this method from FragmentActivity.onCreate , instead of FragmentActivity.setContentView . It creates a WorkflowRunner for this activity, if one doesn t already exist, and sets a view driven by that model as the content view.","title":"setContentWorkflow"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/set-content-workflow/#parameters","text":"configure - function defining the root workflow and its environment. Called only once per lifecycle , and always called from the UI thread. onResult - function called with the first (and only) output emitted by the root workflow, handy for passing to FragmentActivity.setResult . The workflow is ended once it emits any values, so this is also a good place from which to call FragmentActivity.finish . Called only while the activity is active, and always called from the UI thread. @ExperimentalWorkflowUi fun InputT FragmentActivity.setContentWorkflow(savedInstanceState: Bundle ?, configure: () - WorkflowRunner.Config InputT , Nothing ): WorkflowRunner Nothing","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/workflow-on-back-pressed/","text":"workflow-ui-android / com.squareup.workflow.ui / androidx.fragment.app.FragmentActivity / workflowOnBackPressed workflowOnBackPressed @ExperimentalWorkflowUi @CheckResult fun FragmentActivity.workflowOnBackPressed(): Boolean If your workflow needs to manage the back button, override FragmentActivity.onBackPressed and call this method, and have its views or LayoutRunner s use HandlesBack . e.g.: 1 2 3 override fun onBackPressed() { if (!workflowOnBackPressed()) super.onBackPressed() } Only for use by activities driven via FragmentActivity.setContentWorkflow . See Also WorkflowFragment.onBackPressed","title":"Workflow on back pressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui/androidx.fragment.app.-fragment-activity/workflow-on-back-pressed/#workflowonbackpressed","text":"@ExperimentalWorkflowUi @CheckResult fun FragmentActivity.workflowOnBackPressed(): Boolean If your workflow needs to manage the back button, override FragmentActivity.onBackPressed and call this method, and have its views or LayoutRunner s use HandlesBack . e.g.: 1 2 3 override fun onBackPressed() { if (!workflowOnBackPressed()) super.onBackPressed() } Only for use by activities driven via FragmentActivity.setContentWorkflow . See Also WorkflowFragment.onBackPressed","title":"workflowOnBackPressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack Package com.squareup.workflow.ui.backstack Types Name Summary BackStackContainer open class BackStackContainer : FrameLayout , HandlesBack A container view that can display a stream of BackStackScreen instances. ViewStateCache class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets.","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/#package-comsquareupworkflowuibackstack","text":"","title":"Package com.squareup.workflow.ui.backstack"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/#types","text":"Name Summary BackStackContainer open class BackStackContainer : FrameLayout , HandlesBack A container view that can display a stream of BackStackScreen instances. ViewStateCache class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets.","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer BackStackContainer @ExperimentalWorkflowUi open class BackStackContainer : FrameLayout , HandlesBack A container view that can display a stream of BackStackScreen instances. This view is back button friendly it implements HandlesBack , delegating to displayed views that implement that interface themselves. Types Name Summary Companion companion object Companion : ViewBinding BackStackScreen * Constructors Name Summary init BackStackContainer(context: Context )``BackStackContainer(context: Context , attributeSet: AttributeSet ?) A container view that can display a stream of BackStackScreen instances. Functions Name Summary onBackPressed open fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should. onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable ): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable performTransition open fun performTransition(oldViewMaybe: View ?, newView: View , popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named BackStackScreen * . Extension Properties Name Summary showRenderingTag val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set. Extension Functions Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . canShowRendering fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . setBackHandler fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering .","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#backstackcontainer","text":"@ExperimentalWorkflowUi open class BackStackContainer : FrameLayout , HandlesBack A container view that can display a stream of BackStackScreen instances. This view is back button friendly it implements HandlesBack , delegating to displayed views that implement that interface themselves.","title":"BackStackContainer"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#types","text":"Name Summary Companion companion object Companion : ViewBinding BackStackScreen *","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#constructors","text":"Name Summary init BackStackContainer(context: Context )``BackStackContainer(context: Context , attributeSet: AttributeSet ?) A container view that can display a stream of BackStackScreen instances.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#functions","text":"Name Summary onBackPressed open fun onBackPressed(): Boolean Returns true if back event was handled, false if someone higher in the chain should. onRestoreInstanceState open fun onRestoreInstanceState(state: Parcelable ): Unit onSaveInstanceState open fun onSaveInstanceState(): Parcelable performTransition open fun performTransition(oldViewMaybe: View ?, newView: View , popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named BackStackScreen * .","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#extension-properties","text":"Name Summary showRenderingTag val View .showRenderingTag: ShowRenderingTag * ? Returns the ShowRenderingTag established by the last call to View.bindShowRendering , or null if none has been set.","title":"Extension Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/#extension-functions","text":"Name Summary bindShowRendering fun RenderingT : Any View .bindShowRendering(initialRendering: RenderingT , showRendering: ViewShowRendering RenderingT ): Unit Establishes showRendering as the implementation of View.showRendering for the receiver, possibly replacing the existing one. Calls showRendering to display initialRendering . canShowRendering fun View .canShowRendering(rendering: Any ): Boolean True if this view is able to show rendering . setBackHandler fun View .setBackHandler(handler: () - Unit ): Unit Sets a handler that always consumes the back event. Convenient for use with method references. showRendering fun RenderingT : Any View .showRendering(rendering: RenderingT ): Unit Shows rendering in a view that has been initialized by bindShowRendering .","title":"Extension Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/-companion/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / Companion Companion companion object Companion : ViewBinding BackStackScreen *","title":" companion"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/-companion/#companion","text":"companion object Companion : ViewBinding BackStackScreen *","title":"Companion"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / init init BackStackContainer(context: Context )``BackStackContainer(context: Context , attributeSet: AttributeSet ?) A container view that can display a stream of BackStackScreen instances. This view is back button friendly it implements HandlesBack , delegating to displayed views that implement that interface themselves.","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/-init-/#init","text":"BackStackContainer(context: Context )``BackStackContainer(context: Context , attributeSet: AttributeSet ?) A container view that can display a stream of BackStackScreen instances. This view is back button friendly it implements HandlesBack , delegating to displayed views that implement that interface themselves.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-back-pressed/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / onBackPressed onBackPressed open fun onBackPressed(): Boolean Overrides HandlesBack.onBackPressed Returns true if back event was handled, false if someone higher in the chain should.","title":"On back pressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-back-pressed/#onbackpressed","text":"open fun onBackPressed(): Boolean Overrides HandlesBack.onBackPressed Returns true if back event was handled, false if someone higher in the chain should.","title":"onBackPressed"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-restore-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / onRestoreInstanceState onRestoreInstanceState protected open fun onRestoreInstanceState(state: Parcelable ): Unit","title":"On restore instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-restore-instance-state/#onrestoreinstancestate","text":"protected open fun onRestoreInstanceState(state: Parcelable ): Unit","title":"onRestoreInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-save-instance-state/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / onSaveInstanceState onSaveInstanceState protected open fun onSaveInstanceState(): Parcelable","title":"On save instance state"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/on-save-instance-state/#onsaveinstancestate","text":"protected open fun onSaveInstanceState(): Parcelable","title":"onSaveInstanceState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/perform-transition/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / BackStackContainer / performTransition performTransition protected open fun performTransition(oldViewMaybe: View ?, newView: View , popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named BackStackScreen * . Parameters oldViewMaybe - the outgoing view, or null if this is the initial rendering. newView - the view that should replace oldViewMaybe (if it exists), and become this view s only child popped - true if we should give the appearance of popping back to a previous rendering, false if a new rendering is being pushed . Should be ignored if oldViewMaybe is null.","title":"Perform transition"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/perform-transition/#performtransition","text":"protected open fun performTransition(oldViewMaybe: View ?, newView: View , popped: Boolean ): Unit Called from View.showRendering to swap between views. Subclasses can override to customize visual effects. There is no need to call super. Note that views are showing renderings of type Named BackStackScreen * .","title":"performTransition"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-back-stack-container/perform-transition/#parameters","text":"oldViewMaybe - the outgoing view, or null if this is the initial rendering. newView - the view that should replace oldViewMaybe (if it exists), and become this view s only child popped - true if we should give the appearance of popping back to a previous rendering, false if a new rendering is being pushed . Should be ignored if oldViewMaybe is null.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache ViewStateCache @ExperimentalWorkflowUi class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets. This class implements Parcelable so that it can be preserved from a container view s own View.saveHierarchyState method. A simple container can return SavedState from that method rather than creating its own persistence class. Types Name Summary CREATOR companion object CREATOR : Creator ViewStateCache SavedState class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. Constructors Name Summary init ViewStateCache() Functions Name Summary describeContents fun describeContents(): Int prune fun prune(retaining: Collection Named * ): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped. restore fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view s View.onRestoreInstanceState . update fun update(retainedRenderings: Collection Named * , oldViewMaybe: View ?, newView: View ): Boolean writeToParcel fun writeToParcel(parcel: Parcel , flags: Int ): Unit Companion Object Functions Name Summary createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#viewstatecache","text":"@ExperimentalWorkflowUi class ViewStateCache : Parcelable Handles persistence chores for container views that manage a set of Named renderings, showing a view for one at a time think back stacks or tab sets. This class implements Parcelable so that it can be preserved from a container view s own View.saveHierarchyState method. A simple container can return SavedState from that method rather than creating its own persistence class.","title":"ViewStateCache"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#types","text":"Name Summary CREATOR companion object CREATOR : Creator ViewStateCache SavedState class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save.","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#constructors","text":"Name Summary init ViewStateCache()","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#functions","text":"Name Summary describeContents fun describeContents(): Int prune fun prune(retaining: Collection Named * ): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped. restore fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view s View.onRestoreInstanceState . update fun update(retainedRenderings: Collection Named * , oldViewMaybe: View ?, newView: View ): Boolean writeToParcel fun writeToParcel(parcel: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / init init ViewStateCache()","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-init-/#init","text":"ViewStateCache()","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/create-from-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / createFromParcel createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache","title":"Create from parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/create-from-parcel/#createfromparcel","text":"fun createFromParcel(parcel: Parcel ): ViewStateCache","title":"createFromParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/describe-contents/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / describeContents describeContents fun describeContents(): Int","title":"Describe contents"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/describe-contents/#describecontents","text":"fun describeContents(): Int","title":"describeContents"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/new-array/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / newArray newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"New array"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/new-array/#newarray","text":"fun newArray(size: Int ): Array ViewStateCache ?","title":"newArray"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/prune/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / prune prune fun prune(retaining: Collection Named * ): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped.","title":"Prune"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/prune/#prune","text":"fun prune(retaining: Collection Named * ): Unit To be called when the set of hidden views changes but the visible view remains the same. Any cached view state held for renderings that are not compatible those in retaining will be dropped.","title":"prune"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/restore/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / restore restore fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view s View.onRestoreInstanceState .","title":"Restore"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/restore/#restore","text":"fun restore(from: ViewStateCache ): Unit Replaces the state of the receiver with that of from . Typical usage is to call this from a container view s View.onRestoreInstanceState .","title":"restore"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/update/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / update update fun update(retainedRenderings: Collection Named * , oldViewMaybe: View ?, newView: View ): Boolean Parameters retainedRenderings - the renderings to be considered hidden after this update. Any associated view state will be retained in the cache, possibly to be restored to newView on a succeeding call to his method. Any other cached view state will be dropped. oldViewMaybe - the view that is being removed, if any, which is expected to be showing a Named rendering. If that rendering is compatible with a member of retainedRenderings , its state will be saved . newView - the view that is about to be displayed, which must be showing a Named rendering. If compatible view state is found in the cache, it is restored . Return true if newView has been restored.","title":"Update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/update/#update","text":"fun update(retainedRenderings: Collection Named * , oldViewMaybe: View ?, newView: View ): Boolean","title":"update"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/update/#parameters","text":"retainedRenderings - the renderings to be considered hidden after this update. Any associated view state will be retained in the cache, possibly to be restored to newView on a succeeding call to his method. Any other cached view state will be dropped. oldViewMaybe - the view that is being removed, if any, which is expected to be showing a Named rendering. If that rendering is compatible with a member of retainedRenderings , its state will be saved . newView - the view that is about to be displayed, which must be showing a Named rendering. If compatible view state is found in the cache, it is restored . Return true if newView has been restored.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/write-to-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / writeToParcel writeToParcel fun writeToParcel(parcel: Parcel , flags: Int ): Unit","title":"Write to parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/write-to-parcel/#writetoparcel","text":"fun writeToParcel(parcel: Parcel , flags: Int ): Unit","title":"writeToParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / CREATOR CREATOR companion object CREATOR : Creator ViewStateCache Companion Object Functions Name Summary createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/#creator","text":"companion object CREATOR : Creator ViewStateCache","title":"CREATOR"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/create-from-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / CREATOR / createFromParcel createFromParcel fun createFromParcel(parcel: Parcel ): ViewStateCache","title":"Create from parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/create-from-parcel/#createfromparcel","text":"fun createFromParcel(parcel: Parcel ): ViewStateCache","title":"createFromParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/new-array/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / CREATOR / newArray newArray fun newArray(size: Int ): Array ViewStateCache ?","title":"New array"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-c-r-e-a-t-o-r/new-array/#newarray","text":"fun newArray(size: Int ): Array ViewStateCache ?","title":"newArray"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState SavedState class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. More interesting containers should create their own subclass of BaseSavedState rather than trying to extend this one. Types Name Summary CREATOR companion object CREATOR : Creator ViewStateCache.SavedState Constructors Name Summary init SavedState(superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState(source: Parcel ) Properties Name Summary viewStateCache val viewStateCache: ViewStateCache Functions Name Summary writeToParcel fun writeToParcel(out: Parcel , flags: Int ): Unit Companion Object Functions Name Summary createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#savedstate","text":"class SavedState : BaseSavedState Convenience for use in View.onSaveInstanceState and View.onRestoreInstanceState methods of container views that have no other state of their own to save. More interesting containers should create their own subclass of BaseSavedState rather than trying to extend this one.","title":"SavedState"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#types","text":"Name Summary CREATOR companion object CREATOR : Creator ViewStateCache.SavedState","title":"Types"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#constructors","text":"Name Summary init SavedState(superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState(source: Parcel )","title":"Constructors"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#properties","text":"Name Summary viewStateCache val viewStateCache: ViewStateCache","title":"Properties"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#functions","text":"Name Summary writeToParcel fun writeToParcel(out: Parcel , flags: Int ): Unit","title":"Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-init-/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / init init SavedState(superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState(source: Parcel )","title":" init "},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-init-/#init","text":"SavedState(superState: Parcelable ?, viewStateCache: ViewStateCache ) SavedState(source: Parcel )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/create-from-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / createFromParcel createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState","title":"Create from parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/create-from-parcel/#createfromparcel","text":"fun createFromParcel(source: Parcel ): ViewStateCache.SavedState","title":"createFromParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/new-array/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / newArray newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"New array"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/new-array/#newarray","text":"fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"newArray"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/view-state-cache/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / viewStateCache viewStateCache val viewStateCache: ViewStateCache","title":"View state cache"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/view-state-cache/#viewstatecache","text":"val viewStateCache: ViewStateCache","title":"viewStateCache"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/write-to-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / writeToParcel writeToParcel fun writeToParcel(out: Parcel , flags: Int ): Unit","title":"Write to parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/write-to-parcel/#writetoparcel","text":"fun writeToParcel(out: Parcel , flags: Int ): Unit","title":"writeToParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / CREATOR CREATOR companion object CREATOR : Creator ViewStateCache.SavedState Companion Object Functions Name Summary createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"Home"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/#creator","text":"companion object CREATOR : Creator ViewStateCache.SavedState","title":"CREATOR"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/#companion-object-functions","text":"Name Summary createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/create-from-parcel/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / CREATOR / createFromParcel createFromParcel fun createFromParcel(source: Parcel ): ViewStateCache.SavedState","title":"Create from parcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/create-from-parcel/#createfromparcel","text":"fun createFromParcel(source: Parcel ): ViewStateCache.SavedState","title":"createFromParcel"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/new-array/","text":"workflow-ui-android / com.squareup.workflow.ui.backstack / ViewStateCache / SavedState / CREATOR / newArray newArray fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"New array"},{"location":"kotlin/api/workflow-ui-android/com.squareup.workflow.ui.backstack/-view-state-cache/-saved-state/-c-r-e-a-t-o-r/new-array/#newarray","text":"fun newArray(size: Int ): Array ViewStateCache.SavedState ?","title":"newArray"},{"location":"kotlin/api/workflow-ui-core/","text":"workflow-ui-core Packages Name Summary com.squareup.workflow.ui Index All Types","title":"Home"},{"location":"kotlin/api/workflow-ui-core/#packages","text":"Name Summary com.squareup.workflow.ui","title":"Packages"},{"location":"kotlin/api/workflow-ui-core/#index","text":"All Types","title":"Index"},{"location":"kotlin/api/workflow-ui-core/alltypes/","text":"All Types Name Summary com.squareup.workflow.ui.AlertContainerScreen May show a stack of AlertScreen over a baseScreen . com.squareup.workflow.ui.AlertScreen Models a typical You sure about that? alert box. com.squareup.workflow.ui.BackStackScreen com.squareup.workflow.ui.Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. com.squareup.workflow.ui.HasModals Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. kotlin.collections.List (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.Named Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Home"},{"location":"kotlin/api/workflow-ui-core/alltypes/#all-types","text":"Name Summary com.squareup.workflow.ui.AlertContainerScreen May show a stack of AlertScreen over a baseScreen . com.squareup.workflow.ui.AlertScreen Models a typical You sure about that? alert box. com.squareup.workflow.ui.BackStackScreen com.squareup.workflow.ui.Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. com.squareup.workflow.ui.HasModals Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. kotlin.collections.List (extensions in package com.squareup.workflow.ui) com.squareup.workflow.ui.Named Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"All Types"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/","text":"workflow-ui-core / com.squareup.workflow.ui Package com.squareup.workflow.ui Types Name Summary AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen . AlertScreen data class AlertScreen Models a typical You sure about that? alert box. BackStackScreen data class BackStackScreen StackedT : Any Compatible interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. HasModals interface HasModals out B : Any , out M : Any Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Extensions for External Classes Name Summary kotlin.collections.List Functions Name Summary compatible fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey .","title":"workflow-ui-core"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/#package-comsquareupworkflowui","text":"","title":"Package com.squareup.workflow.ui"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/#types","text":"Name Summary AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen . AlertScreen data class AlertScreen Models a typical You sure about that? alert box. BackStackScreen data class BackStackScreen StackedT : Any Compatible interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. HasModals interface HasModals out B : Any , out M : Any Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Types"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/#extensions-for-external-classes","text":"Name Summary kotlin.collections.List","title":"Extensions for External Classes"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/#functions","text":"Name Summary compatible fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey .","title":"Functions"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/compatible/","text":"workflow-ui-core / com.squareup.workflow.ui / compatible compatible fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . A convenient way to take control over the matching behavior of objects that don t implement Compatible is to wrap them with Named .","title":"Compatible"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/compatible/#compatible","text":"fun compatible(me: Any , you: Any ): Boolean Normally returns true if me and you are instances of the same class. If that common class implements Compatible , both instances must also have the same Compatible.compatibilityKey . A convenient way to take control over the matching behavior of objects that don t implement Compatible is to wrap them with Named .","title":"compatible"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertContainerScreen AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen . Parameters B - the type of baseScreen Constructors Name Summary init AlertContainerScreen(baseScreen: B , alert: AlertScreen ) AlertContainerScreen(baseScreen: B , vararg alerts: AlertScreen )``AlertContainerScreen(baseScreen: B , modals: List AlertScreen = emptyList()) May show a stack of AlertScreen over a baseScreen . Properties Name Summary baseScreen val baseScreen: B modals val modals: List AlertScreen","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/#alertcontainerscreen","text":"data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen .","title":"AlertContainerScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/#parameters","text":"B - the type of baseScreen","title":"Parameters"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/#constructors","text":"Name Summary init AlertContainerScreen(baseScreen: B , alert: AlertScreen ) AlertContainerScreen(baseScreen: B , vararg alerts: AlertScreen )``AlertContainerScreen(baseScreen: B , modals: List AlertScreen = emptyList()) May show a stack of AlertScreen over a baseScreen .","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/#properties","text":"Name Summary baseScreen val baseScreen: B modals val modals: List AlertScreen","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertContainerScreen / init init AlertContainerScreen(baseScreen: B , alert: AlertScreen ) AlertContainerScreen(baseScreen: B , vararg alerts: AlertScreen )``AlertContainerScreen(baseScreen: B , modals: List AlertScreen = emptyList()) May show a stack of AlertScreen over a baseScreen . Parameters B - the type of baseScreen","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/-init-/#init","text":"AlertContainerScreen(baseScreen: B , alert: AlertScreen ) AlertContainerScreen(baseScreen: B , vararg alerts: AlertScreen )``AlertContainerScreen(baseScreen: B , modals: List AlertScreen = emptyList()) May show a stack of AlertScreen over a baseScreen .","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/-init-/#parameters","text":"B - the type of baseScreen","title":"Parameters"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/base-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertContainerScreen / baseScreen baseScreen val baseScreen: B Overrides HasModals.baseScreen","title":"Base screen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/base-screen/#basescreen","text":"val baseScreen: B Overrides HasModals.baseScreen","title":"baseScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/modals/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertContainerScreen / modals modals val modals: List AlertScreen Overrides HasModals.modals","title":"Modals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-container-screen/modals/#modals","text":"val modals: List AlertScreen Overrides HasModals.modals","title":"modals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen AlertScreen data class AlertScreen Models a typical You sure about that? alert box. Types Name Summary Button enum class Button Event sealed class Event Constructors Name Summary init AlertScreen(buttons: Map AlertScreen.Button , String = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) - Unit ) Models a typical You sure about that? alert box. Properties Name Summary buttons val buttons: Map AlertScreen.Button , String cancelable val cancelable: Boolean message val message: String onEvent val onEvent: ( AlertScreen.Event ) - Unit title val title: String Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#alertscreen","text":"data class AlertScreen Models a typical You sure about that? alert box.","title":"AlertScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#types","text":"Name Summary Button enum class Button Event sealed class Event","title":"Types"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#constructors","text":"Name Summary init AlertScreen(buttons: Map AlertScreen.Button , String = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) - Unit ) Models a typical You sure about that? alert box.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#properties","text":"Name Summary buttons val buttons: Map AlertScreen.Button , String cancelable val cancelable: Boolean message val message: String onEvent val onEvent: ( AlertScreen.Event ) - Unit title val title: String","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int","title":"Functions"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / init init AlertScreen(buttons: Map AlertScreen.Button , String = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) - Unit ) Models a typical You sure about that? alert box.","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-init-/#init","text":"AlertScreen(buttons: Map AlertScreen.Button , String = emptyMap(), message: String = \"\", title: String = \"\", cancelable: Boolean = true, onEvent: ( AlertScreen.Event ) - Unit ) Models a typical You sure about that? alert box.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/buttons/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / buttons buttons val buttons: Map AlertScreen.Button , String","title":"Buttons"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/buttons/#buttons","text":"val buttons: Map AlertScreen.Button , String","title":"buttons"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/cancelable/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / cancelable cancelable val cancelable: Boolean","title":"Cancelable"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/cancelable/#cancelable","text":"val cancelable: Boolean","title":"cancelable"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/equals/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/hash-code/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/message/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / message message val message: String","title":"Message"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/message/#message","text":"val message: String","title":"message"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/on-event/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / onEvent onEvent val onEvent: ( AlertScreen.Event ) - Unit","title":"On event"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/on-event/#onevent","text":"val onEvent: ( AlertScreen.Event ) - Unit","title":"onEvent"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/title/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / title title val title: String","title":"Title"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/title/#title","text":"val title: String","title":"title"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Button Button enum class Button Enum Values Name Summary POSITIVE NEGATIVE NEUTRAL","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/#button","text":"enum class Button","title":"Button"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/#enum-values","text":"Name Summary POSITIVE NEGATIVE NEUTRAL","title":"Enum Values"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-n-e-g-a-t-i-v-e/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Button / NEGATIVE NEGATIVE NEGATIVE","title":" n e g a t i v e"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-n-e-g-a-t-i-v-e/#negative","text":"NEGATIVE","title":"NEGATIVE"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-n-e-u-t-r-a-l/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Button / NEUTRAL NEUTRAL NEUTRAL","title":" n e u t r a l"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-n-e-u-t-r-a-l/#neutral","text":"NEUTRAL","title":"NEUTRAL"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-p-o-s-i-t-i-v-e/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Button / POSITIVE POSITIVE POSITIVE","title":" p o s i t i v e"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-button/-p-o-s-i-t-i-v-e/#positive","text":"POSITIVE","title":"POSITIVE"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event Event sealed class Event Types Name Summary ButtonClicked data class ButtonClicked : AlertScreen.Event Canceled object Canceled : AlertScreen.Event Inheritors Name Summary ButtonClicked data class ButtonClicked : AlertScreen.Event Canceled object Canceled : AlertScreen.Event","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/#event","text":"sealed class Event","title":"Event"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/#types","text":"Name Summary ButtonClicked data class ButtonClicked : AlertScreen.Event Canceled object Canceled : AlertScreen.Event","title":"Types"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/#inheritors","text":"Name Summary ButtonClicked data class ButtonClicked : AlertScreen.Event Canceled object Canceled : AlertScreen.Event","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-canceled/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event / Canceled Canceled object Canceled : AlertScreen.Event","title":" canceled"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-canceled/#canceled","text":"object Canceled : AlertScreen.Event","title":"Canceled"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event / ButtonClicked ButtonClicked data class ButtonClicked : AlertScreen.Event Constructors Name Summary init ButtonClicked(button: AlertScreen.Button ) Properties Name Summary button val button: AlertScreen.Button","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/#buttonclicked","text":"data class ButtonClicked : AlertScreen.Event","title":"ButtonClicked"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/#constructors","text":"Name Summary init ButtonClicked(button: AlertScreen.Button )","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/#properties","text":"Name Summary button val button: AlertScreen.Button","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event / ButtonClicked / init init ButtonClicked(button: AlertScreen.Button )","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/-init-/#init","text":"ButtonClicked(button: AlertScreen.Button )","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/button/","text":"workflow-ui-core / com.squareup.workflow.ui / AlertScreen / Event / ButtonClicked / button button val button: AlertScreen.Button","title":"Button"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-alert-screen/-event/-button-clicked/button/#button","text":"val button: AlertScreen.Button","title":"button"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen BackStackScreen data class BackStackScreen StackedT : Any Parameters stack - : screens that have are / have been displayed, ending in the current screen onGoBack - : function to call for a go back gesture. Null indicates such gestures should be disabled. Constructors Name Summary init BackStackScreen(only: StackedT , onGoBack: (( Unit ) - Unit )? = null) BackStackScreen(vararg stack: StackedT , onGoBack: (( Unit ) - Unit )? = null) BackStackScreen(stack: List StackedT , onGoBack: (( Unit ) - Unit )? = null) Properties Name Summary backStack val backStack: List StackedT onGoBack val onGoBack: (( Unit ) - Unit )? : function to call for a go back gesture. Null indicates such gestures should be disabled. stack val stack: List StackedT : screens that have are / have been displayed, ending in the current screen top val top: StackedT","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/#backstackscreen","text":"data class BackStackScreen StackedT : Any","title":"BackStackScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/#parameters","text":"stack - : screens that have are / have been displayed, ending in the current screen onGoBack - : function to call for a go back gesture. Null indicates such gestures should be disabled.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/#constructors","text":"Name Summary init BackStackScreen(only: StackedT , onGoBack: (( Unit ) - Unit )? = null) BackStackScreen(vararg stack: StackedT , onGoBack: (( Unit ) - Unit )? = null) BackStackScreen(stack: List StackedT , onGoBack: (( Unit ) - Unit )? = null)","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/#properties","text":"Name Summary backStack val backStack: List StackedT onGoBack val onGoBack: (( Unit ) - Unit )? : function to call for a go back gesture. Null indicates such gestures should be disabled. stack val stack: List StackedT : screens that have are / have been displayed, ending in the current screen top val top: StackedT","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / init init BackStackScreen(only: StackedT , onGoBack: (( Unit ) - Unit )? = null) BackStackScreen(vararg stack: StackedT , onGoBack: (( Unit ) - Unit )? = null)``BackStackScreen(stack: List StackedT , onGoBack: (( Unit ) - Unit )? = null) Parameters stack - : screens that have are / have been displayed, ending in the current screen onGoBack - : function to call for a go back gesture. Null indicates such gestures should be disabled.","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/-init-/#init","text":"BackStackScreen(only: StackedT , onGoBack: (( Unit ) - Unit )? = null) BackStackScreen(vararg stack: StackedT , onGoBack: (( Unit ) - Unit )? = null)``BackStackScreen(stack: List StackedT , onGoBack: (( Unit ) - Unit )? = null)","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/-init-/#parameters","text":"stack - : screens that have are / have been displayed, ending in the current screen onGoBack - : function to call for a go back gesture. Null indicates such gestures should be disabled.","title":"Parameters"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/back-stack/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / backStack backStack val backStack: List StackedT","title":"Back stack"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/back-stack/#backstack","text":"val backStack: List StackedT","title":"backStack"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/on-go-back/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / onGoBack onGoBack val onGoBack: (( Unit ) - Unit )? : function to call for a go back gesture. Null indicates such gestures should be disabled.","title":"On go back"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/on-go-back/#ongoback","text":"val onGoBack: (( Unit ) - Unit )? : function to call for a go back gesture. Null indicates such gestures should be disabled.","title":"onGoBack"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/stack/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / stack stack val stack: List StackedT : screens that have are / have been displayed, ending in the current screen","title":"Stack"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/stack/#stack","text":"val stack: List StackedT : screens that have are / have been displayed, ending in the current screen","title":"stack"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/top/","text":"workflow-ui-core / com.squareup.workflow.ui / BackStackScreen / top top val top: StackedT","title":"Top"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-back-stack-screen/top/#top","text":"val top: StackedT","title":"top"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/","text":"workflow-ui-core / com.squareup.workflow.ui / Compatible Compatible interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. Renderings that don t implement this interface directly can be distinguished by wrapping them with Named . Properties Name Summary compatibilityKey abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey . Inheritors Name Summary Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/#compatible","text":"interface Compatible Implemented by objects whose compatibility requires more nuance than just being of the same type. Renderings that don t implement this interface directly can be distinguished by wrapping them with Named .","title":"Compatible"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/#properties","text":"Name Summary compatibilityKey abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/#inheritors","text":"Name Summary Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/compatibility-key/","text":"workflow-ui-core / com.squareup.workflow.ui / Compatible / compatibilityKey compatibilityKey abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Compatibility key"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-compatible/compatibility-key/#compatibilitykey","text":"abstract val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey .","title":"compatibilityKey"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/","text":"workflow-ui-core / com.squareup.workflow.ui / HasModals HasModals interface HasModals out B : Any , out M : Any Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module. Properties Name Summary baseScreen abstract val baseScreen: B modals abstract val modals: List M Inheritors Name Summary AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen .","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/#hasmodals","text":"interface HasModals out B : Any , out M : Any Interface implemented by screen classes that represent a stack of zero or more modal screens above a baseScreen . Use of this interface allows platform specific containers to share base classes, like ModalContainer in the workflow-ui-android module.","title":"HasModals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/#properties","text":"Name Summary baseScreen abstract val baseScreen: B modals abstract val modals: List M","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/#inheritors","text":"Name Summary AlertContainerScreen data class AlertContainerScreen B : Any : HasModals B , AlertScreen May show a stack of AlertScreen over a baseScreen .","title":"Inheritors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/base-screen/","text":"workflow-ui-core / com.squareup.workflow.ui / HasModals / baseScreen baseScreen abstract val baseScreen: B","title":"Base screen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/base-screen/#basescreen","text":"abstract val baseScreen: B","title":"baseScreen"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/modals/","text":"workflow-ui-core / com.squareup.workflow.ui / HasModals / modals modals abstract val modals: List M","title":"Modals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-has-modals/modals/#modals","text":"abstract val modals: List M","title":"modals"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/","text":"workflow-ui-core / com.squareup.workflow.ui / Named Named data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Constructors Name Summary init Named(wrapped: W , name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields. Properties Name Summary compatibilityKey val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey . name val name: String wrapped val wrapped: W Functions Name Summary toString fun toString(): String Companion Object Functions Name Summary keyFor fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#named","text":"data class Named W : Any : Compatible Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Named"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#constructors","text":"Name Summary init Named(wrapped: W , name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"Constructors"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#properties","text":"Name Summary compatibilityKey val compatibilityKey: String Instances of the same type are compatible iff they have the same compatibilityKey . name val name: String wrapped val wrapped: W","title":"Properties"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/#companion-object-functions","text":"Name Summary keyFor fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"Companion Object Functions"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/-init-/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / init init Named(wrapped: W , name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":" init "},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/-init-/#init","text":"Named(wrapped: W , name: String ) Allows renderings that do not implement Compatible themselves to be distinguished by more than just their type. Instances are compatible if they have the same name and have compatible fields.","title":"&lt;init&gt;"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/compatibility-key/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / compatibilityKey compatibilityKey val compatibilityKey: String Overrides Compatible.compatibilityKey Instances of the same type are compatible iff they have the same compatibilityKey .","title":"Compatibility key"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/compatibility-key/#compatibilitykey","text":"val compatibilityKey: String Overrides Compatible.compatibilityKey Instances of the same type are compatible iff they have the same compatibilityKey .","title":"compatibilityKey"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/key-for/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / keyFor keyFor fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"Key for"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/key-for/#keyfor","text":"fun keyFor(value: Any , name: String = \"\"): String Calculates the Named.compatibilityKey for a given value and name .","title":"keyFor"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/name/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / name name val name: String","title":"Name"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/name/#name","text":"val name: String","title":"name"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/to-string/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / toString toString fun toString(): String","title":"To string"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/wrapped/","text":"workflow-ui-core / com.squareup.workflow.ui / Named / wrapped wrapped val wrapped: W","title":"Wrapped"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/-named/wrapped/#wrapped","text":"val wrapped: W","title":"wrapped"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/kotlin.collections.-list/","text":"workflow-ui-core / com.squareup.workflow.ui / kotlin.collections.List Extensions for kotlin.collections.List Name Summary goTo fun T : Any List T .goTo(next: T ): List T Helper for List s that are used as back-stacks, where the last element is considered to be the top / current value of the stack.","title":"Home"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/kotlin.collections.-list/#extensions-for-kotlincollectionslist","text":"Name Summary goTo fun T : Any List T .goTo(next: T ): List T Helper for List s that are used as back-stacks, where the last element is considered to be the top / current value of the stack.","title":"Extensions for kotlin.collections.List"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/kotlin.collections.-list/go-to/","text":"workflow-ui-core / com.squareup.workflow.ui / kotlin.collections.List / goTo goTo fun T : Any List T .goTo(next: T ): List T Helper for List s that are used as back-stacks, where the last element is considered to be the top / current value of the stack. Returns a transformation of the receiver by popping back to the first element that is compatible with next . If no matching frame is found, adds next to the end.","title":"Go to"},{"location":"kotlin/api/workflow-ui-core/com.squareup.workflow.ui/kotlin.collections.-list/go-to/#goto","text":"fun T : Any List T .goTo(next: T ): List T Helper for List s that are used as back-stacks, where the last element is considered to be the top / current value of the stack. Returns a transformation of the receiver by popping back to the first element that is compatible with next . If no matching frame is found, adds next to the end.","title":"goTo"},{"location":"swift/","text":"Swift The Workflow infrastructure is split into several modules. Workflow The Workflow library contains the core types that are used to implement state-driven workflows, including the Workflow protocol and related indrastructure. WorkflowUI Contains the basic infrastructure required to build a Workflow-based application that uses UIKit . Workflow for iOS makes extensive use of ReactiveSwift . If you are new to reactive programming, you may want to familiarize yourself with some of the basics. Workflow takes care of a lot of the reactive plumbing in a typical application, but you will have a better time if you understand what the framework is doing. Core Reactive Primitives Basic Operators How does ReactiveSwift relate to RxSwift? Next Steps Tooling Adding Workflow to a Project Building a Workflow Building a View Controller from a Screen Using a Workflow to Show UI","title":"Overview"},{"location":"swift/#swift","text":"The Workflow infrastructure is split into several modules.","title":"Swift"},{"location":"swift/#workflow","text":"The Workflow library contains the core types that are used to implement state-driven workflows, including the Workflow protocol and related indrastructure.","title":"Workflow"},{"location":"swift/#workflowui","text":"Contains the basic infrastructure required to build a Workflow-based application that uses UIKit . Workflow for iOS makes extensive use of ReactiveSwift . If you are new to reactive programming, you may want to familiarize yourself with some of the basics. Workflow takes care of a lot of the reactive plumbing in a typical application, but you will have a better time if you understand what the framework is doing. Core Reactive Primitives Basic Operators How does ReactiveSwift relate to RxSwift?","title":"WorkflowUI"},{"location":"swift/#next-steps","text":"Tooling Adding Workflow to a Project Building a Workflow Building a View Controller from a Screen Using a Workflow to Show UI","title":"Next Steps"},{"location":"swift/adding-workflow-to-a-project/","text":"Adding Workflow to a project This document will guide you through the process of adding Workflow to an iOS project. Libraries You ll need the following four libraries: 1 2 3 4 import Workflow import WorkflowUI import ReactiveSwift import Result The easiest way to integrate these libraries is via Cocoapods. If you are using Cocoapods, you can simply add the dependencies to your .podspec . 1 2 3 4 5 6 7 8 9 10 11 # MySoftware.podspec Pod :: Spec . new do | s | # ... s . dependency Workflow s . dependency WorkflowUI s . dependency ReactiveSwift s . dependency Result # ... end","title":"Adding Workflow to a project"},{"location":"swift/adding-workflow-to-a-project/#adding-workflow-to-a-project","text":"This document will guide you through the process of adding Workflow to an iOS project.","title":"Adding Workflow to a project"},{"location":"swift/adding-workflow-to-a-project/#libraries","text":"You ll need the following four libraries: 1 2 3 4 import Workflow import WorkflowUI import ReactiveSwift import Result The easiest way to integrate these libraries is via Cocoapods. If you are using Cocoapods, you can simply add the dependencies to your .podspec . 1 2 3 4 5 6 7 8 9 10 11 # MySoftware.podspec Pod :: Spec . new do | s | # ... s . dependency Workflow s . dependency WorkflowUI s . dependency ReactiveSwift s . dependency Result # ... end","title":"Libraries"},{"location":"swift/building-a-view-controller-from-screen/","text":"Building a View Controller from a Screen Now that we have a workflow, we need a way to map our screen to an actual view controller. ScreenViewController The ScreenViewController provides a base class that hides the plumbing of updating a view controller from a view model update. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 struct DemoScreen : Screen { let title : String let onTap : () - Void } class DemoScreenViewController : ScreenViewController DemoScreen { private let button : UIButton required init ( screen : DemoScreen , viewRegistry : ViewRegistry ) { button = UIButton () super . init ( screen : screen , viewRegistry : viewRegistry ) update ( screen : screen ) } override func viewDidLoad () { super . viewDidLoad () button . addTarget ( self , action : #selector ( buttonPressed ( sender :)), for : . touchUpInside ) view . addSubview ( button ) } override func viewWillLayoutSubviews () { super . viewWillLayoutSubviews () button . frame = view . bounds } override func screenDidChange ( from previousScreen : DemoScreen ) { super . screenDidChange ( from : previousScreen ) update ( screen : screen ) } private func update ( screen : DemoScreen ) { button . setTitle ( screen . title , for : . normal ) } @objc private func buttonPressed ( sender : UIButton ) { screen . onTap () } } Lifecycle When the view controller is first created, it is given the initial screen value. In the example, we create the button and set the title for it via the update method. The view loads as normal, adding the button the hierarchy and setting up the target:action for the button being pressed. The button is tapped. When the callback is called, we call the onTap closure passed into the screen. The workflow will handle this event, update its state, and a new screen will be rendered. The updated screen is passed to the view controller via the screenDidChange(from previousScreen:) method. Again, the view controller updates the title of the button based on what was passed in the screen.","title":"Building a View Controller from a Screen"},{"location":"swift/building-a-view-controller-from-screen/#building-a-view-controller-from-a-screen","text":"Now that we have a workflow, we need a way to map our screen to an actual view controller.","title":"Building a View Controller from a Screen"},{"location":"swift/building-a-view-controller-from-screen/#screenviewcontroller","text":"The ScreenViewController provides a base class that hides the plumbing of updating a view controller from a view model update. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 struct DemoScreen : Screen { let title : String let onTap : () - Void } class DemoScreenViewController : ScreenViewController DemoScreen { private let button : UIButton required init ( screen : DemoScreen , viewRegistry : ViewRegistry ) { button = UIButton () super . init ( screen : screen , viewRegistry : viewRegistry ) update ( screen : screen ) } override func viewDidLoad () { super . viewDidLoad () button . addTarget ( self , action : #selector ( buttonPressed ( sender :)), for : . touchUpInside ) view . addSubview ( button ) } override func viewWillLayoutSubviews () { super . viewWillLayoutSubviews () button . frame = view . bounds } override func screenDidChange ( from previousScreen : DemoScreen ) { super . screenDidChange ( from : previousScreen ) update ( screen : screen ) } private func update ( screen : DemoScreen ) { button . setTitle ( screen . title , for : . normal ) } @objc private func buttonPressed ( sender : UIButton ) { screen . onTap () } }","title":"ScreenViewController"},{"location":"swift/building-a-view-controller-from-screen/#lifecycle","text":"When the view controller is first created, it is given the initial screen value. In the example, we create the button and set the title for it via the update method. The view loads as normal, adding the button the hierarchy and setting up the target:action for the button being pressed. The button is tapped. When the callback is called, we call the onTap closure passed into the screen. The workflow will handle this event, update its state, and a new screen will be rendered. The updated screen is passed to the view controller via the screenDidChange(from previousScreen:) method. Again, the view controller updates the title of the button based on what was passed in the screen.","title":"Lifecycle"},{"location":"swift/building-a-workflow/","text":"Building a Workflow Introduction A simple workflow looks something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 struct DemoWorkflow : Workflow { var name : String init ( name : String ) { self . name = name } } extension DemoWorkflow { struct State {} func makeInitialState () - State { return State () } func workflowDidChange ( from previousWorkflow : DemoWorkflow , state : inout State ) { } func render ( state : State , context : RenderContext DemoWorkflow ) - String { return Hello, \\( name ) } } A type conforming to Workflow represents a single node in the workflow tree. It should contain any values that must be provided by its parent (who is generally responsible for creating child workflows). Configuration parameters, strings, network services\u2026 If your workflow needs access to a value or object that it cannot create itself, they should be passed into the workflow s initializer. Every workflow defines its own State type to contain any data that should persist through subsequent render passes. Render Workflows are only useful when they render a value for use by their parent (or, if they are the root workflow, for display). This type is very commonly a view model, or Screen . The render(state:context:) method has a couple of parameters, so we\u2019ll work through them one by one. 1 func render ( state : State , context : RenderContext DemoWorkflow ) - Rendering state Contains a value of type State to provide access to the current state. Any time the state of workflow changes, render is called again to take into account the change in state. context The render context: provides a way for a workflow to defer to nested (child) workflows to generate some or all of its rendered output. We\u2019ll walk through that process later on when we cover composition. allows a workflow to request the execution of asynchronous tasks ( Worker s) generates event handlers for use in constructing view models. In order for us to see the anything in our app, we ll need to return a Screen that can be turned into a view controller: 1 2 3 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { return DemoScreen ( title : A nice title ) } Actions, or \u201cThings that advance a workflow\u201d So far we have only covered workflows that perform simple tasks like generate strings or simple screens with no actions. If our workflows take on a complicated roles like generating view models, however, they will inevitably be required to handle events of some kind \u2013 some from UI events such as button taps, others from infrastructure events such as network responses. In conventional UIKit code, it is common to deal with each of those event types differently. The common pattern is to implement a method like handleButtonTap(sender:) . Workflows are more strict about events, however. Workflows require that all events be expressed as Workflow Actions. These actions should be thought of as the entry point to your workflow. If any action of any kind happens (that your workflow cares about), it should be modeled as an action. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct DemoWorkflow : Workflow { /// ... } enum Action : WorkflowAction { typealias WorkflowType = DemoWorkflow case refreshButtonTapped /// UI event case refreshRequestFinished ( RefreshResponse ) /// Network event func apply ( toState state : inout DemoWorkflow . State ) - DemoWorkflow . Output ? { /// ... } } The Update Cycle Every time a new action is received, it is applied to the current state of the workflow. If your workflow does more than simply render values, the action s apply is the method where the logic lives. There are two things that the apply(toState:) method is responsible for: Transitioning state (Optionally) emitting an output event Note that the render(state:context:) method is called after every state change, so you can be sure that any state changes will be reflected. Since we have a way of expressing an event from our UI, we can now use the callback on our view model to send that event back to the workflow: 1 2 3 4 5 6 7 8 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : A nice title , onTap : { sink . send ( Action . refreshButtonTapped ) } } State Some workflows do not need state at all \u2013 they simply render values based on the values they were initialized with. But for more complicated workflows, state management is critical. For example, a multi-screen flow only functions if we are able to define all of the possible steps (model the state), remember which one we are currently on (persist state), and move to other steps in the future (transition state). To define your workflow s state, simply implement the associatedtype State via an enum or struct. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct WelcomeFlowWorkflow : Workflow { enum State { case splashScreen case loginFlow case signupFlow } enum Action : WorkflowAction { case back /// ... } /// ... } Note Workflows (and their State ) should always be implemented through value types (structs and enums) due to the way the framework handles state changes. This means that you can never capture references to self , but the consistent flow of data pays dividends \u2013 try this architecture for a while and we are confident that you will see the benefits. Workers, or Asynchronous work the workflow needs done A workflow may need to do some amount of asynchronous work (such as a network request, reading from a sqlite database, etc). Workers provide a declarative interface to units of asynchronous work. To do something asynchronously, we define a worker that has an Output type and defines a run method that that returns a Reactive Swift SignalProducer . When this worker will be run, the SignalProducer is subscribed to starting the async task. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct RefreshWorker : Worker { enum Output { case success ( String ) case error ( Error ) } func run () - SignalProducer RefreshWorker . Output , NoError { return SignalProducer ( value : . success ( We did it! )) . delay ( 1.0 , on : QueueScheduler . main ) } func isEquivalent ( to otherWorker : RefreshWorker ) - Bool { return true } } Because a Worker is a declarative representation of work, it also needs to define an isEquivalent to guarantee that we are not running more than one at the same time. For the simple example above, it is always considered equivalent as we want only one of this type of worker running at a time. In order to start asynchronous work, the workflow requests it in the render method, looking something like: 1 2 3 4 5 6 7 8 9 10 11 12 public func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { context . awaitResult ( for : RefreshWorker ()) { output - Action in switch output { case . success ( let result ): return Action . refreshComplete ( result ) case . error ( let error ): return Action . refreshError ( error ) } } } When the context is told to await a result from a worker, the context will do the following: Check if there is already a worker running of the same type: If there is not, or isEquivalent is false, call run on the worker and subscribe to the SignalProducer If there is already a worker running and isEquivalent is true, continue to wait for it to produce an output. When the SignalProducer from the Worker returns an output, it is mapped to an Action and handled the same way as any other action. Output Events The last role of the update cycle is to emit output events. As workflows form a hierarchy, it is common for children to send events up the tree. This may happen when a child workflow finishes or cancels, for example. Workflows can define an output type, which may then be returned by Actions. Composition Composition is the primary tool that we can use to manage complexity in a growing application. Workflows should always be kept small enough to be understandable \u2013 less than 150 lines is a good target. By composing together multiple workflows, complex problems can be broken down into individual pieces that can be quickly understood by other developers (including future you). The context provided to the render(state:context:) method defines the API through which composition is made possible. The Render Context The useful role of children is ultimately to provide rendered values (typically screen models) via their render(state:context:) implementation. To obtain that value from a child workflow, the rendered(with context:key:) method is invoked on the child workflow. When a workflow is rendered with the context, the context will do the following: Check if the child workflow is new or existing: If a workflow with the same type was used during the last render pass, the existing child workflow will be updated with the new workflow. Otherwise, a new child workflow node will be initialized. The child workflow s render(state:context:) method is called. The rendered value is returned. In practice, this looks something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct ParentWorkflow : Workflow { func render ( state : State , context : RenderContext ParentWorkflow ) - String { let childWorkflow = ChildWorkflow ( text : Hello, World ) return childWorkflow . rendered ( with : context ) } } struct ChildWorkflow : Workflow { var text : String // ... func render ( state : State , context : RenderContext ChildWorkflow ) - String { return String ( text . reversed ()) } }","title":"Building a Workflow"},{"location":"swift/building-a-workflow/#building-a-workflow","text":"","title":"Building a Workflow"},{"location":"swift/building-a-workflow/#introduction","text":"A simple workflow looks something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 struct DemoWorkflow : Workflow { var name : String init ( name : String ) { self . name = name } } extension DemoWorkflow { struct State {} func makeInitialState () - State { return State () } func workflowDidChange ( from previousWorkflow : DemoWorkflow , state : inout State ) { } func render ( state : State , context : RenderContext DemoWorkflow ) - String { return Hello, \\( name ) } } A type conforming to Workflow represents a single node in the workflow tree. It should contain any values that must be provided by its parent (who is generally responsible for creating child workflows). Configuration parameters, strings, network services\u2026 If your workflow needs access to a value or object that it cannot create itself, they should be passed into the workflow s initializer. Every workflow defines its own State type to contain any data that should persist through subsequent render passes.","title":"Introduction"},{"location":"swift/building-a-workflow/#render","text":"Workflows are only useful when they render a value for use by their parent (or, if they are the root workflow, for display). This type is very commonly a view model, or Screen . The render(state:context:) method has a couple of parameters, so we\u2019ll work through them one by one. 1 func render ( state : State , context : RenderContext DemoWorkflow ) - Rendering","title":"Render"},{"location":"swift/building-a-workflow/#state","text":"Contains a value of type State to provide access to the current state. Any time the state of workflow changes, render is called again to take into account the change in state.","title":"state"},{"location":"swift/building-a-workflow/#context","text":"The render context: provides a way for a workflow to defer to nested (child) workflows to generate some or all of its rendered output. We\u2019ll walk through that process later on when we cover composition. allows a workflow to request the execution of asynchronous tasks ( Worker s) generates event handlers for use in constructing view models. In order for us to see the anything in our app, we ll need to return a Screen that can be turned into a view controller: 1 2 3 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { return DemoScreen ( title : A nice title ) }","title":"context"},{"location":"swift/building-a-workflow/#actions-or-things-that-advance-a-workflow","text":"So far we have only covered workflows that perform simple tasks like generate strings or simple screens with no actions. If our workflows take on a complicated roles like generating view models, however, they will inevitably be required to handle events of some kind \u2013 some from UI events such as button taps, others from infrastructure events such as network responses. In conventional UIKit code, it is common to deal with each of those event types differently. The common pattern is to implement a method like handleButtonTap(sender:) . Workflows are more strict about events, however. Workflows require that all events be expressed as Workflow Actions. These actions should be thought of as the entry point to your workflow. If any action of any kind happens (that your workflow cares about), it should be modeled as an action. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct DemoWorkflow : Workflow { /// ... } enum Action : WorkflowAction { typealias WorkflowType = DemoWorkflow case refreshButtonTapped /// UI event case refreshRequestFinished ( RefreshResponse ) /// Network event func apply ( toState state : inout DemoWorkflow . State ) - DemoWorkflow . Output ? { /// ... } }","title":"Actions, or \u201cThings that advance a workflow\u201d"},{"location":"swift/building-a-workflow/#the-update-cycle","text":"Every time a new action is received, it is applied to the current state of the workflow. If your workflow does more than simply render values, the action s apply is the method where the logic lives. There are two things that the apply(toState:) method is responsible for: Transitioning state (Optionally) emitting an output event Note that the render(state:context:) method is called after every state change, so you can be sure that any state changes will be reflected. Since we have a way of expressing an event from our UI, we can now use the callback on our view model to send that event back to the workflow: 1 2 3 4 5 6 7 8 func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { // Create a sink of our Action type so we can send actions back to the workflow. let sink = context . makeSink ( of : Action . self ) return DemoScreen ( title : A nice title , onTap : { sink . send ( Action . refreshButtonTapped ) } }","title":"The Update Cycle"},{"location":"swift/building-a-workflow/#state_1","text":"Some workflows do not need state at all \u2013 they simply render values based on the values they were initialized with. But for more complicated workflows, state management is critical. For example, a multi-screen flow only functions if we are able to define all of the possible steps (model the state), remember which one we are currently on (persist state), and move to other steps in the future (transition state). To define your workflow s state, simply implement the associatedtype State via an enum or struct. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 struct WelcomeFlowWorkflow : Workflow { enum State { case splashScreen case loginFlow case signupFlow } enum Action : WorkflowAction { case back /// ... } /// ... } Note Workflows (and their State ) should always be implemented through value types (structs and enums) due to the way the framework handles state changes. This means that you can never capture references to self , but the consistent flow of data pays dividends \u2013 try this architecture for a while and we are confident that you will see the benefits.","title":"State"},{"location":"swift/building-a-workflow/#workers-or-asynchronous-work-the-workflow-needs-done","text":"A workflow may need to do some amount of asynchronous work (such as a network request, reading from a sqlite database, etc). Workers provide a declarative interface to units of asynchronous work. To do something asynchronously, we define a worker that has an Output type and defines a run method that that returns a Reactive Swift SignalProducer . When this worker will be run, the SignalProducer is subscribed to starting the async task. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct RefreshWorker : Worker { enum Output { case success ( String ) case error ( Error ) } func run () - SignalProducer RefreshWorker . Output , NoError { return SignalProducer ( value : . success ( We did it! )) . delay ( 1.0 , on : QueueScheduler . main ) } func isEquivalent ( to otherWorker : RefreshWorker ) - Bool { return true } } Because a Worker is a declarative representation of work, it also needs to define an isEquivalent to guarantee that we are not running more than one at the same time. For the simple example above, it is always considered equivalent as we want only one of this type of worker running at a time. In order to start asynchronous work, the workflow requests it in the render method, looking something like: 1 2 3 4 5 6 7 8 9 10 11 12 public func render ( state : State , context : RenderContext DemoWorkflow ) - DemoScreen { context . awaitResult ( for : RefreshWorker ()) { output - Action in switch output { case . success ( let result ): return Action . refreshComplete ( result ) case . error ( let error ): return Action . refreshError ( error ) } } } When the context is told to await a result from a worker, the context will do the following: Check if there is already a worker running of the same type: If there is not, or isEquivalent is false, call run on the worker and subscribe to the SignalProducer If there is already a worker running and isEquivalent is true, continue to wait for it to produce an output. When the SignalProducer from the Worker returns an output, it is mapped to an Action and handled the same way as any other action.","title":"Workers, or \"Asynchronous work the workflow needs done\""},{"location":"swift/building-a-workflow/#output-events","text":"The last role of the update cycle is to emit output events. As workflows form a hierarchy, it is common for children to send events up the tree. This may happen when a child workflow finishes or cancels, for example. Workflows can define an output type, which may then be returned by Actions.","title":"Output Events"},{"location":"swift/building-a-workflow/#composition","text":"Composition is the primary tool that we can use to manage complexity in a growing application. Workflows should always be kept small enough to be understandable \u2013 less than 150 lines is a good target. By composing together multiple workflows, complex problems can be broken down into individual pieces that can be quickly understood by other developers (including future you). The context provided to the render(state:context:) method defines the API through which composition is made possible.","title":"Composition"},{"location":"swift/building-a-workflow/#the-render-context","text":"The useful role of children is ultimately to provide rendered values (typically screen models) via their render(state:context:) implementation. To obtain that value from a child workflow, the rendered(with context:key:) method is invoked on the child workflow. When a workflow is rendered with the context, the context will do the following: Check if the child workflow is new or existing: If a workflow with the same type was used during the last render pass, the existing child workflow will be updated with the new workflow. Otherwise, a new child workflow node will be initialized. The child workflow s render(state:context:) method is called. The rendered value is returned. In practice, this looks something like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct ParentWorkflow : Workflow { func render ( state : State , context : RenderContext ParentWorkflow ) - String { let childWorkflow = ChildWorkflow ( text : Hello, World ) return childWorkflow . rendered ( with : context ) } } struct ChildWorkflow : Workflow { var text : String // ... func render ( state : State , context : RenderContext ChildWorkflow ) - String { return String ( text . reversed ()) } }","title":"The Render Context"},{"location":"swift/tooling/","text":"Tooling Xcode templates Workflow comes with a set of file templates to simplify the process of building features. After installation, these templates can be found via File New New File... in Xcode. Launch terminal and navigate to the Workflow source directory. Run ./Tooling/Templates/install-xcode-templates.sh . Restart Xcode.","title":"Tooling"},{"location":"swift/tooling/#tooling","text":"","title":"Tooling"},{"location":"swift/tooling/#xcode-templates","text":"Workflow comes with a set of file templates to simplify the process of building features. After installation, these templates can be found via File New New File... in Xcode. Launch terminal and navigate to the Workflow source directory. Run ./Tooling/Templates/install-xcode-templates.sh . Restart Xcode.","title":"Xcode templates"},{"location":"swift/using-a-workflow-for-ui/","text":"Using a workflow to show UI ContainerViewController In the Workflow architecture, the container acts as the glue between the state-driven world of Workflows and the UI that is ultimately displayed. On iOS, the container is implemented as ContainerViewController . 1 2 3 4 5 6 7 8 /// Drives view controllers from a root Workflow. public final class ContainerViewController Output , ScreenType : UIViewController where ScreenType : Screen { /// Emits output events from the bound workflow. public let output : Signal Output , NoError public convenience init W : Workflow ( workflow : W , viewRegistry : ViewRegistry ) where W . Rendering == ScreenType , W . Output == Output } The first initializer argument is the workflow that will drive your application. The second initializer argument is the view registry. The view registry acts as a mapping between the view models ( Screen s) that your workflow emits and the concrete UI implementations that should be used to display them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import UIKit import Workflow import WorkflowUI @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) - Bool { let window = UIWindow ( frame : UIScreen . main . bounds ) var viewRegistry = ViewRegistry () let container = ContainerViewController ( workflow : DemoWorkflow (), viewRegistry : viewRegistry ) window . rootViewController = container self . window = window window . makeKeyAndVisible () return true } } Your project should compile at this point. It will crash as soon as the workflow emits a screen, however, because we have not registered any UI implementations with the view registry. Let s fix that: 1 2 3 4 5 6 7 8 var viewRegistry = ViewRegistry () // Register the DemoScreenViewController to be responsible for DemoScreen. viewRegistry . register ( screenViewControllerType : DemoScreenViewController . self ) let container = ContainerViewController ( workflow : DemoWorkflow (), viewRegistry : viewRegistry ) Now, when the ContainerViewController is shown, it will start the workflow and render will be called returning the DemoScreen . The container will use the view registry to map the DemoScreen to a DemoScreenViewController and add it to the view hierarchy to display.","title":"Using a Workflow to Show UI"},{"location":"swift/using-a-workflow-for-ui/#using-a-workflow-to-show-ui","text":"","title":"Using a workflow to show UI"},{"location":"swift/using-a-workflow-for-ui/#containerviewcontroller","text":"In the Workflow architecture, the container acts as the glue between the state-driven world of Workflows and the UI that is ultimately displayed. On iOS, the container is implemented as ContainerViewController . 1 2 3 4 5 6 7 8 /// Drives view controllers from a root Workflow. public final class ContainerViewController Output , ScreenType : UIViewController where ScreenType : Screen { /// Emits output events from the bound workflow. public let output : Signal Output , NoError public convenience init W : Workflow ( workflow : W , viewRegistry : ViewRegistry ) where W . Rendering == ScreenType , W . Output == Output } The first initializer argument is the workflow that will drive your application. The second initializer argument is the view registry. The view registry acts as a mapping between the view models ( Screen s) that your workflow emits and the concrete UI implementations that should be used to display them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import UIKit import Workflow import WorkflowUI @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) - Bool { let window = UIWindow ( frame : UIScreen . main . bounds ) var viewRegistry = ViewRegistry () let container = ContainerViewController ( workflow : DemoWorkflow (), viewRegistry : viewRegistry ) window . rootViewController = container self . window = window window . makeKeyAndVisible () return true } } Your project should compile at this point. It will crash as soon as the workflow emits a screen, however, because we have not registered any UI implementations with the view registry. Let s fix that: 1 2 3 4 5 6 7 8 var viewRegistry = ViewRegistry () // Register the DemoScreenViewController to be responsible for DemoScreen. viewRegistry . register ( screenViewControllerType : DemoScreenViewController . self ) let container = ContainerViewController ( workflow : DemoWorkflow (), viewRegistry : viewRegistry ) Now, when the ContainerViewController is shown, it will start the workflow and render will be called returning the DemoScreen . The container will use the view registry to map the DemoScreen to a DemoScreenViewController and add it to the view hierarchy to display.","title":"ContainerViewController"}]}